{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar promiseResolver = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n    var isObject, key;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            isObject = Object.prototype.toString.call(data) === '[object Object]';\n\n            if (!(typeof data.then === 'function')) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 4;\n            return data;\n\n          case 4:\n            data = _context.sent;\n            _context.next = 16;\n            break;\n\n          case 7:\n            if (!isObject) {\n              _context.next = 16;\n              break;\n            }\n\n            _context.t0 = _regeneratorRuntime.keys(data);\n\n          case 9:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 16;\n              break;\n            }\n\n            key = _context.t1.value;\n            _context.next = 13;\n            return promiseResolver(data[key]);\n\n          case 13:\n            data[key] = _context.sent;\n            _context.next = 9;\n            break;\n\n          case 16:\n            return _context.abrupt(\"return\", data);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function promiseResolver(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var setFetchedData = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(state, setState, fetchedData) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setState(_objectSpread(_objectSpread({}, state), {}, {\n              isFetch: true\n            }));\n            _context2.next = 3;\n            return promiseResolver(fetchedData);\n\n          case 3:\n            fetchedData = _context2.sent;\n            setState(_objectSpread(_objectSpread(_objectSpread({}, state), fetchedData), {}, {\n              isFetch: false\n            }));\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function setFetchedData(_x2, _x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var categoryDataNormalization = function categoryDataNormalization(categoryList) {\n  return categoryList.map(function (category) {\n    var childs = category.childs.map(function (child) {\n      return _objectSpread(_objectSpread({}, child), {}, {\n        parent: category\n      });\n    });\n    return _objectSpread(_objectSpread({}, category), {}, {\n      childs: childs\n    });\n  });\n};\nexport var categorySearchHelper = function categorySearchHelper(text, categoryList) {\n  var searchRegExp = RegExp(text, 'i');\n  return categoryList.reduce(function (list, category) {\n    category.childs.forEach(function (sub_ctgr) {\n      if (searchRegExp.test(sub_ctgr.name)) {\n        list.push(sub_ctgr);\n      }\n    });\n    return list;\n  }, []);\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/helpers.ts"],"names":["promiseResolver","data","isObject","Object","prototype","toString","call","then","key","setFetchedData","state","setState","fetchedData","isFetch","categoryDataNormalization","categoryList","map","category","childs","child","parent","categorySearchHelper","text","searchRegExp","RegExp","reduce","list","forEach","sub_ctgr","test","name","push"],"mappings":";;;;;;;;AAaA,IAAMA,eAAe;AAAA,sEAAG,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,YAAAA,QADc,GACHC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,IAA/B,MAAyC,iBADtC;;AAAA,kBAEhB,OAAOA,IAAI,CAACM,IAAZ,KAAqB,UAFL;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGHN,IAHG;;AAAA;AAGhBA,YAAAA,IAHgB;AAAA;AAAA;;AAAA;AAAA,iBAITC,QAJS;AAAA;AAAA;AAAA;;AAAA,mDAKED,IALF;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKLO,YAAAA,GALK;AAAA;AAAA,mBAMMR,eAAe,CAACC,IAAI,CAACO,GAAD,CAAL,CANrB;;AAAA;AAMZP,YAAAA,IAAI,CAACO,GAAD,CANQ;AAAA;AAAA;;AAAA;AAAA,6CASbP,IATa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfD,eAAe;AAAA;AAAA;AAAA,GAArB;;AAYA,OAAO,IAAMS,cAAgC;AAAA,uEAAG,kBAAOC,KAAP,EAAcC,QAAd,EAAwBC,WAAxB;AAAA;AAAA;AAAA;AAAA;AAC5CD,YAAAA,QAAQ,iCAAKD,KAAL;AAAYG,cAAAA,OAAO,EAAE;AAArB,eAAR;AAD4C;AAAA,mBAExBb,eAAe,CAACY,WAAD,CAFS;;AAAA;AAE5CA,YAAAA,WAF4C;AAG5CD,YAAAA,QAAQ,+CAAKD,KAAL,GAAeE,WAAf;AAA4BC,cAAAA,OAAO,EAAE;AAArC,eAAR;;AAH4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhCJ,cAAgC;AAAA;AAAA;AAAA,GAAtC;AAMP,OAAO,IAAMK,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,YAAD;AAAA,SACrCA,YAAY,CAACC,GAAb,CAAiB,UAAAC,QAAQ,EAAI;AACzB,QAAMC,MAAM,GAAGD,QAAQ,CAACC,MAAT,CAAgBF,GAAhB,CAAoB,UAAAG,KAAK;AAAA,6CAASA,KAAT;AAAgBC,QAAAA,MAAM,EAAEH;AAAxB;AAAA,KAAzB,CAAf;AACA,2CAAWA,QAAX;AAAqBC,MAAAA,MAAM,EAANA;AAArB;AACH,GAHD,CADqC;AAAA,CAAlC;AAOP,OAAO,IAAMG,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD,EAAeP,YAAf,EAA4D;AAC5F,MAAMQ,YAAY,GAAGC,MAAM,CAACF,IAAD,EAAO,GAAP,CAA3B;AACA,SAAOP,YAAY,CACdU,MADE,CACK,UAACC,IAAD,EAAOT,QAAP,EAAoB;AACxBA,IAAAA,QAAQ,CAACC,MAAT,CAAgBS,OAAhB,CAAwB,UAAAC,QAAQ,EAAI;AAChC,UAAIL,YAAY,CAACM,IAAb,CAAkBD,QAAQ,CAACE,IAA3B,CAAJ,EAAsC;AAClCJ,QAAAA,IAAI,CAACK,IAAL,CAAUH,QAAV;AACH;AACJ,KAJD;AAKA,WAAOF,IAAP;AACH,GARE,EAQA,EARA,CAAP;AASH,CAXM","sourcesContent":["import {CategoryType} from \"@root/interfaces/Categories\";\r\nimport {Dispatch, SetStateAction} from \"react\";\r\nimport {IdNameType} from \"@root/interfaces/Announcement\";\r\n\r\n\r\ntype FetchedDataProps = (\r\n    state: any,\r\n    setState: Dispatch<SetStateAction<any>>,\r\n    fetchedData: any,\r\n) => void;\r\n\r\ntype SearchType = (IdNameType & { parent: any, icons: [], image: { url: string } })[];\r\n\r\nconst promiseResolver = async (data) => {\r\n    const isObject = Object.prototype.toString.call(data) === '[object Object]';\r\n    if (typeof data.then === 'function') {\r\n        data = await data;\r\n    } else if (isObject) {\r\n        for (const key in data) {\r\n            data[key] = await promiseResolver(data[key]);\r\n        }\r\n    }\r\n    return data;\r\n};\r\n\r\nexport const setFetchedData: FetchedDataProps = async (state, setState, fetchedData) => {\r\n    setState({...state, isFetch: true});\r\n    fetchedData = await promiseResolver(fetchedData);\r\n    setState({...state, ...fetchedData, isFetch: false});\r\n};\r\n\r\nexport const categoryDataNormalization = (categoryList: CategoryType[]): CategoryType[] => (\r\n    categoryList.map(category => {\r\n        const childs = category.childs.map(child => ({...child, parent: category}));\r\n        return {...category, childs};\r\n    })\r\n);\r\n\r\nexport const categorySearchHelper = (text: string, categoryList: CategoryType[]): SearchType => {\r\n    const searchRegExp = RegExp(text, 'i');\r\n    return categoryList\r\n        .reduce((list, category) => {\r\n            category.childs.forEach(sub_ctgr => {\r\n                if (searchRegExp.test(sub_ctgr.name)) {\r\n                    list.push(sub_ctgr);\r\n                }\r\n            })\r\n            return list;\r\n        }, []);\r\n};"]},"metadata":{},"sourceType":"module"}