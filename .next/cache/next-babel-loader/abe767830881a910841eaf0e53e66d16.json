{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { DragDropContext, Droppable, Draggable, resetServerContext } from 'react-beautiful-dnd';\nexport var DropZone = function DropZone(props) {\n  var _props$images = props.images,\n      images = _props$images === void 0 ? [] : _props$images,\n      setImages = props.setImages;\n\n  function handleOnDragEnd(result) {\n    if (!result.destination) return;\n    var items = Array.from(images);\n\n    var _items$splice = items.splice(result.source.index, 1),\n        _items$splice2 = _slicedToArray(_items$splice, 1),\n        reorderedItem = _items$splice2[0];\n\n    items.splice(result.destination.index, 0, reorderedItem);\n    setImages(items);\n  }\n\n  resetServerContext();\n  return __jsx(\"div\", {\n    className: \"App\"\n  }, __jsx(\"header\", {\n    className: \"App-header\"\n  }, __jsx(\"input\", {\n    type: \"file\"\n  }), __jsx(DragDropContext, {\n    onDragEnd: handleOnDragEnd\n  }, __jsx(Droppable, {\n    droppableId: \"characters\",\n    isDropDisabled: false\n  }, function (provided) {\n    return __jsx(\"ul\", _extends({\n      className: \"characters\"\n    }, provided.droppableProps, {\n      ref: provided.innerRef\n    }), images.map(function (_ref, index) {\n      var id = _ref.id,\n          name = _ref.name,\n          url = _ref.url;\n      return __jsx(Draggable, {\n        key: id,\n        draggableId: id,\n        index: index\n      }, function (provided) {\n        return __jsx(\"li\", _extends({\n          ref: provided.innerRef\n        }, provided.draggableProps, provided.dragHandleProps), __jsx(\"div\", {\n          className: \"characters-thumb\"\n        }, __jsx(\"img\", {\n          src: url,\n          alt: \"\".concat(name, \" Thumb\")\n        })));\n      });\n    }), provided.placeholder);\n  }))));\n};\n_c = DropZone;\n\nvar _c;\n\n$RefreshReg$(_c, \"DropZone\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/drop_zone/DropZone.tsx"],"names":["React","DragDropContext","Droppable","Draggable","resetServerContext","DropZone","props","images","setImages","handleOnDragEnd","result","destination","items","Array","from","splice","source","index","reorderedItem","provided","droppableProps","innerRef","map","id","name","url","draggableProps","dragHandleProps","placeholder"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkC,OAAlC;AACA,SAAQC,eAAR,EAAyBC,SAAzB,EAAoCC,SAApC,EAA+CC,kBAA/C,QAAwE,qBAAxE;AAGA,OAAO,IAAMC,QAAoD,GAAG,SAAvDA,QAAuD,CAACC,KAAD,EAAW;AAAA,sBAC1CA,KAD0C,CACpEC,MADoE;AAAA,MACpEA,MADoE,8BAC3D,EAD2D;AAAA,MACvDC,SADuD,GAC1CF,KAD0C,CACvDE,SADuD;;AAG3E,WAASC,eAAT,CAAyBC,MAAzB,EAAiC;AAC7B,QAAI,CAACA,MAAM,CAACC,WAAZ,EAAyB;AAEzB,QAAMC,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAWP,MAAX,CAAd;;AAH6B,wBAILK,KAAK,CAACG,MAAN,CAAaL,MAAM,CAACM,MAAP,CAAcC,KAA3B,EAAkC,CAAlC,CAJK;AAAA;AAAA,QAItBC,aAJsB;;AAK7BN,IAAAA,KAAK,CAACG,MAAN,CAAaL,MAAM,CAACC,WAAP,CAAmBM,KAAhC,EAAuC,CAAvC,EAA0CC,aAA1C;AAEAV,IAAAA,SAAS,CAACI,KAAD,CAAT;AACH;;AAEDR,EAAAA,kBAAkB;AAElB,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAQ,IAAA,SAAS,EAAC;AAAlB,KACI;AAAO,IAAA,IAAI,EAAC;AAAZ,IADJ,EAEI,MAAC,eAAD;AAAiB,IAAA,SAAS,EAAEK;AAA5B,KACI,MAAC,SAAD;AAAW,IAAA,WAAW,EAAC,YAAvB;AAAoC,IAAA,cAAc,EAAE;AAApD,KACK,UAACU,QAAD;AAAA,WACG;AAAI,MAAA,SAAS,EAAC;AAAd,OAA+BA,QAAQ,CAACC,cAAxC;AAAwD,MAAA,GAAG,EAAED,QAAQ,CAACE;AAAtE,QACKd,MAAM,CAACe,GAAP,CAAW,gBAAkBL,KAAlB,EAA4B;AAAA,UAA1BM,EAA0B,QAA1BA,EAA0B;AAAA,UAAtBC,IAAsB,QAAtBA,IAAsB;AAAA,UAAhBC,GAAgB,QAAhBA,GAAgB;AACpC,aACI,MAAC,SAAD;AAAW,QAAA,GAAG,EAAEF,EAAhB;AAAoB,QAAA,WAAW,EAAEA,EAAjC;AAAqC,QAAA,KAAK,EAAEN;AAA5C,SACK,UAACE,QAAD;AAAA,eACG;AAAI,UAAA,GAAG,EAAEA,QAAQ,CAACE;AAAlB,WAAgCF,QAAQ,CAACO,cAAzC,EAA6DP,QAAQ,CAACQ,eAAtE,GACI;AAAK,UAAA,SAAS,EAAC;AAAf,WACI;AAAK,UAAA,GAAG,EAAEF,GAAV;AAAe,UAAA,GAAG,YAAKD,IAAL;AAAlB,UADJ,CADJ,CADH;AAAA,OADL,CADJ;AAWH,KAZA,CADL,EAcKL,QAAQ,CAACS,WAdd,CADH;AAAA,GADL,CADJ,CAFJ,CADJ,CADJ;AA6BH,CA5CM;KAAMvB,Q","sourcesContent":["import React, {Dispatch, FC} from 'react';\r\nimport {DragDropContext, Droppable, Draggable, resetServerContext} from 'react-beautiful-dnd';\r\n\r\n\r\nexport const DropZone: FC<{images: [], setImages: Dispatch<any>}> = (props) => {\r\n    const {images = [], setImages} = props;\r\n\r\n    function handleOnDragEnd(result) {\r\n        if (!result.destination) return;\r\n\r\n        const items = Array.from(images);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        setImages(items);\r\n    }\r\n\r\n    resetServerContext();\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <input type='file' />\r\n                <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                    <Droppable droppableId=\"characters\" isDropDisabled={false}>\r\n                        {(provided) => (\r\n                            <ul className=\"characters\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                                {images.map(({id, name, url}, index) => {\r\n                                    return (\r\n                                        <Draggable key={id} draggableId={id} index={index}>\r\n                                            {(provided) => (\r\n                                                <li ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                                    <div className=\"characters-thumb\">\r\n                                                        <img src={url} alt={`${name} Thumb`}/>\r\n                                                    </div>\r\n                                                </li>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    );\r\n                                })}\r\n                                {provided.placeholder}\r\n                            </ul>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n            </header>\r\n        </div>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}