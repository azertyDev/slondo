{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { userAPI } from '@src/api/api';\nimport { AdvrtForm } from './AdvrtForm';\nimport { createAdvrtSchema, isRequired } from \"@root/validation_schemas/createAdvrtSchema\";\nimport { useFormik, FormikProvider } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport { dataPrepare } from \"@src/components/advertisement/create_advrt/advrt_form/advrt_params/helpers\";\nconst initFields = {\n  title: '',\n  safe_deal: false,\n  delivery: false,\n  exchange: false,\n  location: null,\n  files: [],\n  description: '',\n  phone: '',\n  avalTime: {\n    isActive: false,\n    start_time: '00:00',\n    end_time: '00:00',\n    week: [{\n      id: 1,\n      name: 'Пн'\n    }, {\n      id: 2,\n      name: 'Вт'\n    }, {\n      id: 3,\n      name: 'Ср'\n    }, {\n      id: 4,\n      name: 'Чт'\n    }, {\n      id: 5,\n      name: 'Пт'\n    }, {\n      id: 6,\n      name: 'Сб'\n    }, {\n      id: 7,\n      name: 'Вс'\n    }]\n  },\n  // auction: {\n  //     duration_id: null,\n  //     offer_the_price: null,\n  //     auto_renewal: false,\n  //     display_phone: false,\n  //     reserve_price: null,\n  //     price_by_now: {\n  //         isActive: false,\n  //         price: ''\n  //     }\n  // },\n  adParams: {\n    safety: [],\n    multimedia: [],\n    assistant: [],\n    exterior: []\n  }\n};\nexport const AdvrtFormContainer = props => {\n  const {\n    createAdvrt,\n    setIsForm\n  } = props;\n  const {\n    adType,\n    category,\n    subCategory\n  } = createAdvrt;\n  const {\n    locations\n  } = useSelector(store => store);\n  const {\n    0: isPreview,\n    1: setIsPreview\n  } = useState(false);\n  const {\n    0: isSuccess,\n    1: setIsSuccess\n  } = useState(false);\n\n  const preparedData = data => {\n    const form = new FormData();\n    const {\n      avalTime,\n      location,\n      files,\n      adParams\n    } = data;\n    form.set('ads_type_id', adType.id.toString());\n    form.set('parent_categories_id', category.id.toString());\n    form.set('title', data.title);\n    form.set('safe_deal', Number(data.safe_deal).toString());\n    form.set('delivery', Number(data.delivery).toString());\n    form.set('exchange', Number(data.exchange).toString());\n    form.set('phone', data.phone);\n    form.set('description', data.description);\n    form.set('price', data.price);\n    form.set('currency_id', data.currency.id.toString());\n    files.forEach(({\n      file\n    }) => form.append('files[]', file, file.name));\n\n    if (avalTime.isActive) {\n      avalTime.week.forEach((day, i) => form.append(`week[${i}]`, day.id.toString()));\n      form.set('start_time', avalTime.start_time.toString());\n      form.set('end_time', avalTime.end_time.toString());\n    }\n\n    for (const key in location) {\n      if (typeof location[key] === 'number') {\n        form.set(key, Number(location[key]).toString());\n      }\n    }\n\n    for (let key in adParams) {\n      const value = adParams[key];\n\n      if (value) {\n        if (typeof value === 'string') {\n          form.set(key, value);\n        } else if (Array.isArray(value)) {\n          value.forEach((value, i) => form.append(`${key}[${i}]`, value.id));\n        } else {\n          if (value.id) {\n            switch (key) {\n              case 'models':\n                key = 'model';\n                break;\n\n              case 'colors':\n                key = 'color';\n                break;\n            }\n\n            form.set(`${key}_id`, value.id);\n          }\n        }\n      }\n    }\n\n    for (const key of form.entries()) {\n      console.log(key[0] + '-' + key[1]);\n    }\n\n    return form;\n  };\n\n  const onSubmit = async values => {\n    try {\n      if (!isPreview) {\n        setIsPreview(true);\n      } else {\n        const data = preparedData(values);\n        await userAPI.createAdvrt(data);\n        setIsSuccess(true);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: initFields,\n    validationSchema: createAdvrtSchema,\n    onSubmit\n  });\n  const {\n    values,\n    setValues,\n    errors,\n    setErrors,\n    touched,\n    setTouched,\n    handleBlur\n  } = formik;\n  let {\n    adParams\n  } = values;\n\n  const handleBackBtn = () => {\n    isPreview ? setIsPreview(false) : setIsForm(false);\n  };\n\n  const handleCheckboxChange = valName => ({\n    target\n  }) => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [valName]: target.checked\n    }));\n  };\n\n  const handleParamsCheckbox = (valueName, value) => () => {\n    if (adParams[valueName]) {\n      if (adParams[valueName].some(val => val.id === value.id)) {\n        adParams[valueName].map((val, index) => {\n          if (val.id === value.id) {\n            adParams[valueName].splice(index, 1);\n          }\n        });\n      } else {\n        adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n          [valueName]: [...adParams[valueName], value]\n        });\n      }\n    } else {\n      adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n        [valueName]: [value]\n      });\n    }\n\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      adParams\n    }));\n  };\n\n  const handleMenuItem = valueName => (newValue, setAnchor) => () => {\n    setAnchor(null);\n\n    if (valueName === 'currency') {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        [valueName]: newValue\n      }));\n    } else {\n      // Reset sub props in values\n      Object.keys(newValue).map(key => {\n        if (adParams[key]) {\n          adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n            [key]: {\n              id: null,\n              name: 'Не выбрано'\n            }\n          });\n        }\n\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          adParams: _objectSpread(_objectSpread({}, adParams), {}, {\n            [valueName]: newValue\n          })\n        }));\n      });\n    }\n  };\n\n  const handleListItem = (valueName, value) => () => {\n    if (adParams[valueName] && adParams[valueName].id === value.id) {\n      adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n        [valueName]: {\n          id: null,\n          name: 'Не выбрано'\n        }\n      });\n    } else {\n      adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n        [valueName]: value\n      });\n    }\n\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      adParams\n    }));\n  };\n\n  const handleParamsInput = valueName => ({\n    target\n  }) => {\n    adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n      [valueName]: target.value\n    });\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      adParams\n    }));\n  };\n\n  const handleSwitch = (_, value) => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      avalTime: _objectSpread(_objectSpread({}, values.avalTime), {}, {\n        isActive: value\n      })\n    }));\n  };\n\n  const handleWeekDay = value => () => {\n    if (values.avalTime.week.some(val => val.id === value.id)) {\n      values.avalTime.week.map((val, index) => {\n        if (val.id === value.id) {\n          values.avalTime.week.splice(index, 1);\n        }\n      });\n      setValues(_objectSpread({}, values));\n    } else {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        avalTime: _objectSpread(_objectSpread({}, values.avalTime), {}, {\n          week: [...values.avalTime.week, value]\n        })\n      }));\n    }\n  };\n\n  const handleTime = ({\n    target\n  }) => {\n    let {\n      value\n    } = target;\n    const regEx = /^([0-1]?[0-9]|2[0-3])?:([0-5][0-9]?)?$/;\n    const isValid = regEx.test(value);\n\n    if (isValid) {\n      value = value.replace(/^:(.+)/, m => `00${m}`).replace(/(.+):$/, m => `${m}00`);\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        avalTime: _objectSpread(_objectSpread({}, values.avalTime), {}, {\n          [target.name]: value\n        })\n      }));\n    }\n  };\n\n  const setInitValues = () => {\n    const initReqVals = {};\n    const initReqParamsVals = {};\n    const adParamsVals = dataPrepare(subCategory.data, adParams);\n    console.log(adParamsVals);\n\n    if (adType.currency.length !== 0 && values['price'] === undefined) {\n      initReqVals['price'] = category.id !== 11 ? '' : 0;\n      initReqVals['currency'] = adType.currency[0];\n    }\n\n    Object.keys(adParamsVals).forEach(key => {\n      if (isRequired(key) && adParams[key] === undefined) {\n        if (key === 'manufacturer' && subCategory.id == 1) {\n          initReqParamsVals['models'] = {\n            id: null,\n            name: 'Не выбрано'\n          };\n        }\n\n        initReqParamsVals[key] = {\n          id: null,\n          name: 'Не выбрано'\n        };\n      }\n    });\n    setValues(_objectSpread(_objectSpread(_objectSpread({}, values), initReqVals), {}, {\n      adParams: _objectSpread(_objectSpread({}, adParams), initReqParamsVals)\n    }));\n  };\n\n  useEffect(() => {\n    setInitValues();\n  }, [subCategory.id, subCategory.name, Object.keys(adParams).length]);\n  useEffect(() => {\n    setValues(initFields);\n    setErrors({});\n    setInitValues();\n  }, []);\n  console.log(values);\n  console.log(errors, touched);\n  return __jsx(FormikProvider, {\n    value: formik\n  }, __jsx(\"form\", {\n    onSubmit: formik.handleSubmit\n  }, __jsx(AdvrtForm, {\n    isSuccess: isSuccess,\n    locations: locations,\n    isPreview: isPreview,\n    setIsPreview: setIsPreview,\n    createAdvrt: createAdvrt,\n    errors: errors,\n    touched: touched,\n    setTouched: setTouched,\n    values: values,\n    setValues: setValues,\n    handleBlur: handleBlur,\n    handleTime: handleTime,\n    handleSwitch: handleSwitch,\n    handleWeekDay: handleWeekDay,\n    handleBackBtn: handleBackBtn,\n    handleMenuItem: handleMenuItem,\n    handleListItem: handleListItem,\n    handleParamsInput: handleParamsInput,\n    handleParamsCheckbox: handleParamsCheckbox,\n    handleCheckboxChange: handleCheckboxChange\n  })));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/AdvrtFormContainer.tsx"],"names":["React","useEffect","useState","userAPI","AdvrtForm","createAdvrtSchema","isRequired","useFormik","FormikProvider","useSelector","dataPrepare","initFields","title","safe_deal","delivery","exchange","location","files","description","phone","avalTime","isActive","start_time","end_time","week","id","name","adParams","safety","multimedia","assistant","exterior","AdvrtFormContainer","props","createAdvrt","setIsForm","adType","category","subCategory","locations","store","isPreview","setIsPreview","isSuccess","setIsSuccess","preparedData","data","form","FormData","set","toString","Number","price","currency","forEach","file","append","day","i","key","value","Array","isArray","entries","console","log","onSubmit","values","e","formik","initialValues","validationSchema","setValues","errors","setErrors","touched","setTouched","handleBlur","handleBackBtn","handleCheckboxChange","valName","target","checked","handleParamsCheckbox","valueName","some","val","map","index","splice","handleMenuItem","newValue","setAnchor","Object","keys","handleListItem","handleParamsInput","handleSwitch","_","handleWeekDay","handleTime","regEx","isValid","test","replace","m","setInitValues","initReqVals","initReqParamsVals","adParamsVals","length","undefined","handleSubmit"],"mappings":"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","sourcesContent":["import React, {FC, useEffect, useState} from 'react';\r\nimport {userAPI} from '@src/api/api';\r\nimport {AdvrtForm} from './AdvrtForm';\r\nimport {CreateAdFields} from \"@root/interfaces/Advertisement\";\r\nimport {createAdvrtSchema, isRequired} from \"@root/validation_schemas/createAdvrtSchema\";\r\nimport {useFormik, FormikProvider} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"@src/redux/rootReducer\";\r\nimport {dataPrepare} from \"@src/components/advertisement/create_advrt/advrt_form/advrt_params/helpers\";\r\n\r\n\r\nconst initFields: CreateAdFields = {\r\n    title: '',\r\n    safe_deal: false,\r\n    delivery: false,\r\n    exchange: false,\r\n    location: null,\r\n    files: [],\r\n    description: '',\r\n    phone: '',\r\n    avalTime: {\r\n        isActive: false,\r\n        start_time: '00:00',\r\n        end_time: '00:00',\r\n        week: [\r\n            {id: 1, name: 'Пн'},\r\n            {id: 2, name: 'Вт'},\r\n            {id: 3, name: 'Ср'},\r\n            {id: 4, name: 'Чт'},\r\n            {id: 5, name: 'Пт'},\r\n            {id: 6, name: 'Сб'},\r\n            {id: 7, name: 'Вс'}\r\n        ],\r\n    },\r\n    // auction: {\r\n    //     duration_id: null,\r\n    //     offer_the_price: null,\r\n    //     auto_renewal: false,\r\n    //     display_phone: false,\r\n    //     reserve_price: null,\r\n    //     price_by_now: {\r\n    //         isActive: false,\r\n    //         price: ''\r\n    //     }\r\n    // },\r\n    adParams: {\r\n        safety: [],\r\n        multimedia: [],\r\n        assistant: [],\r\n        exterior: [],\r\n    }\r\n};\r\n\r\nexport const AdvrtFormContainer: FC<any> = (props) => {\r\n    const {createAdvrt, setIsForm} = props;\r\n    const {adType, category, subCategory} = createAdvrt;\r\n\r\n    const {locations} = useSelector((store: RootState) => store);\r\n\r\n    const [isPreview, setIsPreview] = useState(false);\r\n    const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n    const preparedData = (data: CreateAdFields) => {\r\n        const form = new FormData();\r\n        const {\r\n            avalTime,\r\n            location,\r\n            files,\r\n            adParams\r\n        } = data;\r\n\r\n        form.set('ads_type_id', adType.id.toString());\r\n        form.set('parent_categories_id', category.id.toString());\r\n        form.set('title', data.title);\r\n        form.set('safe_deal', Number(data.safe_deal).toString());\r\n        form.set('delivery', Number(data.delivery).toString());\r\n        form.set('exchange', Number(data.exchange).toString());\r\n        form.set('phone', data.phone);\r\n        form.set('description', data.description);\r\n        form.set('price', data.price);\r\n        form.set('currency_id', data.currency.id.toString());\r\n\r\n        files.forEach(({file}: any) => (\r\n            form.append('files[]', file, file.name))\r\n        );\r\n\r\n        if (avalTime.isActive) {\r\n            avalTime.week.forEach((day, i) => (\r\n                form.append(`week[${i}]`, day.id.toString())\r\n            ));\r\n            form.set('start_time', avalTime.start_time.toString());\r\n            form.set('end_time', avalTime.end_time.toString());\r\n        }\r\n\r\n        for (const key in location) {\r\n            if (typeof location[key] === 'number') {\r\n                form.set(key, Number(location[key]).toString());\r\n            }\r\n        }\r\n\r\n        for (let key in adParams) {\r\n            const value = adParams[key];\r\n            if (value) {\r\n                if (typeof value === 'string') {\r\n                    form.set(key, value);\r\n                } else if (Array.isArray(value)) {\r\n                    value.forEach((value, i) => (\r\n                        form.append(`${key}[${i}]`, value.id))\r\n                    )\r\n                } else {\r\n                    if (value.id) {\r\n                        switch (key) {\r\n                            case 'models' :\r\n                                key = 'model'\r\n                                break;\r\n                            case 'colors' :\r\n                                key = 'color'\r\n                                break;\r\n                        }\r\n                        form.set(`${key}_id`, value.id);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const key of form.entries()) {\r\n            console.log(key[0] + '-' + key[1]);\r\n        }\r\n\r\n        return form;\r\n    };\r\n\r\n    const onSubmit = async (values: CreateAdFields) => {\r\n        try {\r\n            if (!isPreview) {\r\n                setIsPreview(true);\r\n            } else {\r\n                const data = preparedData(values);\r\n                await userAPI.createAdvrt(data);\r\n                setIsSuccess(true);\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: initFields,\r\n        validationSchema: createAdvrtSchema,\r\n        onSubmit\r\n    });\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        touched,\r\n        setTouched,\r\n        handleBlur,\r\n    } = formik;\r\n\r\n    let {adParams} = values;\r\n\r\n    const handleBackBtn = () => {\r\n        isPreview\r\n            ? setIsPreview(false)\r\n            : setIsForm(false);\r\n    };\r\n\r\n    const handleCheckboxChange = (valName) => ({target}) => {\r\n        setValues({...values, [valName]: target.checked});\r\n    };\r\n\r\n    const handleParamsCheckbox = (valueName, value) => () => {\r\n        if (adParams[valueName]) {\r\n            if (adParams[valueName].some(val => val.id === value.id)) {\r\n                adParams[valueName].map((val, index) => {\r\n                    if (val.id === value.id) {\r\n                        adParams[valueName].splice(index, 1);\r\n                    }\r\n                });\r\n            } else {\r\n                adParams = {\r\n                    ...adParams,\r\n                    [valueName]: [...adParams[valueName], value]\r\n                };\r\n            }\r\n        } else {\r\n            adParams = {...adParams, [valueName]: [value]};\r\n        }\r\n        setValues({...values, adParams});\r\n    };\r\n\r\n    const handleMenuItem = (valueName) => (newValue, setAnchor) => () => {\r\n        setAnchor(null);\r\n\r\n        if (valueName === 'currency') {\r\n            setValues({\r\n                ...values,\r\n                [valueName]: newValue\r\n            });\r\n        } else {\r\n            // Reset sub props in values\r\n            Object.keys(newValue).map(key => {\r\n                if (adParams[key]) {\r\n                    adParams = {\r\n                        ...adParams,\r\n                        [key]: {id: null, name: 'Не выбрано'}\r\n                    };\r\n                }\r\n                setValues({\r\n                    ...values,\r\n                    adParams: {\r\n                        ...adParams,\r\n                        [valueName]: newValue\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleListItem = (valueName, value) => () => {\r\n        if (adParams[valueName] && adParams[valueName].id === value.id) {\r\n            adParams = {\r\n                ...adParams,\r\n                [valueName]: {id: null, name: 'Не выбрано'}\r\n            };\r\n        } else {\r\n            adParams = {\r\n                ...adParams,\r\n                [valueName]: value\r\n            };\r\n        }\r\n        setValues({...values, adParams});\r\n    };\r\n\r\n    const handleParamsInput = (valueName) => ({target}) => {\r\n        adParams = {...adParams, [valueName]: target.value};\r\n        setValues({...values, adParams})\r\n    };\r\n\r\n    const handleSwitch = (_, value) => {\r\n        setValues({\r\n            ...values,\r\n            avalTime: {\r\n                ...values.avalTime,\r\n                isActive: value\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleWeekDay = (value) => () => {\r\n        if (values.avalTime.week.some(val => val.id === value.id)) {\r\n            values.avalTime.week.map((val, index) => {\r\n                if (val.id === value.id) {\r\n                    values.avalTime.week.splice(index, 1)\r\n                }\r\n            });\r\n            setValues({...values});\r\n        } else {\r\n            setValues({\r\n                ...values,\r\n                avalTime: {\r\n                    ...values.avalTime,\r\n                    week: [\r\n                        ...values.avalTime.week,\r\n                        value\r\n                    ]\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleTime = ({target}) => {\r\n        let {value} = target;\r\n        const regEx = /^([0-1]?[0-9]|2[0-3])?:([0-5][0-9]?)?$/;\r\n        const isValid = regEx.test(value);\r\n        if (isValid) {\r\n            value = value.replace(/^:(.+)/, m => `00${m}`).replace(/(.+):$/, m => `${m}00`);\r\n            setValues({\r\n                ...values,\r\n                avalTime: {\r\n                    ...values.avalTime,\r\n                    [target.name]: value\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const setInitValues = () => {\r\n        const initReqVals = {};\r\n        const initReqParamsVals = {};\r\n\r\n        const adParamsVals = dataPrepare(subCategory.data, adParams);\r\n        console.log(adParamsVals)\r\n        if (adType.currency.length !== 0 && values['price'] === undefined) {\r\n            initReqVals['price'] = category.id !== 11 ? '' : 0;\r\n            initReqVals['currency'] = adType.currency[0];\r\n        }\r\n\r\n        Object.keys(adParamsVals).forEach(key => {\r\n            if (isRequired(key) && adParams[key] === undefined) {\r\n                if (key === 'manufacturer' && subCategory.id == 1) {\r\n                    initReqParamsVals['models'] = {id: null, name: 'Не выбрано'};\r\n                }\r\n                initReqParamsVals[key] = {id: null, name: 'Не выбрано'};\r\n            }\r\n        });\r\n\r\n        setValues({\r\n            ...values,\r\n            ...initReqVals,\r\n            adParams: {\r\n                ...adParams,\r\n                ...initReqParamsVals\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        setInitValues();\r\n    }, [subCategory.id, subCategory.name, Object.keys(adParams).length]);\r\n\r\n    useEffect(() => {\r\n        setValues(initFields);\r\n        setErrors({});\r\n        setInitValues();\r\n    }, []);\r\n\r\n    console.log(values)\r\n    console.log(errors, touched)\r\n    return (\r\n        <FormikProvider value={formik}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <AdvrtForm\r\n                    isSuccess={isSuccess}\r\n                    locations={locations}\r\n                    isPreview={isPreview}\r\n                    setIsPreview={setIsPreview}\r\n                    createAdvrt={createAdvrt}\r\n                    errors={errors}\r\n                    touched={touched}\r\n                    setTouched={setTouched}\r\n                    values={values}\r\n                    setValues={setValues}\r\n                    handleBlur={handleBlur}\r\n                    handleTime={handleTime}\r\n                    handleSwitch={handleSwitch}\r\n                    handleWeekDay={handleWeekDay}\r\n                    handleBackBtn={handleBackBtn}\r\n                    handleMenuItem={handleMenuItem}\r\n                    handleListItem={handleListItem}\r\n                    handleParamsInput={handleParamsInput}\r\n                    handleParamsCheckbox={handleParamsCheckbox}\r\n                    handleCheckboxChange={handleCheckboxChange}\r\n                />\r\n            </form>\r\n        </FormikProvider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}