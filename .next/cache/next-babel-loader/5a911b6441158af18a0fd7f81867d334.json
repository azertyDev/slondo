{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nexport const DropZone = () => {\n  const {\n    0: characters,\n    1: updateCharacters\n  } = useState([]);\n\n  function handleOnDragEnd(result) {\n    if (!result.destination) return;\n    const items = Array.from(characters);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    updateCharacters(items);\n  }\n\n  return __jsx(\"div\", {\n    className: \"App\"\n  }, __jsx(\"header\", {\n    className: \"App-header\"\n  }, __jsx(\"h1\", null, \"Final Space Characters\"), __jsx(DragDropContext, {\n    onDragEnd: handleOnDragEnd\n  }, __jsx(Droppable, {\n    droppableId: \"characters\"\n  }, provided => __jsx(\"ul\", _extends({\n    className: \"characters\"\n  }, provided.droppableProps, {\n    ref: provided.innerRef\n  }), characters.map(({\n    id,\n    name,\n    thumb\n  }, index) => {\n    return __jsx(Draggable, {\n      key: id,\n      draggableId: id,\n      index: index\n    }, provided => __jsx(\"li\", _extends({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps), __jsx(\"div\", {\n      className: \"characters-thumb\"\n    }, __jsx(\"img\", {\n      src: thumb,\n      alt: `${name} Thumb`\n    })), __jsx(\"p\", null, name)));\n  }), provided.placeholder)))));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/drop_zone/DropZone.tsx"],"names":["React","useState","DragDropContext","Droppable","Draggable","DropZone","characters","updateCharacters","handleOnDragEnd","result","destination","items","Array","from","reorderedItem","splice","source","index","provided","droppableProps","innerRef","map","id","name","thumb","draggableProps","dragHandleProps","placeholder"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAwB,OAAxB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,SAAQC,eAAR,EAAyBC,SAAzB,EAAoCC,SAApC,QAAoD,qBAApD;AAGA,OAAO,MAAMC,QAAY,GAAG,MAAM;AAC9B,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAAiCN,QAAQ,CAAC,EAAD,CAA/C;;AAEA,WAASO,eAAT,CAAyBC,MAAzB,EAAiC;AAC7B,QAAI,CAACA,MAAM,CAACC,WAAZ,EAAyB;AAEzB,UAAMC,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAWP,UAAX,CAAd;AACA,UAAM,CAACQ,aAAD,IAAkBH,KAAK,CAACI,MAAN,CAAaN,MAAM,CAACO,MAAP,CAAcC,KAA3B,EAAkC,CAAlC,CAAxB;AACAN,IAAAA,KAAK,CAACI,MAAN,CAAaN,MAAM,CAACC,WAAP,CAAmBO,KAAhC,EAAuC,CAAvC,EAA0CH,aAA1C;AAEAP,IAAAA,gBAAgB,CAACI,KAAD,CAAhB;AACH;;AAED,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAQ,IAAA,SAAS,EAAC;AAAlB,KACI,2CADJ,EAEI,MAAC,eAAD;AAAiB,IAAA,SAAS,EAAEH;AAA5B,KACI,MAAC,SAAD;AAAW,IAAA,WAAW,EAAC;AAAvB,KACMU,QAAD,IACG;AAAI,IAAA,SAAS,EAAC;AAAd,KAA+BA,QAAQ,CAACC,cAAxC;AAAwD,IAAA,GAAG,EAAED,QAAQ,CAACE;AAAtE,MACKd,UAAU,CAACe,GAAX,CAAe,CAAC;AAACC,IAAAA,EAAD;AAAKC,IAAAA,IAAL;AAAWC,IAAAA;AAAX,GAAD,EAAoBP,KAApB,KAA8B;AAC1C,WACI,MAAC,SAAD;AAAW,MAAA,GAAG,EAAEK,EAAhB;AAAoB,MAAA,WAAW,EAAEA,EAAjC;AAAqC,MAAA,KAAK,EAAEL;AAA5C,OACMC,QAAD,IACG;AAAI,MAAA,GAAG,EAAEA,QAAQ,CAACE;AAAlB,OAAgCF,QAAQ,CAACO,cAAzC,EAA6DP,QAAQ,CAACQ,eAAtE,GACI;AAAK,MAAA,SAAS,EAAC;AAAf,OACI;AAAK,MAAA,GAAG,EAAEF,KAAV;AAAiB,MAAA,GAAG,EAAG,GAAED,IAAK;AAA9B,MADJ,CADJ,EAII,iBACKA,IADL,CAJJ,CAFR,CADJ;AAcH,GAfA,CADL,EAiBKL,QAAQ,CAACS,WAjBd,CAFR,CADJ,CAFJ,CADJ,CADJ;AAgCH,CA7CM","sourcesContent":["import React, {FC} from 'react';\r\nimport {useState} from 'react';\r\nimport {DragDropContext, Droppable, Draggable} from 'react-beautiful-dnd';\r\n\r\n\r\nexport const DropZone: FC = () => {\r\n    const [characters, updateCharacters] = useState([]);\r\n\r\n    function handleOnDragEnd(result) {\r\n        if (!result.destination) return;\r\n\r\n        const items = Array.from(characters);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        updateCharacters(items);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <h1>Final Space Characters</h1>\r\n                <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                    <Droppable droppableId=\"characters\">\r\n                        {(provided) => (\r\n                            <ul className=\"characters\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                                {characters.map(({id, name, thumb}, index) => {\r\n                                    return (\r\n                                        <Draggable key={id} draggableId={id} index={index}>\r\n                                            {(provided) => (\r\n                                                <li ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                                    <div className=\"characters-thumb\">\r\n                                                        <img src={thumb} alt={`${name} Thumb`}/>\r\n                                                    </div>\r\n                                                    <p>\r\n                                                        {name}\r\n                                                    </p>\r\n                                                </li>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    );\r\n                                })}\r\n                                {provided.placeholder}\r\n                            </ul>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n            </header>\r\n        </div>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}