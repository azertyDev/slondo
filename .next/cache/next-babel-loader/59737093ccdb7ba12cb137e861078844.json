{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(workerAuth),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAuth);\n\nimport { userApi } from '../../api/api';\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { FETCH_SELF_DATA, selfDataActions } from \"../actions/selfDataActions\"; // Self data saga\n\nvar fetchSelfDataBegin = selfDataActions.fetchSelfDataBegin,\n    fetchSelfDataSuccess = selfDataActions.fetchSelfDataSuccess,\n    fetchSelfDataFailure = selfDataActions.fetchSelfDataFailure;\n\nfunction workerAuth(actions) {\n  var payload, _yield$call, user_info;\n\n  return _regeneratorRuntime.wrap(function workerAuth$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = actions.payload;\n          _context.prev = 1;\n          _context.next = 4;\n          return put(fetchSelfDataBegin());\n\n        case 4:\n          _context.next = 6;\n          return call(userApi.login, payload.phone, payload.password);\n\n        case 6:\n          _yield$call = _context.sent;\n          user_info = _yield$call.user_info;\n          _context.next = 10;\n          return put(fetchSelfDataSuccess({\n            data: user_info\n          }));\n\n        case 10:\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 16;\n          return put(fetchSelfDataFailure(_context.t0.message));\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 12]]);\n}\n\nexport function watchAuth() {\n  return _regeneratorRuntime.wrap(function watchAuth$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(FETCH_SELF_DATA, workerAuth);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/sagas/authSaga.ts"],"names":["workerAuth","watchAuth","userApi","call","put","takeLatest","FETCH_SELF_DATA","selfDataActions","fetchSelfDataBegin","fetchSelfDataSuccess","fetchSelfDataFailure","actions","payload","login","phone","password","user_info","data","message"],"mappings":";;oDAQUA,U;qDAWOC,S;;AAnBjB,SAAQC,OAAR,QAAsB,eAAtB;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,eAAR,EAAyBC,eAAzB,QAA+C,4BAA/C,C,CAGA;;IACOC,kB,GAAkED,e,CAAlEC,kB;IAAoBC,oB,GAA8CF,e,CAA9CE,oB;IAAsBC,oB,GAAwBH,e,CAAxBG,oB;;AAEjD,SAAUV,UAAV,CAAqBW,OAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACWC,UAAAA,OADX,GACsBD,OADtB,CACWC,OADX;AAAA;AAAA;AAGQ,iBAAMR,GAAG,CAACI,kBAAkB,EAAnB,CAAT;;AAHR;AAAA;AAI4B,iBAAML,IAAI,CAACD,OAAO,CAACW,KAAT,EAAgBD,OAAO,CAACE,KAAxB,EAA+BF,OAAO,CAACG,QAAvC,CAAV;;AAJ5B;AAAA;AAIeC,UAAAA,SAJf,eAIeA,SAJf;AAAA;AAKQ,iBAAMZ,GAAG,CAACK,oBAAoB,CAAC;AAACQ,YAAAA,IAAI,EAAED;AAAP,WAAD,CAArB,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOQ,iBAAMZ,GAAG,CAACM,oBAAoB,CAAC,YAAEQ,OAAH,CAArB,CAAT;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,OAAO,SAAUjB,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMI,UAAU,CAACC,eAAD,EAAkBN,UAAlB,CAAhB;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {userApi} from '../../api/api'\r\nimport {call, put, takeLatest} from \"redux-saga/effects\"\r\nimport {FETCH_SELF_DATA, selfDataActions} from \"../actions/selfDataActions\"\r\n\r\n\r\n// Self data saga\r\nconst {fetchSelfDataBegin, fetchSelfDataSuccess, fetchSelfDataFailure} = selfDataActions;\r\n\r\nfunction* workerAuth(actions) {\r\n    const {payload} = actions;\r\n    try {\r\n        yield put(fetchSelfDataBegin());\r\n        const {user_info} = yield call(userApi.login, payload.phone, payload.password);\r\n        yield put(fetchSelfDataSuccess({data: user_info}));\r\n    } catch (e) {\r\n        yield put(fetchSelfDataFailure(e.message));\r\n    }\r\n}\r\n\r\nexport function* watchAuth() {\r\n    yield takeLatest(FETCH_SELF_DATA, workerAuth);\r\n}"]},"metadata":{},"sourceType":"module"}