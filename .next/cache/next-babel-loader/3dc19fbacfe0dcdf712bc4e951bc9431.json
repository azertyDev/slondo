{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { DragDropContext, resetServerContext } from 'react-beautiful-dnd';\nimport { TOTAL_FILES_SIZE_LIMIT } from '@src/constants';\nimport { CustomDroppable } from \"../preview_photos/CustomDroppable\";\nimport { initUrl } from \"../CreateAncmntContainer\";\n\nconst sizeCounter = files => {\n  return files.reduce((total, {\n    size\n  }) => {\n    if (size) {\n      total += total + size;\n    }\n\n    return total;\n  }, 0);\n};\n\nexport const PreviewPhotos = props => {\n  resetServerContext();\n  const {\n    values,\n    setValues,\n    isPreview\n  } = props;\n  const {\n    files\n  } = values;\n\n  const handleOnDragEnd = ({\n    destination,\n    source\n  }) => {\n    if (!destination) return;\n    const items = files;\n    const [reorderedItem] = items.splice(source.index, 1);\n    items.splice(destination.index, 0, reorderedItem);\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      files: items\n    }));\n  };\n\n  const handleUploadFile = ({\n    target\n  }) => {\n    let photos = Array.from(target.files);\n    const totalFilesSize = sizeCounter(files);\n    const selectedFilesSize = sizeCounter(photos);\n\n    if (totalFilesSize + selectedFilesSize <= TOTAL_FILES_SIZE_LIMIT) {\n      photos = photos.map(photo => ({\n        file: photo,\n        url: URL.createObjectURL(photo)\n      }));\n      files.splice(-photos.length, photos.length);\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        files: [...photos, ...files]\n      }));\n    }\n  };\n\n  const removeFile = url => () => {\n    files.map((item, index) => {\n      if (item.url === url) {\n        files.splice(index, 1);\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          files: [...files, initUrl]\n        }));\n      }\n    });\n  };\n\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    disabled: isPreview,\n    onChange: handleUploadFile,\n    multiple: true,\n    accept: \"image/png,image/jpeg\"\n  }), __jsx(DragDropContext, {\n    enableDefaultSensors: true,\n    onDragEnd: handleOnDragEnd\n  }, __jsx(CustomDroppable, {\n    droppableId: \"firstRow\",\n    files: files,\n    isPreview: isPreview,\n    removeFile: removeFile\n  }), __jsx(CustomDroppable, {\n    droppableId: \"secondRow\",\n    files: files,\n    isPreview: isPreview,\n    removeFile: removeFile\n  })));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/announcement/create_ancmnt/preview_photos/PreviewPhotos.tsx"],"names":["React","DragDropContext","resetServerContext","TOTAL_FILES_SIZE_LIMIT","CustomDroppable","initUrl","sizeCounter","files","reduce","total","size","PreviewPhotos","props","values","setValues","isPreview","handleOnDragEnd","destination","source","items","reorderedItem","splice","index","handleUploadFile","target","photos","Array","from","totalFilesSize","selectedFilesSize","map","photo","file","url","URL","createObjectURL","length","removeFile","item"],"mappings":"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","sourcesContent":["import React, {Dispatch, FC} from 'react';\r\nimport {DragDropContext, resetServerContext, DropResult} from 'react-beautiful-dnd';\r\nimport {TOTAL_FILES_SIZE_LIMIT} from '@src/constants';\r\nimport {CreateAncmntFields, FileType} from \"@root/interfaces/Announcement\";\r\nimport {CustomDroppable} from \"../preview_photos/CustomDroppable\";\r\nimport {initUrl} from \"../CreateAncmntContainer\";\r\n\r\n\r\ninterface IPreviewPhotos {\r\n    values: CreateAncmntFields,\r\n    setValues: Dispatch<unknown>\r\n    isPreview: boolean\r\n}\r\n\r\nconst sizeCounter = (files) => {\r\n    return files.reduce((total, {size}) => {\r\n            if (size) {\r\n                total += total + size\r\n            }\r\n            return total;\r\n        },\r\n        0\r\n    )\r\n};\r\n\r\nexport const PreviewPhotos: FC<IPreviewPhotos> = (props) => {\r\n    resetServerContext();\r\n\r\n    const {values, setValues, isPreview} = props;\r\n    const {files} = values;\r\n\r\n    const handleOnDragEnd = ({destination, source}: DropResult): void => {\r\n        if (!destination) return;\r\n\r\n        const items = files;\r\n        const [reorderedItem] = items.splice(source.index, 1);\r\n\r\n        items.splice(destination.index, 0, reorderedItem);\r\n        setValues({...values, files: items});\r\n    };\r\n\r\n    const handleUploadFile = ({target}) => {\r\n        let photos: any = Array.from(target.files);\r\n\r\n        const totalFilesSize = sizeCounter(files);\r\n        const selectedFilesSize = sizeCounter(photos);\r\n\r\n        if ((totalFilesSize + selectedFilesSize) <= TOTAL_FILES_SIZE_LIMIT) {\r\n            photos = photos.map(photo => ({\r\n                file: photo,\r\n                url: URL.createObjectURL(photo)\r\n            }));\r\n\r\n            files.splice((-photos.length), photos.length);\r\n\r\n            setValues({\r\n                ...values,\r\n                files: [...photos, ...files]\r\n            })\r\n        }\r\n    };\r\n\r\n    const removeFile = (url) => () => {\r\n        files.map((item: FileType, index) => {\r\n            if (item.url === url) {\r\n                files.splice(index, 1);\r\n                setValues({\r\n                    ...values,\r\n                    files: [\r\n                        ...files,\r\n                        initUrl\r\n                    ]\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                type='file'\r\n                disabled={isPreview}\r\n                onChange={handleUploadFile}\r\n                multiple={true}\r\n                accept=\"image/png,image/jpeg\"\r\n            />\r\n            <DragDropContext enableDefaultSensors={true} onDragEnd={handleOnDragEnd}>\r\n                <CustomDroppable\r\n                    droppableId='firstRow'\r\n                    files={files}\r\n                    isPreview={isPreview}\r\n                    removeFile={removeFile}\r\n                />\r\n                <CustomDroppable\r\n                    droppableId='secondRow'\r\n                    files={files}\r\n                    isPreview={isPreview}\r\n                    removeFile={removeFile}\r\n                />\r\n            </DragDropContext>\r\n        </div>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}