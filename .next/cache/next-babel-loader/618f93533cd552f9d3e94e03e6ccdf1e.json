{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { MainContent } from './MainContent';\nimport { ITEMS_PER_PAGE } from '@root/src/constants';\nimport { userAPI } from \"@src/api/api\";\nimport { i18n } from \"@root/i18n\";\nconst cardData = {\n  id: null,\n  title: '',\n  cardType: '',\n  safe_deal: null,\n  price: null,\n  currency: {\n    id: null,\n    name: ''\n  },\n  created_at: '',\n  location: '',\n  images: [{\n    url: ''\n  }]\n};\nconst initCards = [];\n\nfor (let i = 1; i <= 16; i++) {\n  initCards.push(cardData);\n}\n\nconst initialCardData = {\n  isFetch: false,\n  error: null,\n  cardData: {\n    data: initCards,\n    total: null\n  }\n};\n\nconst fetchCardData = async (itemsPerPage, page, type, lang) => {\n  return await userAPI.getCardData(itemsPerPage, page, type, lang);\n};\n\nexport const MainContentContainer = props => {\n  const {\n    t\n  } = props;\n  const lang = i18n.language;\n  const {\n    0: tabValue,\n    1: setTabValue\n  } = useState(0);\n  const {\n    0: adCurrentPage,\n    1: setAdCurrentPage\n  } = useState(1);\n  const {\n    0: lotCurrentPage,\n    1: setLotCurrentPage\n  } = useState(1);\n  const {\n    0: adCardData,\n    1: setAdCardData\n  } = useState(initialCardData);\n  const {\n    0: lotCardData,\n    1: setLotCardData\n  } = useState(initialCardData);\n  const pageCount = Math.ceil((tabValue === 0 ? adCardData.cardData.total : lotCardData.cardData.total) / ITEMS_PER_PAGE) || 1;\n  const currentPage = tabValue === 0 ? adCurrentPage : lotCurrentPage;\n\n  const setCardData = async (state, setState, currentPage, type) => {\n    try {\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        isFetch: true\n      }));\n      const newData = await fetchCardData(ITEMS_PER_PAGE, currentPage, type, lang);\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        isFetch: false\n      }));\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        cardData: {\n          data: newData.data,\n          total: newData.total\n        }\n      }));\n    } catch (e) {\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        error: e.message\n      }));\n    }\n  };\n\n  const handleTabChange = (_, newValue) => {\n    setTabValue(newValue);\n  }; // const handleShowMore = () => {\n  //     if (tabValue === 0) {\n  //         setAdCurrentPage(adCurrentPage + 1)\n  //     } else {\n  //         setLotCurrentPage(lotCurrentPage + 1)\n  //     }\n  // };\n\n\n  const handlePaginationPage = (_, pageNumber) => {\n    tabValue === 0 ? setAdCurrentPage(pageNumber) : setLotCurrentPage(pageNumber);\n  };\n\n  useEffect(() => {\n    setCardData(adCardData, setAdCardData, adCurrentPage, 'ad');\n  }, [adCurrentPage]);\n  useEffect(() => {\n    setCardData(lotCardData, setLotCardData, lotCurrentPage, 'lot');\n  }, [lotCurrentPage]);\n  return __jsx(MainContent, {\n    t: t,\n    tabValue: tabValue,\n    adCardData: adCardData,\n    lotCardData: lotCardData,\n    pageCount: pageCount,\n    currentPage: currentPage,\n    handlePaginationPage: handlePaginationPage,\n    handleTabChange: handleTabChange // handleShowMore={handleShowMore}\n\n  });\n};","map":null,"metadata":{},"sourceType":"module"}