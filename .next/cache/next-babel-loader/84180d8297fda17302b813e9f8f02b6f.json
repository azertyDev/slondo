{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { useStyles } from './useStyles';\nimport { CustomCheckbox } from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\nexport var AdvrtSettingsBlock = function AdvrtSettingsBlock(props) {\n  _s();\n\n  var isPreview = props.isPreview,\n      createAdvrt = props.createAdvrt,\n      values = props.values,\n      onBlur = props.onBlur,\n      handleMenuItem = props.handleMenuItem,\n      handleListItem = props.handleListItem,\n      handleParamsCheckbox = props.handleParamsCheckbox;\n  var data = isPreview ? values : createAdvrt.data;\n  var classes = useStyles({\n    isPreview: isPreview\n  });\n  return __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    className: classes.root\n  }, Object.keys(data).map(function (key) {\n    if (!isPreview && values[key]) {\n      return __jsx(React.Fragment, null, listGenerator(data[key], key), Object.keys(values[key]).map(function (innerKey) {\n        if (Array.isArray(values[key][innerKey]) && values[key][innerKey].length) {\n          return listGenerator(values[key][innerKey], innerKey);\n        }\n      }));\n    } else return listGenerator(data[key], key);\n  }));\n\n  function listGenerator(data, key) {\n    var fields;\n    var isExcludedRows = key !== 'adsParams' && key !== 'files';\n    var isOptions = key === 'safety' || key === 'multimedia' || key === 'assistant' || key === 'exterior';\n    var isSpecialRows = key === 'body' || key === 'colors' || isOptions;\n\n    if (isExcludedRows && data) {\n      if (isSpecialRows && Array.isArray(data) && data.length) {\n        fields = __jsx(\"div\", {\n          className: \"colors-list\"\n        }, data.map(function (item) {\n          return __jsx(\"div\", {\n            key: item.id,\n            onClick: !isPreview ? handleListItem(key, item) : null\n          }, key === 'body' ? __jsx(\"div\", {\n            className: values[key] && values[key].id === item.id ? classes.selected : ''\n          }, __jsx(\"img\", {\n            src: item.icon.url,\n            alt: item.name\n          }), __jsx(Typography, null, item.name)) : key === 'colors' ? __jsx(\"div\", {\n            className: values[key] && values[key].id === item.id ? classes.selected : '',\n            style: {\n              width: '50px',\n              height: '50px',\n              backgroundColor: \"\".concat(item.hex_color_code)\n            }\n          }) : __jsx(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center'\n            }\n          }, __jsx(CustomCheckbox, {\n            disabled: isPreview,\n            checked: values[key] && values[key].some(function (val) {\n              return val.id === item.id;\n            }),\n            onChange: handleParamsCheckbox(key, {\n              id: item.id,\n              name: item.name\n            })\n          }), __jsx(Typography, null, item.name)));\n        }));\n      } else {\n        if (Array.isArray(data)) {\n          data = [{\n            id: null,\n            name: 'Не выбрано'\n          }].concat(_toConsumableArray(data));\n          fields = __jsx(CustomMenu, {\n            valueName: values[key] ? values[key].name : data[0].name,\n            items: data,\n            onBlur: onBlur,\n            onClick: handleMenuItem(key)\n          });\n        } else {\n          fields = key === 'body' ? __jsx(Typography, null, data.name) : key === 'colors' ? __jsx(\"div\", {\n            style: {\n              width: '50px',\n              height: '50px',\n              backgroundColor: \"\".concat(data.hex_color_code)\n            }\n          }) : __jsx(Typography, null, data.name);\n        }\n      }\n\n      return __jsx(Grid, {\n        item: true,\n        container: true,\n        key: key,\n        xs: 12,\n        className: classes.gridItem,\n        sm: isSpecialRows && !isPreview ? 12 : 6\n      }, __jsx(Typography, {\n        variant: \"subtitle1\"\n      }, key), fields);\n    }\n  }\n};\n\n_s(AdvrtSettingsBlock, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = AdvrtSettingsBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdvrtSettingsBlock\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_settings_block/AdvrtSettingsBlock.tsx"],"names":["React","Grid","Typography","CustomMenu","useStyles","CustomCheckbox","AdvrtSettingsBlock","props","isPreview","createAdvrt","values","onBlur","handleMenuItem","handleListItem","handleParamsCheckbox","data","classes","root","Object","keys","map","key","listGenerator","innerKey","Array","isArray","length","fields","isExcludedRows","isOptions","isSpecialRows","item","id","selected","icon","url","name","width","height","backgroundColor","hex_color_code","display","alignItems","some","val","gridItem"],"mappings":"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","sourcesContent":["import React, {FC} from \"react\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {ItemsType} from \"@root/interfaces/CustomMenuProps\";\r\nimport {useStyles} from './useStyles';\r\nimport {CustomCheckbox} from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\r\n\r\n\r\nexport const AdvrtSettingsBlock: FC<any> = (props) => {\r\n    const {\r\n        isPreview,\r\n        createAdvrt,\r\n        values,\r\n        onBlur,\r\n        handleMenuItem,\r\n        handleListItem,\r\n        handleParamsCheckbox\r\n    } = props;\r\n\r\n    const data = isPreview ? values : createAdvrt.data;\r\n\r\n    const classes = useStyles({isPreview});\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={1}\r\n            className={classes.root}\r\n        >\r\n            {\r\n                Object.keys(data).map(key => {\r\n                    if (!isPreview && values[key]) {\r\n                        return (\r\n                            <>\r\n                                {listGenerator(data[key], key)}\r\n                                {\r\n                                    Object.keys(values[key]).map(innerKey => {\r\n                                        if (Array.isArray(values[key][innerKey]) && values[key][innerKey].length) {\r\n                                            return listGenerator(values[key][innerKey], innerKey)\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </>\r\n                        )\r\n                    } else return listGenerator(data[key], key);\r\n                })\r\n            }\r\n        </Grid>\r\n    )\r\n\r\n    function listGenerator(data: ItemsType | ItemsType[], key: string) {\r\n        let fields;\r\n\r\n        const isExcludedRows = key !== 'adsParams' && key !== 'files';\r\n        const isOptions = key === 'safety'\r\n            || key === 'multimedia'\r\n            || key === 'assistant'\r\n            || key === 'exterior';\r\n        const isSpecialRows = key === 'body' || key === 'colors' || isOptions;\r\n\r\n        if (isExcludedRows && data) {\r\n            if (isSpecialRows && Array.isArray(data) && data.length) {\r\n                fields = <div className='colors-list'>\r\n                    {\r\n                        data.map(item => (\r\n                            <div\r\n                                key={item.id}\r\n                                onClick={!isPreview ? handleListItem(key, item) : null}\r\n                            >\r\n                                {\r\n                                    key === 'body'\r\n                                        ? (\r\n                                            <div\r\n                                                className={values[key] && values[key].id === item.id ? classes.selected : ''}\r\n                                            >\r\n                                                <img src={item.icon.url} alt={item.name}/>\r\n                                                <Typography>{item.name}</Typography>\r\n                                            </div>\r\n                                        )\r\n                                        : key === 'colors'\r\n                                        ? (\r\n                                            <div\r\n                                                className={values[key] && values[key].id === item.id ? classes.selected : ''}\r\n                                                style={{\r\n                                                    width: '50px',\r\n                                                    height: '50px',\r\n                                                    backgroundColor: `${item.hex_color_code}`,\r\n                                                }}\r\n                                            />\r\n                                        )\r\n                                        : (\r\n                                            <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                <CustomCheckbox\r\n                                                    disabled={isPreview}\r\n                                                    checked={\r\n                                                        values[key]\r\n                                                        && values[key].some(val => val.id === item.id)\r\n                                                    }\r\n                                                    onChange={\r\n                                                        handleParamsCheckbox(key, {id: item.id, name: item.name})\r\n                                                    }\r\n                                                />\r\n                                                <Typography>{item.name}</Typography>\r\n                                            </div>\r\n                                        )\r\n                                }\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            } else {\r\n                if (Array.isArray(data)) {\r\n                    data = [{id: null, name: 'Не выбрано'}, ...data];\r\n                    fields = <CustomMenu\r\n                        valueName={values[key] ? values[key].name : data[0].name}\r\n                        items={data}\r\n                        onBlur={onBlur}\r\n                        onClick={handleMenuItem(key)}\r\n                    />;\r\n                } else {\r\n                    fields = key === 'body'\r\n                        ? <Typography>{data.name}</Typography>\r\n                        : key === 'colors'\r\n                            ? <div\r\n                                style={{\r\n                                    width: '50px',\r\n                                    height: '50px',\r\n                                    backgroundColor: `${data.hex_color_code}`\r\n                                }}\r\n                            />\r\n                            : <Typography>{data.name}</Typography>\r\n                }\r\n            }\r\n            return (\r\n                <Grid\r\n                    item\r\n                    container\r\n                    key={key}\r\n                    xs={12}\r\n                    className={classes.gridItem}\r\n                    sm={isSpecialRows && !isPreview ? 12 : 6}\r\n                >\r\n                    <Typography variant=\"subtitle1\">{key}</Typography>\r\n                    {fields}\r\n                </Grid>\r\n            )\r\n        }\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}