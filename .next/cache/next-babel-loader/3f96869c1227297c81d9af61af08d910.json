{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { FormikProvider } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport { AdvrtForm } from './AdvrtForm';\nexport const autoSelectKeys = ['condition', 'area'];\nexport const textFieldKeys = ['area'];\nconst numberRegEx = /^[0-9]*$/;\nexport const AdvrtFormContainer = props => {\n  const {\n    createAdvrt,\n    isPreview,\n    setIsPreview,\n    formik,\n    isSuccess,\n    handleBackBtn,\n    handleCreateNew\n  } = props;\n  const {\n    locations\n  } = useSelector(store => store);\n  const {\n    values,\n    setValues,\n    errors,\n    touched,\n    setTouched,\n    handleBlur,\n    handleSubmit\n  } = formik;\n  let {\n    adParams\n  } = values;\n\n  const handleCheckboxChange = valName => ({\n    target\n  }) => {\n    const isAuctionField = ['auto_renewal', 'display_phone', 'offer_the_price'].some(fieldName => fieldName === valName);\n\n    if (isAuctionField) {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        auction: _objectSpread(_objectSpread({}, values.auction), {}, {\n          [valName]: target.checked\n        })\n      }));\n    } else if (valName === 'price_by_now') {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        auction: _objectSpread(_objectSpread({}, values.auction), {}, {\n          price_by_now: {\n            isActive: target.checked,\n            value: values.auction.price_by_now.value\n          }\n        })\n      }));\n    } else {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        [valName]: target.checked\n      }));\n    }\n  };\n\n  const handleParamsCheckbox = (valueName, value) => () => {\n    if (adParams[valueName]) {\n      if (adParams[valueName].some(val => val.id === value.id)) {\n        adParams[valueName].map((val, index) => {\n          if (val.id === value.id) {\n            adParams[valueName].splice(index, 1);\n          }\n        });\n      } else {\n        adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n          [valueName]: [...adParams[valueName], value]\n        });\n      }\n    } else {\n      adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n        [valueName]: [value]\n      });\n    }\n\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      adParams\n    }));\n  };\n\n  const handleMenuItem = valueName => (newValue, setAnchor) => () => {\n    setAnchor(null);\n\n    if (valueName === 'currency') {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        [valueName]: newValue\n      }));\n    } else if (valueName === 'duration') {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        auction: _objectSpread(_objectSpread({}, values.auction), {}, {\n          [valueName]: newValue\n        })\n      }));\n    } else {\n      // Reset sub props in values\n      Object.keys(newValue).map(key => {\n        if (adParams[key]) {\n          adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n            [key]: {\n              id: null,\n              name: 'Не выбрано'\n            }\n          });\n        }\n\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          adParams: _objectSpread(_objectSpread({}, adParams), {}, {\n            [valueName]: newValue\n          })\n        }));\n      });\n    }\n  };\n\n  const handleListItem = (valueName, value) => () => {\n    if (adParams[valueName] && adParams[valueName].id === value.id) {\n      adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n        [valueName]: {\n          id: null,\n          name: 'Не выбрано'\n        }\n      });\n    } else {\n      adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n        [valueName]: value\n      });\n    }\n\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      adParams\n    }));\n  };\n\n  const handleInput = valueName => ({\n    target\n  }) => {\n    if (numberRegEx.test(target.value)) {\n      if (valueName === 'price') {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          [valueName]: target.value\n        }));\n      } else {\n        adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n          [valueName]: target.value\n        });\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          adParams\n        }));\n      }\n    }\n  };\n\n  const handleAuctionInput = valName => ({\n    target\n  }) => {\n    if (numberRegEx.test(target.value)) {\n      if (valName === 'price_by_now') {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          auction: _objectSpread(_objectSpread({}, values.auction), {}, {\n            [valName]: {\n              isActive: true,\n              value: target.value\n            }\n          })\n        }));\n      } else {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          auction: _objectSpread(_objectSpread({}, values.auction), {}, {\n            [valName]: target.value\n          })\n        }));\n      }\n    }\n  };\n\n  const handleSwitch = (_, value) => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      avalTime: _objectSpread(_objectSpread({}, values.avalTime), {}, {\n        isActive: value\n      })\n    }));\n  };\n\n  const handleWeekDay = value => () => {\n    if (values.avalTime.week.some(val => val.id === value.id)) {\n      values.avalTime.week.map((val, index) => {\n        if (val.id === value.id) {\n          values.avalTime.week.splice(index, 1);\n        }\n      });\n      setValues(_objectSpread({}, values));\n    } else {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        avalTime: _objectSpread(_objectSpread({}, values.avalTime), {}, {\n          week: [...values.avalTime.week, value]\n        })\n      }));\n    }\n  };\n\n  const handleTime = ({\n    target\n  }) => {\n    let {\n      value\n    } = target;\n    const regEx = /^([0-1]?[0-9]|2[0-3])?:([0-5][0-9]?)?$/;\n    const isValid = regEx.test(value);\n\n    if (isValid) {\n      value = value.replace(/^:(.+)/, m => `00${m}`).replace(/(.+):$/, m => `${m}00`);\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        avalTime: _objectSpread(_objectSpread({}, values.avalTime), {}, {\n          [target.name]: value\n        })\n      }));\n    }\n  };\n\n  console.log(errors);\n  return __jsx(FormikProvider, {\n    value: formik\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(AdvrtForm, {\n    isSuccess: isSuccess,\n    locations: locations,\n    isPreview: isPreview,\n    setIsPreview: setIsPreview,\n    createAdvrt: createAdvrt,\n    errors: errors,\n    touched: touched,\n    setTouched: setTouched,\n    values: values,\n    setValues: setValues,\n    handleBlur: handleBlur,\n    handleTime: handleTime,\n    handleInput: handleInput,\n    handleSwitch: handleSwitch,\n    handleWeekDay: handleWeekDay,\n    handleBackBtn: handleBackBtn,\n    handleListItem: handleListItem,\n    handleMenuItem: handleMenuItem,\n    handleCreateNew: handleCreateNew,\n    handleAuctionInput: handleAuctionInput,\n    handleParamsCheckbox: handleParamsCheckbox,\n    handleCheckboxChange: handleCheckboxChange\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}