{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { useStyles } from './useStyles';\nexport var AdvrtSettingsBlock = function AdvrtSettingsBlock(props) {\n  _s();\n\n  var isPreview = props.isPreview,\n      createAdvrt = props.createAdvrt,\n      adsParams = props.adsParams,\n      onBlur = props.onBlur,\n      handleMenuItem = props.handleMenuItem,\n      handleListItem = props.handleListItem;\n  var data = isPreview ? adsParams : createAdvrt.data;\n  var classes = useStyles({\n    isPreview: isPreview\n  });\n  return __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    className: classes.root\n  }, Object.keys(data).map(function (key) {\n    if (!isPreview && adsParams[key]) {\n      return __jsx(React.Fragment, null, listGenerator(data[key], key), Object.keys(adsParams[key]).map(function (innerKey) {\n        if (Array.isArray(adsParams[key][innerKey]) && adsParams[key][innerKey].length) {\n          return listGenerator(adsParams[key][innerKey], innerKey);\n        }\n      }));\n    } else return listGenerator(data[key], key);\n  }));\n\n  function listGenerator(data, key) {\n    var fields;\n    var isExcludedRows = key !== 'adsParams' && key !== 'address' && key !== 'id' && key !== 'name';\n    var isSpecialRows = key === 'body' || key === 'colors' || key === 'safety' || key === 'multimedia' || key === 'assistant' || key === 'exterior';\n\n    if (isExcludedRows) {\n      if (isSpecialRows && Array.isArray(data) && data.length) {\n        fields = __jsx(\"div\", {\n          className: \"colors-list\"\n        }, data.map(function (item) {\n          return __jsx(\"div\", {\n            key: item.id,\n            onClick: handleListItem(key, item)\n          }, key === 'body' ? __jsx(\"div\", null, __jsx(\"img\", {\n            src: item.icon.url,\n            alt: item.name\n          }), __jsx(Typography, null, item.name)) : key === 'colors' ? __jsx(\"div\", {\n            style: {\n              width: '50px',\n              height: '50px',\n              backgroundColor: \"\".concat(item.hex_color_code)\n            }\n          }) : '');\n        }));\n      } else {\n        if (Array.isArray(data)) {\n          data = [{\n            id: null,\n            name: 'Не выбрано'\n          }].concat(_toConsumableArray(data));\n          fields = __jsx(CustomMenu, {\n            valueName: adsParams[key] ? adsParams[key].name : data[0].name,\n            items: data,\n            onBlur: onBlur,\n            onClick: handleMenuItem(key)\n          });\n        } else {\n          fields = key === 'body' ? __jsx(\"div\", null, __jsx(\"img\", {\n            src: data.icon.url,\n            alt: data.name\n          }), __jsx(Typography, null, data.name)) : key === 'colors' ? __jsx(\"div\", {\n            style: {\n              width: '50px',\n              height: '50px',\n              backgroundColor: \"\".concat(data.hex_color_code)\n            }\n          }) : __jsx(Typography, null, data.name);\n        }\n      }\n\n      return __jsx(Grid, {\n        item: true,\n        container: true,\n        key: key,\n        xs: 12,\n        className: classes.gridItem,\n        sm: isSpecialRows && !isPreview ? 12 : 6\n      }, __jsx(Typography, {\n        variant: \"subtitle1\"\n      }, key), fields);\n    }\n  }\n};\n\n_s(AdvrtSettingsBlock, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = AdvrtSettingsBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdvrtSettingsBlock\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_settings_block/AdvrtSettingsBlock.tsx"],"names":["React","Grid","Typography","CustomMenu","useStyles","AdvrtSettingsBlock","props","isPreview","createAdvrt","adsParams","onBlur","handleMenuItem","handleListItem","data","classes","root","Object","keys","map","key","listGenerator","innerKey","Array","isArray","length","fields","isExcludedRows","isSpecialRows","item","id","icon","url","name","width","height","backgroundColor","hex_color_code","gridItem"],"mappings":"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","sourcesContent":["import React, {FC} from \"react\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {ItemsType} from \"@root/interfaces/CustomMenuProps\";\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const AdvrtSettingsBlock: FC<any> = (props) => {\r\n    const {\r\n        isPreview,\r\n        createAdvrt,\r\n        adsParams,\r\n        onBlur,\r\n        handleMenuItem,\r\n        handleListItem\r\n    } = props;\r\n\r\n    const data = isPreview ? adsParams : createAdvrt.data;\r\n\r\n    const classes = useStyles({isPreview});\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={1}\r\n            className={classes.root}\r\n        >\r\n            {\r\n                Object.keys(data).map(key => {\r\n                    if (!isPreview && adsParams[key]) {\r\n                        return (\r\n                            <>\r\n                                {listGenerator(data[key], key)}\r\n                                {\r\n                                    Object.keys(adsParams[key]).map(innerKey => {\r\n                                        if (Array.isArray(adsParams[key][innerKey]) && adsParams[key][innerKey].length) {\r\n                                            return listGenerator(adsParams[key][innerKey], innerKey)\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </>\r\n                        )\r\n                    } else return listGenerator(data[key], key);\r\n                })\r\n            }\r\n        </Grid>\r\n    )\r\n\r\n    function listGenerator(data: ItemsType | ItemsType[], key: string) {\r\n        let fields;\r\n\r\n        const isExcludedRows = key !== 'adsParams' && key !== 'address' && key !== 'id' && key !== 'name';\r\n        const isSpecialRows = key === 'body'\r\n            || key === 'colors'\r\n            || key === 'safety'\r\n            || key === 'multimedia'\r\n            || key === 'assistant'\r\n            || key === 'exterior';\r\n\r\n        if (isExcludedRows) {\r\n            if (isSpecialRows && Array.isArray(data) && data.length) {\r\n                fields =\r\n                    <div className='colors-list'>\r\n                        {\r\n                            data.map(item => (\r\n                                <div\r\n                                    key={item.id}\r\n                                    onClick={handleListItem(key, item)}\r\n                                >\r\n                                    {\r\n                                        key === 'body'\r\n                                            ? (\r\n                                                <div>\r\n                                                    <img src={item.icon.url} alt={item.name}/>\r\n                                                    <Typography>{item.name}</Typography>\r\n                                                </div>\r\n                                            )\r\n                                            : key === 'colors'\r\n                                            ? (\r\n                                                <div\r\n                                                    style={{\r\n                                                        width: '50px',\r\n                                                        height: '50px',\r\n                                                        backgroundColor: `${item.hex_color_code}`\r\n                                                    }}\r\n                                                />\r\n                                            )\r\n                                            : ''\r\n                                    }\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n            } else {\r\n                if (Array.isArray(data)) {\r\n                    data = [{id: null, name: 'Не выбрано'}, ...data];\r\n                    fields = <CustomMenu\r\n                        valueName={adsParams[key] ? adsParams[key].name : data[0].name}\r\n                        items={data}\r\n                        onBlur={onBlur}\r\n                        onClick={handleMenuItem(key)}\r\n                    />;\r\n                } else {\r\n                    fields = key === 'body'\r\n                        ? <div>\r\n                            <img src={data.icon.url} alt={data.name}/>\r\n                            <Typography>{data.name}</Typography>\r\n                        </div>\r\n                        : key === 'colors'\r\n                            ? <div\r\n                                style={{\r\n                                    width: '50px',\r\n                                    height: '50px',\r\n                                    backgroundColor: `${data.hex_color_code}`\r\n                                }}\r\n                            />\r\n                            : <Typography>{data.name}</Typography>\r\n                }\r\n            }\r\n            return (\r\n                <Grid\r\n                    item\r\n                    container\r\n                    key={key}\r\n                    xs={12}\r\n                    className={classes.gridItem}\r\n                    sm={isSpecialRows && !isPreview ? 12 : 6}\r\n                >\r\n                    <Typography variant=\"subtitle1\">{key}</Typography>\r\n                    {fields}\r\n                </Grid>\r\n            )\r\n        }\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}