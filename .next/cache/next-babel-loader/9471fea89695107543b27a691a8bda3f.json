{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const categoryDataNormalization = categoryList => categoryList.map(category => {\n  const childs = category.childs.map(child => _objectSpread(_objectSpread({}, child), {}, {\n    parent: {\n      id: category.id,\n      name: category.name\n    }\n  }));\n  return _objectSpread(_objectSpread({}, category), {}, {\n    childs\n  });\n});\nexport const categorySearchHelper = (text, categoryList) => {\n  const searchRegExp = RegExp(text, 'i');\n  return categoryList.reduce((list, category) => {\n    category.childs.forEach(sub_ctgr => {\n      if (searchRegExp.test(sub_ctgr.name)) {\n        list.push(sub_ctgr);\n      }\n    });\n    return list;\n  }, []);\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/helpers.ts"],"names":["categoryDataNormalization","categoryList","map","category","childs","child","parent","id","name","categorySearchHelper","text","searchRegExp","RegExp","reduce","list","forEach","sub_ctgr","test","push"],"mappings":";;;;;;AAUA,OAAO,MAAMA,yBAAyB,GAAIC,YAAD,IACrCA,YAAY,CAACC,GAAb,CAAiBC,QAAQ,IAAI;AACzB,QAAMC,MAAM,GAAGD,QAAQ,CAACC,MAAT,CAAgBF,GAAhB,CAAoBG,KAAK,oCAC7BA,KAD6B;AAEhCC,IAAAA,MAAM,EAAE;AACJC,MAAAA,EAAE,EAAEJ,QAAQ,CAACI,EADT;AAEJC,MAAAA,IAAI,EAAEL,QAAQ,CAACK;AAFX;AAFwB,IAAzB,CAAf;AAQA,yCAAWL,QAAX;AAAqBC,IAAAA;AAArB;AACH,CAVD,CADG;AAcP,OAAO,MAAMK,oBAAoB,GAAG,CAACC,IAAD,EAAeT,YAAf,KAA4D;AAC5F,QAAMU,YAAY,GAAGC,MAAM,CAACF,IAAD,EAAO,GAAP,CAA3B;AACA,SAAOT,YAAY,CACdY,MADE,CACK,CAACC,IAAD,EAAOX,QAAP,KAAoB;AACxBA,IAAAA,QAAQ,CAACC,MAAT,CAAgBW,OAAhB,CAAwBC,QAAQ,IAAI;AAChC,UAAIL,YAAY,CAACM,IAAb,CAAkBD,QAAQ,CAACR,IAA3B,CAAJ,EAAsC;AAClCM,QAAAA,IAAI,CAACI,IAAL,CAAUF,QAAV;AACH;AACJ,KAJD;AAKA,WAAOF,IAAP;AACH,GARE,EAQA,EARA,CAAP;AASH,CAXM","sourcesContent":["import {CategoryType} from \"@root/interfaces/Categories\";\r\nimport {IdNameType} from \"@root/interfaces/Announcement\";\r\n\r\n\r\ntype SearchType = (IdNameType & {\r\n    parent: IdNameType,\r\n    icons: [],\r\n    image: { url: string }\r\n})[];\r\n\r\nexport const categoryDataNormalization = (categoryList: CategoryType[]): CategoryType[] => (\r\n    categoryList.map(category => {\r\n        const childs = category.childs.map(child => ({\r\n                ...child,\r\n                parent: {\r\n                    id: category.id,\r\n                    name: category.name\r\n                }\r\n            })\r\n        );\r\n        return {...category, childs};\r\n    })\r\n);\r\n\r\nexport const categorySearchHelper = (text: string, categoryList: CategoryType[]): SearchType => {\r\n    const searchRegExp = RegExp(text, 'i');\r\n    return categoryList\r\n        .reduce((list, category) => {\r\n            category.childs.forEach(sub_ctgr => {\r\n                if (searchRegExp.test(sub_ctgr.name)) {\r\n                    list.push(sub_ctgr);\r\n                }\r\n            })\r\n            return list;\r\n        }, []);\r\n};"]},"metadata":{},"sourceType":"module"}