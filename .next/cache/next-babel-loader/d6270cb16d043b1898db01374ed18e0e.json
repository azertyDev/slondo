{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { TOTAL_FILES_LIMIT, TOTAL_FILES_SIZE_LIMIT } from '@root/src/constants';\nimport React from 'react';\nimport { DragDropContext, Droppable, Draggable, resetServerContext } from 'react-beautiful-dnd';\nimport { useStyles } from './useStyles';\nimport { ButtonComponent } from \"@src/components/elements/button/Button\";\nimport { Grid } from \"@material-ui/core\";\nexport const PreviewPhotos = props => {\n  resetServerContext();\n  const {\n    images,\n    setImages\n  } = props;\n\n  const handleOnDragEnd = result => {\n    if (!result.destination) return;\n    const items = Array.from(images);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    setImages(items);\n  };\n\n  const handleUploadFile = ({\n    target\n  }) => {\n    if (target.files[0] && images.length < TOTAL_FILES_LIMIT) {\n      const totalSize = images.reduce((total, item) => total + item.file.size, 0);\n\n      if (totalSize + target.files[0].size < TOTAL_FILES_SIZE_LIMIT) {\n        setImages([{\n          file: target.files[0],\n          url: URL.createObjectURL(target.files[0])\n        }, ...images]);\n      }\n    }\n  };\n\n  const removeFile = url => () => {\n    images.map((item, index) => {\n      if (item.url === url) {\n        images.splice(index, 1);\n        setImages([...images]);\n      }\n    });\n  };\n\n  console.log(images);\n  const classes = useStyles();\n  return __jsx(React.Fragment, null, __jsx(\"input\", {\n    type: \"file\",\n    onChange: handleUploadFile,\n    accept: \"image/png,image/jpeg\"\n  }), __jsx(DragDropContext, {\n    onDragEnd: handleOnDragEnd\n  }, __jsx(Droppable, {\n    droppableId: \"images\",\n    direction: \"horizontal\"\n  }, provided => __jsx(Grid, _extends({\n    container: true,\n    className: \"images-wrapper\"\n  }, provided.droppableProps, {\n    ref: provided.innerRef\n  }), images.map(({\n    file,\n    url\n  }, index) => {\n    return __jsx(Draggable, {\n      key: url,\n      draggableId: url,\n      index: index\n    }, provided => __jsx(Grid, _extends({\n      item: true,\n      md: 3,\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps), __jsx(\"img\", {\n      src: url,\n      style: {\n        width: '160px',\n        height: '120px',\n        objectFit: 'cover'\n      },\n      alt: file.name\n    }), __jsx(ButtonComponent, {\n      onClick: removeFile(url)\n    }, \"X\")));\n  }), provided.placeholder))));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/preview_photos/PreviewPhotos.tsx"],"names":["TOTAL_FILES_LIMIT","TOTAL_FILES_SIZE_LIMIT","React","DragDropContext","Droppable","Draggable","resetServerContext","useStyles","ButtonComponent","Grid","PreviewPhotos","props","images","setImages","handleOnDragEnd","result","destination","items","Array","from","reorderedItem","splice","source","index","handleUploadFile","target","files","length","totalSize","reduce","total","item","file","size","url","URL","createObjectURL","removeFile","map","console","log","classes","provided","droppableProps","innerRef","draggableProps","dragHandleProps","width","height","objectFit","name","placeholder"],"mappings":"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","sourcesContent":["import {TOTAL_FILES_LIMIT, TOTAL_FILES_SIZE_LIMIT} from '@root/src/constants';\r\nimport React, {Dispatch, FC} from 'react';\r\nimport {DragDropContext, Droppable, Draggable, resetServerContext} from 'react-beautiful-dnd';\r\nimport {useStyles} from './useStyles';\r\nimport {ButtonComponent} from \"@src/components/elements/button/Button\";\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\n\r\nexport const PreviewPhotos: FC<{ images: [], setImages: Dispatch<any> }> = (props) => {\r\n    resetServerContext();\r\n\r\n    const {images, setImages} = props;\r\n\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n\r\n        const items = Array.from(images);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        setImages(items);\r\n    };\r\n\r\n    const handleUploadFile = ({target}) => {\r\n        if (target.files[0] && images.length < TOTAL_FILES_LIMIT) {\r\n\r\n            const totalSize = images.reduce((total, item: { file: { size: number } }) => total + item.file.size, 0);\r\n\r\n            if ((totalSize + target.files[0].size) < TOTAL_FILES_SIZE_LIMIT) {\r\n                setImages([{\r\n                    file: target.files[0],\r\n                    url: URL.createObjectURL(target.files[0])\r\n                },\r\n                    ...images\r\n                ]);\r\n            }\r\n        }\r\n    };\r\n\r\n    const removeFile = (url) => () => {\r\n        images.map((item: { url: string }, index) => {\r\n            if (item.url === url) {\r\n                images.splice(index, 1);\r\n                setImages([...images]);\r\n            }\r\n        });\r\n    };\r\n    console.log(images)\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <input type='file' onChange={handleUploadFile} accept=\"image/png,image/jpeg\"/>\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId=\"images\" direction=\"horizontal\">\r\n                    {(provided) => (\r\n                        <Grid container className=\"images-wrapper\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                            {images.map(({file, url}: any, index) => {\r\n                                return (\r\n                                    <Draggable key={url} draggableId={url} index={index}>\r\n                                        {(provided) => (\r\n                                            <Grid\r\n                                                item\r\n                                                md={3}\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                            >\r\n                                                <img\r\n                                                    src={url}\r\n                                                    style={{width: '160px', height: '120px', objectFit: 'cover'}}\r\n                                                    alt={file.name}\r\n                                                />\r\n                                                <ButtonComponent onClick={removeFile(url)}>X</ButtonComponent>\r\n                                            </Grid>\r\n                                        )}\r\n                                    </Draggable>\r\n                                );\r\n                            })}\r\n                            {provided.placeholder}\r\n                        </Grid>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}