{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Tabs, Typography } from \"@material-ui/core\";\nimport { i18n, Link } from \"../../../../i18n\";\nimport { CustomTab } from \"../custom_tab/CustomTab\";\nimport { CustomTabPanel } from \"../custom_tab_panel/CustomTabPanel\";\nimport { Form, Formik } from \"formik\";\nimport { CustomField } from \"../custom_field/CustomField\";\nimport { ButtonComponent } from \"../button/Button\";\nimport { requiredValidate, phoneValidate } from '../../../components/validates';\nimport { useStyles } from './useStyles';\nvar initialInputsVals = {\n  phone: '998908080265',\n  password: '123456789aaa'\n};\nexport var AuthRegForm = function AuthRegForm(props) {\n  _s();\n\n  var t = props.t,\n      handleCloseModal = props.handleCloseModal;\n  var language = i18n.language;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (store) {\n    return store.auth;\n  }),\n      isFetch = _useSelector.isFetch,\n      isAuth = _useSelector.isAuth,\n      error = _useSelector.error;\n\n  var _useState = useState(0),\n      tabValue = _useState[0],\n      setTabValue = _useState[1];\n\n  useEffect(function () {\n    isAuth && handleCloseModal();\n  }, [isAuth]);\n\n  var tabsHandler = function tabsHandler(event, newValue) {\n    setTabValue(newValue);\n  };\n\n  var loginReg = function loginReg(values) {\n    tabValue === 0 ? dispatch({\n      type: FETCH_TOKEN,\n      payload: {\n        phone: values.phone,\n        password: values.password\n      }\n    }) : null;\n  };\n\n  var onSubmit = function onSubmit(values, actions) {\n    loginReg(values);\n    actions.resetForm();\n  };\n\n  var classes = useStyles();\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", {\n    className: \"form-block\"\n  }, __jsx(\"div\", null, error && __jsx(Typography, {\n    className: classes.errorTxt\n  }, error)), __jsx(\"div\", {\n    className: \"tabs-container\"\n  }, __jsx(Tabs, {\n    value: tabValue,\n    onChange: tabsHandler,\n    indicatorColor: \"primary\",\n    className: \"tabs\"\n  }, __jsx(CustomTab, {\n    label: __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, t('auth_reg:signInTitle')),\n    id: 0\n  }), __jsx(CustomTab, {\n    label: __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, t('auth_reg:signUpTitle')),\n    id: 1\n  })), __jsx(\"div\", {\n    className: \"tab-panels\"\n  }, __jsx(CustomTabPanel, {\n    value: tabValue,\n    index: 0,\n    className: \"sign-panel\"\n  }, __jsx(Formik, {\n    initialValues: initialInputsVals,\n    onSubmit: onSubmit\n  }, function (_ref) {\n    var errors = _ref.errors,\n        touched = _ref.touched,\n        setFieldValue = _ref.setFieldValue;\n    return __jsx(Form, null, __jsx(\"div\", null, __jsx(Typography, {\n      className: classes.errorTxt,\n      variant: \"subtitle2\"\n    }, errors.phone && touched.phone ? errors.phone : ''), __jsx(CustomField, {\n      name: \"phone\",\n      type: \"tel\",\n      placeholder: t('auth_reg:enterPhone'),\n      setFieldValue: setFieldValue,\n      validate: phoneValidate,\n      className: errors.phone && touched.phone ? classes.errorInput : ''\n    })), __jsx(\"div\", null, __jsx(Typography, {\n      className: classes.errorTxt,\n      variant: \"subtitle2\"\n    }, errors.password && touched.password ? errors.password : ''), __jsx(CustomField, {\n      name: \"password\",\n      type: \"password\",\n      placeholder: t('auth_reg:enterPassword'),\n      validate: requiredValidate,\n      setFieldValue: setFieldValue,\n      className: errors.password && touched.password ? classes.errorInput : ''\n    })), __jsx(\"div\", {\n      className: \"forget-password\"\n    }, __jsx(\"a\", {\n      href: \"#\"\n    }, __jsx(\"span\", null, t('auth_reg:forgetPassword')))), __jsx(\"div\", {\n      className: classes.modalBtns\n    }, __jsx(ButtonComponent, {\n      className: \"signin-btn\",\n      type: \"submit\",\n      disabled: isFetch\n    }, t('common:signIn'))));\n  })), __jsx(CustomTabPanel, {\n    value: tabValue,\n    index: 1,\n    className: \"reg-panel\"\n  }, __jsx(Formik, {\n    initialValues: initialInputsVals,\n    onSubmit: onSubmit\n  }, function (_ref2) {\n    var errors = _ref2.errors,\n        touched = _ref2.touched,\n        setFieldValue = _ref2.setFieldValue;\n    return __jsx(Form, null, __jsx(\"div\", null, __jsx(Typography, {\n      className: classes.errorTxt,\n      variant: \"subtitle2\"\n    }, errors.phone && touched.phone ? errors.phone : ''), __jsx(CustomField, {\n      name: \"phone\",\n      type: \"tel\",\n      placeholder: t('auth_reg:enterPhone'),\n      validate: phoneValidate,\n      setFieldValue: setFieldValue,\n      className: errors.phone && touched.phone ? classes.errorInput : ''\n    })), __jsx(\"div\", {\n      className: classes.modalBtns\n    }, __jsx(ButtonComponent, {\n      className: \"reg-btn\",\n      type: \"submit\"\n    }, t('auth_reg:signUp'))));\n  }), __jsx(\"div\", {\n    className: classes.agreement\n  }, __jsx(Typography, {\n    className: \"reg-agreement\",\n    variant: \"body2\"\n  }, \"\".concat(t('auth_reg:agreement.firstPart'), \" \"), __jsx(Link, {\n    href: \"#\"\n  }, __jsx(\"a\", null, \"\".concat(t('auth_reg:agreement.secondPart'), \" \"))), \"\".concat(t('auth_reg:agreement.thirdPart'), \" \"), __jsx(Link, {\n    href: \"#\"\n  }, __jsx(\"a\", null, \"\".concat(t('auth_reg:agreement.fourthPart')))), language === 'uz' && \" \".concat(t('auth_reg:agreement.fifthPart')))))))));\n};\n\n_s(AuthRegForm, \"lvV2eJUVIcR6DacRy9WH0kEttRw=\", false, function () {\n  return [useDispatch, useSelector, useStyles];\n});\n\n_c = AuthRegForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthRegForm\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/auth_reg_form/AuthRegForm.tsx"],"names":["React","useState","useEffect","useDispatch","useSelector","Tabs","Typography","i18n","Link","CustomTab","CustomTabPanel","Form","Formik","CustomField","ButtonComponent","requiredValidate","phoneValidate","useStyles","initialInputsVals","phone","password","AuthRegForm","props","t","handleCloseModal","language","dispatch","store","auth","isFetch","isAuth","error","tabValue","setTabValue","tabsHandler","event","newValue","loginReg","values","type","FETCH_TOKEN","payload","onSubmit","actions","resetForm","classes","root","errorTxt","errors","touched","setFieldValue","errorInput","modalBtns","agreement"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {Tabs, Typography} from \"@material-ui/core\"\r\nimport {i18n, Link} from \"../../../../i18n\"\r\nimport {CustomTab} from \"../custom_tab/CustomTab\"\r\nimport {CustomTabPanel} from \"../custom_tab_panel/CustomTabPanel\"\r\nimport {Form, Formik} from \"formik\"\r\nimport {CustomField} from \"../custom_field/CustomField\"\r\nimport {ButtonComponent} from \"../button/Button\"\r\nimport {requiredValidate, phoneValidate} from '../../../components/validates'\r\nimport {RootState} from \"@src/redux/slices/rootReducer\"\r\nimport {useStyles} from './useStyles'\r\n\r\ntype InputVals = {\r\n    phone: string,\r\n    password: string\r\n};\r\n\r\nconst initialInputsVals: InputVals = {phone: '998908080265', password: '123456789aaa'};\r\n\r\nexport const AuthRegForm = (props) => {\r\n    const {t, handleCloseModal} = props;\r\n    const {language} = i18n;\r\n\r\n    const dispatch = useDispatch();\r\n    const {isFetch, isAuth, error} = useSelector((store) => store.auth);\r\n\r\n    const [tabValue, setTabValue] = useState(0);\r\n\r\n    useEffect(() => {\r\n        isAuth && handleCloseModal();\r\n    }, [isAuth]);\r\n\r\n    const tabsHandler = (event, newValue) => {\r\n        setTabValue(newValue);\r\n    };\r\n\r\n    const loginReg = (values) => {\r\n        tabValue === 0\r\n            ? dispatch({\r\n                type: FETCH_TOKEN,\r\n                payload: {\r\n                    phone: values.phone,\r\n                    password: values.password\r\n                }\r\n            })\r\n            : null\r\n    };\r\n\r\n    const onSubmit = (values, actions) => {\r\n        loginReg(values);\r\n        actions.resetForm();\r\n    };\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className='form-block'>\r\n                <div>\r\n                    {error && <Typography className={classes.errorTxt}>{error}</Typography>}\r\n                </div>\r\n                <div className='tabs-container'>\r\n                    <Tabs\r\n                        value={tabValue}\r\n                        onChange={tabsHandler}\r\n                        indicatorColor=\"primary\"\r\n                        className='tabs'\r\n                    >\r\n                        <CustomTab\r\n                            label={\r\n                                <Typography variant=\"subtitle1\">\r\n                                    {t('auth_reg:signInTitle')}\r\n                                </Typography>\r\n                            }\r\n                            id={0}\r\n                        />\r\n                        <CustomTab\r\n                            label={\r\n                                <Typography variant=\"subtitle1\">\r\n                                    {t('auth_reg:signUpTitle')}\r\n                                </Typography>\r\n                            }\r\n                            id={1}\r\n                        />\r\n                    </Tabs>\r\n                    <div className='tab-panels'>\r\n                        <CustomTabPanel\r\n                            value={tabValue}\r\n                            index={0}\r\n                            className='sign-panel'\r\n                        >\r\n                            <Formik initialValues={initialInputsVals} onSubmit={onSubmit}>\r\n                                {({errors, touched, setFieldValue}) => {\r\n                                    return (\r\n                                        <Form>\r\n                                            <div>\r\n                                                <Typography\r\n                                                    className={classes.errorTxt}\r\n                                                    variant=\"subtitle2\"\r\n                                                >\r\n                                                    {errors.phone && touched.phone ? errors.phone : ''}\r\n                                                </Typography>\r\n                                                <CustomField\r\n                                                    name='phone'\r\n                                                    type='tel'\r\n                                                    placeholder={t('auth_reg:enterPhone')}\r\n                                                    setFieldValue={setFieldValue}\r\n                                                    validate={phoneValidate}\r\n                                                    className={errors.phone && touched.phone ? classes.errorInput : ''}\r\n                                                />\r\n                                            </div>\r\n                                            <div>\r\n                                                <Typography\r\n                                                    className={classes.errorTxt}\r\n                                                    variant=\"subtitle2\"\r\n                                                >\r\n                                                    {errors.password && touched.password ? errors.password : ''}\r\n                                                </Typography>\r\n                                                <CustomField\r\n                                                    name='password'\r\n                                                    type=\"password\"\r\n                                                    placeholder={t('auth_reg:enterPassword')}\r\n                                                    validate={requiredValidate}\r\n                                                    setFieldValue={setFieldValue}\r\n                                                    className={errors.password && touched.password ? classes.errorInput : ''}\r\n                                                />\r\n                                            </div>\r\n                                            <div className='forget-password'>\r\n                                                <a href=\"#\">\r\n                                                        <span>\r\n                                                            {t('auth_reg:forgetPassword')}\r\n                                                        </span>\r\n                                                </a>\r\n                                            </div>\r\n                                            <div className={classes.modalBtns}>\r\n                                                <ButtonComponent className='signin-btn' type='submit'\r\n                                                                 disabled={isFetch}>\r\n                                                    {t('common:signIn')}\r\n                                                </ButtonComponent>\r\n                                            </div>\r\n                                        </Form>\r\n                                    )\r\n                                }}\r\n                            </Formik>\r\n                        </CustomTabPanel>\r\n                        <CustomTabPanel value={tabValue} index={1} className='reg-panel'>\r\n                            <Formik initialValues={initialInputsVals} onSubmit={onSubmit}>\r\n                                {({errors, touched, setFieldValue}) => (\r\n                                    <Form>\r\n                                        <div>\r\n                                            <Typography\r\n                                                className={classes.errorTxt}\r\n                                                variant=\"subtitle2\"\r\n                                            >\r\n                                                {errors.phone && touched.phone ? errors.phone : ''}\r\n                                            </Typography>\r\n                                            <CustomField\r\n                                                name='phone'\r\n                                                type='tel'\r\n                                                placeholder={t('auth_reg:enterPhone')}\r\n                                                validate={phoneValidate}\r\n                                                setFieldValue={setFieldValue}\r\n                                                className={errors.phone && touched.phone ? classes.errorInput : ''}\r\n                                            />\r\n                                        </div>\r\n                                        <div className={classes.modalBtns}>\r\n                                            <ButtonComponent className='reg-btn' type='submit'>\r\n                                                {t('auth_reg:signUp')}\r\n                                            </ButtonComponent>\r\n                                        </div>\r\n                                    </Form>\r\n                                )}\r\n                            </Formik>\r\n                            <div className={classes.agreement}>\r\n                                <Typography className='reg-agreement' variant='body2'>\r\n                                    {`${t('auth_reg:agreement.firstPart')} `}\r\n                                    <Link href='#'>\r\n                                        <a>{`${t('auth_reg:agreement.secondPart')} `}</a>\r\n                                    </Link>\r\n                                    {`${t('auth_reg:agreement.thirdPart')} `}\r\n                                    <Link href='#'>\r\n                                        <a>{`${t('auth_reg:agreement.fourthPart')}`}</a>\r\n                                    </Link>\r\n                                    {language === 'uz' && ` ${t('auth_reg:agreement.fifthPart')}`}\r\n                                </Typography>\r\n                            </div>\r\n                        </CustomTabPanel>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}