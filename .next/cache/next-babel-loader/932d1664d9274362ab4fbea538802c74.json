{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { useStyles } from './useStyles';\nexport const AdvrtSettingsBlock = props => {\n  const {\n    isPreview,\n    createAdvrt,\n    values,\n    resetValues,\n    onBlur,\n    handleClickMenuItem\n  } = props;\n  const data = isPreview ? values : createAdvrt.data;\n  useEffect(() => {\n    resetValues();\n  }, [createAdvrt.category.id, createAdvrt.data.id]);\n  const classes = useStyles();\n  return __jsx(React.Fragment, null, __jsx(Grid, {\n    item: true,\n    container: true,\n    xs: 12,\n    spacing: 1,\n    className: classes.root\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Typography, {\n    variant: \"h5\"\n  }, __jsx(\"strong\", null, \"\\u041D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0439\\u043A\\u0438 \\u043E\\u0431\\u044A\\u044F\\u0432\\u043B\\u0435\\u043D\\u0438\\u044F\"))), Object.keys(data).map(key => {\n    if (Array.isArray(data[key]) && data[key].length) {\n      const newData = [{\n        id: null,\n        name: 'Не выбрано'\n      }, ...data[key]];\n      return listGenerator(newData, key);\n    } else if (isPreview) {\n      return listGenerator(data, key);\n    }\n  }), Object.keys(data).map(key => values[key] && Object.keys(values[key]).map(innerKey => {\n    if (Array.isArray(values[key][innerKey]) && values[key][innerKey].length) {\n      const newData = [{\n        id: null,\n        name: 'Не выбрано'\n      }, ...values[key][innerKey]];\n      return listGenerator(newData, innerKey);\n    } else if (isPreview) {\n      return listGenerator(data, innerKey);\n    }\n  }))));\n\n  function listGenerator(data, key) {\n    return __jsx(Grid, {\n      item: true,\n      key: key,\n      xs: 12,\n      sm: 4\n    }, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, __jsx(\"strong\", null, key)), isPreview ? __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, __jsx(\"strong\", null, data[key].name)) : __jsx(CustomMenu, {\n      valueName: values[key] ? values[key].name : data[0].name,\n      items: data,\n      onBlur: onBlur,\n      onClick: handleClickMenuItem(key)\n    }));\n  }\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrtForm/advrt_settings_block/AdvrtSettingsBlock.tsx"],"names":["React","useEffect","Grid","Typography","CustomMenu","useStyles","AdvrtSettingsBlock","props","isPreview","createAdvrt","values","resetValues","onBlur","handleClickMenuItem","data","category","id","classes","root","Object","keys","map","key","Array","isArray","length","newData","name","listGenerator","innerKey"],"mappings":"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","sourcesContent":["import React, {FC, useEffect} from \"react\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const AdvrtSettingsBlock: FC<any> = (props) => {\r\n    const {isPreview, createAdvrt, values, resetValues, onBlur, handleClickMenuItem} = props;\r\n    const data = isPreview ? values : createAdvrt.data;\r\n\r\n    useEffect(() => {\r\n        resetValues();\r\n    }, [createAdvrt.category.id, createAdvrt.data.id]);\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <Grid item container xs={12} spacing={1} className={classes.root}>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h5\">\r\n                        <strong>Настройки объявления</strong>\r\n                    </Typography>\r\n                </Grid>\r\n                {\r\n                    Object.keys(data).map((key) => {\r\n                        if (Array.isArray(data[key]) && data[key].length) {\r\n                            const newData = [{id: null, name: 'Не выбрано'}, ...data[key]];\r\n                            return listGenerator(newData, key);\r\n                        } else if (isPreview) {\r\n                            return listGenerator(data, key);\r\n                        }\r\n                    })\r\n                }\r\n                {\r\n                    Object.keys(data).map((key) => (\r\n                        values[key] && Object.keys(values[key]).map(innerKey => {\r\n                            if (Array.isArray(values[key][innerKey]) && values[key][innerKey].length) {\r\n                                const newData = [{id: null, name: 'Не выбрано'}, ...values[key][innerKey]];\r\n                                return listGenerator(newData, innerKey);\r\n                            } else if (isPreview) {\r\n                                return listGenerator(data, innerKey);\r\n                            }\r\n                        })\r\n                    ))\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n\r\n    function listGenerator(data, key) {\r\n        return (\r\n            <Grid\r\n                item\r\n                key={key}\r\n                xs={12}\r\n                sm={4}\r\n            >\r\n                <Typography variant=\"subtitle1\">\r\n                    <strong>{key}</strong>\r\n                </Typography>\r\n                {\r\n                    isPreview\r\n                        ? <Typography variant=\"subtitle1\">\r\n                            <strong>{data[key].name}</strong>\r\n                        </Typography>\r\n                        : <CustomMenu\r\n                            valueName={values[key] ? values[key].name : data[0].name}\r\n                            items={data}\r\n                            onBlur={onBlur}\r\n                            onClick={handleClickMenuItem(key)}\r\n                        />\r\n                }\r\n            </Grid>\r\n        )\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}