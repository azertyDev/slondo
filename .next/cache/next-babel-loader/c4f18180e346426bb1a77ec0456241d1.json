{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Fragment } from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { CustomCheckbox } from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\nimport { CustomFormikField } from \"@src/components/elements/custom_formik_field/CustomFormikField\";\nimport { requiredFields } from '@root/validation_schemas/createAdvrtSchema';\nimport { useStyles } from './useStyles';\nexport const AdvrtSettingsBlock = props => {\n  const {\n    isPreview,\n    createAdvrt,\n    values,\n    setValues,\n    onBlur,\n    handleMenuItem,\n    handleListItem,\n    handleParamsInput,\n    handleParamsCheckbox\n  } = props;\n  const adParams = values.adParams;\n  const data = isPreview ? adParams : createAdvrt.data; // const setInitValues = () => {\n  //     Object.keys(createAdvrt.data).forEach(k => {\n  //         setValues({\n  //             ...values,\n  //             adParams: {\n  //                 ...adParams,\n  //                 [k]: [{id: null, name: 'Не выбрано'}]\n  //             }\n  //         });\n  //     });\n  // };\n  //\n  // useEffect(() => {\n  //     setInitValues();\n  // }, []);\n\n  const classes = useStyles({\n    isPreview\n  });\n  return __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    className: classes.root\n  }, Object.keys(data).map(key => {\n    var _adParams$year, _adParams$mileage;\n\n    return __jsx(Fragment, {\n      key: key\n    }, !isPreview && adParams[key] ? __jsx(React.Fragment, null, listGenerator(data[key], key), Object.keys(adParams[key]).map(innerKey => {\n      if (Array.isArray(adParams[key][innerKey]) && adParams[key][innerKey].length) {\n        return listGenerator(adParams[key][innerKey], innerKey);\n      }\n    })) : listGenerator(data[key], key), key === 'body' && __jsx(React.Fragment, null, __jsx(Grid, {\n      item: true,\n      container: true,\n      xs: 12,\n      sm: 6,\n      className: classes.gridItem\n    }, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, \"year\", requiredFields[key] && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\")), isPreview ? __jsx(Typography, null, adParams.year) : __jsx(CustomFormikField, {\n      name: \"year\",\n      placeholder: \"\\u0413\\u043E\\u0434 \\u0432\\u044B\\u043F\\u0443\\u0441\\u043A\\u0430\",\n      value: (_adParams$year = adParams.year) !== null && _adParams$year !== void 0 ? _adParams$year : '',\n      onChange: handleParamsInput('year')\n    })), __jsx(Grid, {\n      item: true,\n      container: true,\n      xs: 12,\n      sm: 6,\n      className: classes.gridItem\n    }, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, \"mileage\", requiredFields[key] && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\")), isPreview ? __jsx(Typography, null, adParams.mileage) : __jsx(CustomFormikField, {\n      name: \"mileage\",\n      placeholder: \"\\u041F\\u0440\\u043E\\u0431\\u0435\\u0433\",\n      value: (_adParams$mileage = adParams.mileage) !== null && _adParams$mileage !== void 0 ? _adParams$mileage : '',\n      onChange: handleParamsInput('mileage')\n    }))));\n  }));\n\n  function listGenerator(data, key) {\n    let fields;\n    const isExcludedRows = key !== 'id' && key !== 'name' && key !== 'avalTime' && key !== 'title' && key !== 'mileage' && key !== 'year' && key !== 'adsParams' && key !== 'adType' && key !== 'price' && key !== 'safe_deal' && key !== 'exchange' && key !== 'delivery' && key !== 'location' && key !== 'currency' && key !== 'phone' && key !== 'description' && key !== 'files';\n    const isOptions = key === 'safety' || key === 'multimedia' || key === 'assistant' || key === 'exterior';\n    const isSpecialRows = key === 'body' || key === 'colors' || isOptions;\n\n    if (isExcludedRows && data) {\n      data = data;\n\n      if (isSpecialRows && data.length) {\n        fields = __jsx(React.Fragment, null, __jsx(Typography, {\n          variant: \"subtitle1\"\n        }, key, requiredFields[key] && __jsx(\"span\", {\n          className: \"error-text\"\n        }, \"*\")), __jsx(\"div\", {\n          className: \"row-list\"\n        }, data.map(item => __jsx(\"div\", {\n          key: item.id\n        }, key === 'body' ? __jsx(\"div\", {\n          onClick: !isPreview ? handleListItem(key, item) : null,\n          className: adParams[key] && adParams[key].id === item.id ? classes.selected : ''\n        }, __jsx(\"img\", {\n          src: item.icon.url,\n          alt: item.name\n        }), __jsx(Typography, null, item.name)) : key === 'colors' ? __jsx(\"div\", {\n          onClick: !isPreview ? handleListItem(key, item) : null,\n          className: adParams[key] && adParams[key].id === item.id ? classes.selected : '',\n          style: {\n            width: '50px',\n            height: '50px',\n            backgroundColor: `${item.hex_color_code}`\n          }\n        }) : __jsx(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center'\n          }\n        }, __jsx(CustomCheckbox, {\n          disabled: isPreview,\n          checked: adParams[key] && adParams[key].some(val => val.id === item.id),\n          onChange: handleParamsCheckbox(key, item)\n        }), __jsx(Typography, null, item.name))))));\n      } else {\n        if (!Array.isArray(data)) {\n          data = data;\n          fields = __jsx(React.Fragment, null, __jsx(Typography, {\n            variant: \"subtitle1\"\n          }, key, requiredFields[key] && __jsx(\"span\", {\n            className: \"error-text\"\n          }, \"*\")), key === 'body' ? __jsx(Typography, null, data.name) : key === 'colors' ? __jsx(\"div\", {\n            style: {\n              width: '50px',\n              height: '50px',\n              backgroundColor: `${data.hex_color_code}`\n            }\n          }) : __jsx(Typography, null, data.name));\n        } else if (data.length) {\n          data = [{\n            id: null,\n            name: 'Не выбрано'\n          }, ...data];\n          fields = __jsx(React.Fragment, null, __jsx(Typography, {\n            variant: \"subtitle1\"\n          }, key, requiredFields[key] && __jsx(\"span\", {\n            className: \"error-text\"\n          }, \"*\")), __jsx(CustomMenu, {\n            valueName: adParams[key] ? adParams[key].name : data[0].name,\n            items: data,\n            onBlur: onBlur,\n            onClick: handleMenuItem(key)\n          }));\n        }\n      }\n\n      return __jsx(Grid, {\n        item: true,\n        container: true,\n        className: classes.gridItem,\n        key: key,\n        xs: 12,\n        sm: isSpecialRows && !isPreview || isOptions ? 12 : 6\n      }, fields);\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_settings_block/AdvrtSettingsBlock.tsx"],"names":["React","Fragment","Grid","Typography","CustomMenu","CustomCheckbox","CustomFormikField","requiredFields","useStyles","AdvrtSettingsBlock","props","isPreview","createAdvrt","values","setValues","onBlur","handleMenuItem","handleListItem","handleParamsInput","handleParamsCheckbox","adParams","data","classes","root","Object","keys","map","key","listGenerator","innerKey","Array","isArray","length","gridItem","year","mileage","fields","isExcludedRows","isOptions","isSpecialRows","item","id","selected","icon","url","name","width","height","backgroundColor","hex_color_code","display","alignItems","some","val"],"mappings":"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","sourcesContent":["import React, {FC, Fragment, useEffect} from \"react\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {ItemsType} from \"@root/interfaces/CustomMenuProps\";\r\nimport {CustomCheckbox} from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\r\nimport {CustomFormikField} from \"@src/components/elements/custom_formik_field/CustomFormikField\";\r\nimport {requiredFields} from '@root/validation_schemas/createAdvrtSchema';\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const AdvrtSettingsBlock: FC<any> = (props) => {\r\n    const {\r\n        isPreview,\r\n        createAdvrt,\r\n        values,\r\n        setValues,\r\n        onBlur,\r\n        handleMenuItem,\r\n        handleListItem,\r\n        handleParamsInput,\r\n        handleParamsCheckbox\r\n    } = props;\r\n\r\n    const adParams = values.adParams;\r\n\r\n    const data = isPreview ? adParams : createAdvrt.data;\r\n\r\n\r\n    // const setInitValues = () => {\r\n    //     Object.keys(createAdvrt.data).forEach(k => {\r\n    //         setValues({\r\n    //             ...values,\r\n    //             adParams: {\r\n    //                 ...adParams,\r\n    //                 [k]: [{id: null, name: 'Не выбрано'}]\r\n    //             }\r\n    //         });\r\n    //     });\r\n    // };\r\n    //\r\n    // useEffect(() => {\r\n    //     setInitValues();\r\n    // }, []);\r\n\r\n    const classes = useStyles({isPreview});\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={1}\r\n            className={classes.root}\r\n        >\r\n            {\r\n                Object.keys(data).map(key => {\r\n                    return (\r\n                        <Fragment key={key}>\r\n                            {\r\n                                !isPreview && adParams[key]\r\n                                    ? (\r\n                                        <>\r\n                                            {listGenerator(data[key], key)}\r\n                                            {\r\n                                                Object.keys(adParams[key]).map(innerKey => {\r\n                                                    if (Array.isArray(adParams[key][innerKey]) && adParams[key][innerKey].length) {\r\n                                                        return listGenerator(adParams[key][innerKey], innerKey)\r\n                                                    }\r\n                                                })\r\n                                            }\r\n                                        </>\r\n                                    )\r\n                                    : listGenerator(data[key], key)\r\n                            }\r\n                            {\r\n                                key === 'body' && (\r\n                                    <>\r\n                                        <Grid\r\n                                            item\r\n                                            container\r\n                                            xs={12}\r\n                                            sm={6}\r\n                                            className={classes.gridItem}\r\n                                        >\r\n                                            <Typography variant=\"subtitle1\">\r\n                                                year\r\n                                                {requiredFields[key] && (\r\n                                                    <span className='error-text'>\r\n                                                        *\r\n                                                    </span>\r\n                                                )}\r\n                                            </Typography>\r\n                                            {\r\n                                                isPreview\r\n                                                    ? <Typography>{adParams.year}</Typography>\r\n                                                    : <CustomFormikField\r\n                                                        name='year'\r\n                                                        placeholder='Год выпуска'\r\n                                                        value={adParams.year ?? ''}\r\n                                                        onChange={handleParamsInput('year')}\r\n                                                    />\r\n                                            }\r\n                                        </Grid>\r\n                                        <Grid\r\n                                            item\r\n                                            container\r\n                                            xs={12}\r\n                                            sm={6}\r\n                                            className={classes.gridItem}\r\n                                        >\r\n                                            <Typography variant=\"subtitle1\">\r\n                                                mileage\r\n                                                {requiredFields[key] && (\r\n                                                    <span className='error-text'>\r\n                                                        *\r\n                                                    </span>\r\n                                                )}\r\n                                            </Typography>\r\n                                            {\r\n                                                isPreview\r\n                                                    ? <Typography>{adParams.mileage}</Typography>\r\n                                                    : <CustomFormikField\r\n                                                        name='mileage'\r\n                                                        placeholder='Пробег'\r\n                                                        value={adParams.mileage ?? ''}\r\n                                                        onChange={handleParamsInput('mileage')}\r\n                                                    />\r\n                                            }\r\n                                        </Grid>\r\n                                    </>\r\n                                )\r\n                            }\r\n                        </Fragment>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    )\r\n\r\n    function listGenerator(data: ItemsType | ItemsType[], key: string) {\r\n        let fields;\r\n\r\n        const isExcludedRows = key !== 'id'\r\n            && key !== 'name'\r\n            && key !== 'avalTime'\r\n            && key !== 'title'\r\n            && key !== 'mileage'\r\n            && key !== 'year'\r\n            && key !== 'adsParams'\r\n            && key !== 'adType'\r\n            && key !== 'price'\r\n            && key !== 'safe_deal'\r\n            && key !== 'exchange'\r\n            && key !== 'delivery'\r\n            && key !== 'location'\r\n            && key !== 'currency'\r\n            && key !== 'phone'\r\n            && key !== 'description'\r\n            && key !== 'files';\r\n\r\n        const isOptions = key === 'safety'\r\n            || key === 'multimedia'\r\n            || key === 'assistant'\r\n            || key === 'exterior';\r\n\r\n        const isSpecialRows = key === 'body'\r\n            || key === 'colors'\r\n            || isOptions;\r\n\r\n        if (isExcludedRows && data) {\r\n            data = data as ItemsType[];\r\n            if (isSpecialRows && data.length) {\r\n                fields = (\r\n                    <>\r\n                        <Typography variant=\"subtitle1\">\r\n                            {key}\r\n                            {requiredFields[key] && (\r\n                                <span className='error-text'>\r\n                                    *\r\n                                </span>\r\n                            )}\r\n                        </Typography>\r\n                        <div className='row-list'>\r\n                            {\r\n                                data.map(item => (\r\n                                    <div key={item.id}>\r\n                                        {\r\n                                            key === 'body'\r\n                                                ? (\r\n                                                    <div\r\n                                                        onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                                        className={\r\n                                                            adParams[key] && adParams[key].id === item.id\r\n                                                                ? classes.selected\r\n                                                                : ''\r\n                                                        }\r\n                                                    >\r\n                                                        <img src={item.icon.url} alt={item.name}/>\r\n                                                        <Typography>{item.name}</Typography>\r\n                                                    </div>\r\n                                                )\r\n                                                : key === 'colors'\r\n                                                ? (\r\n                                                    <div\r\n                                                        onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                                        className={adParams[key] && adParams[key].id === item.id ? classes.selected : ''}\r\n                                                        style={{\r\n                                                            width: '50px',\r\n                                                            height: '50px',\r\n                                                            backgroundColor: `${item.hex_color_code}`,\r\n                                                        }}\r\n                                                    />\r\n                                                )\r\n                                                : (\r\n                                                    <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                        <CustomCheckbox\r\n                                                            disabled={isPreview}\r\n                                                            checked={\r\n                                                                adParams[key]\r\n                                                                && adParams[key].some(val => val.id === item.id)\r\n                                                            }\r\n                                                            onChange={handleParamsCheckbox(key, item)}\r\n                                                        />\r\n                                                        <Typography>{item.name}</Typography>\r\n                                                    </div>\r\n                                                )\r\n                                        }\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </>\r\n                );\r\n            } else {\r\n                if (!Array.isArray(data)) {\r\n                    data = data as ItemsType;\r\n                    fields = (\r\n                        <>\r\n                            <Typography variant=\"subtitle1\">\r\n                                {key}\r\n                                {requiredFields[key] && (\r\n                                    <span className='error-text'>\r\n                                        *\r\n                                    </span>\r\n                                )}\r\n                            </Typography>\r\n                            {\r\n                                key === 'body'\r\n                                    ? <Typography>{data.name}</Typography>\r\n                                    : key === 'colors'\r\n                                    ? <div\r\n                                        style={{\r\n                                            width: '50px',\r\n                                            height: '50px',\r\n                                            backgroundColor: `${data.hex_color_code}`\r\n                                        }}\r\n                                    />\r\n                                    : <Typography>{data.name}</Typography>\r\n                            }\r\n                        </>\r\n                    );\r\n                } else if (data.length) {\r\n                    data = [{id: null, name: 'Не выбрано'}, ...data];\r\n                    fields = (\r\n                        <>\r\n                            <Typography variant=\"subtitle1\">\r\n                                {key}\r\n                                {requiredFields[key] && (\r\n                                    <span className='error-text'>\r\n                                        *\r\n                                    </span>\r\n                                )}\r\n                            </Typography>\r\n                            <CustomMenu\r\n                                valueName={adParams[key] ? adParams[key].name : data[0].name}\r\n                                items={data}\r\n                                onBlur={onBlur}\r\n                                onClick={handleMenuItem(key)}\r\n                            />\r\n                        </>\r\n                    );\r\n                }\r\n            }\r\n            return (\r\n                <Grid\r\n                    item\r\n                    container\r\n                    className={classes.gridItem}\r\n                    key={key}\r\n                    xs={12}\r\n                    sm={isSpecialRows && !isPreview || isOptions ? 12 : 6}\r\n                >\r\n                    {fields}\r\n                </Grid>\r\n            )\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}