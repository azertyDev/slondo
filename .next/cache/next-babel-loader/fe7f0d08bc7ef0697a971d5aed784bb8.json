{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducers from \"./reducers/rootReducer\";\nimport rootSaga from './sagas/rootSaga';\nvar sagaMiddleware = createSagaMiddleware();\nvar enhancer = composeWithDevTools(applyMiddleware(sagaMiddleware)); // create a makeStore function\n\nvar makeStore = function makeStore() {\n  var store = createStore(reducers, enhancer);\n  sagaMiddleware.run(rootSaga);\n  return store;\n}; // export an assembled wrapper\n\n\nexport default makeStore;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/store.ts"],"names":["createStore","applyMiddleware","createSagaMiddleware","composeWithDevTools","reducers","rootSaga","sagaMiddleware","enhancer","makeStore","store","run"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AAGA,IAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;AAEA,IAAMK,QAAQ,GAAGJ,mBAAmB,CAChCF,eAAe,CAACK,cAAD,CADiB,CAApC,C,CAIA;;AACA,IAAME,SAAoB,GAAG,SAAvBA,SAAuB,GAAM;AAC/B,MAAMC,KAAK,GAAGT,WAAW,CAACI,QAAD,EAAWG,QAAX,CAAzB;AACAD,EAAAA,cAAc,CAACI,GAAf,CAAmBL,QAAnB;AACA,SAAOI,KAAP;AACH,CAJD,C,CAMA;;;AACA,eAAeD,SAAf","sourcesContent":["import {createStore, applyMiddleware} from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport {MakeStore} from 'next-redux-wrapper'\r\nimport reducers from \"./reducers/rootReducer\"\r\nimport rootSaga from './sagas/rootSaga'\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst enhancer = composeWithDevTools(\r\n    applyMiddleware(sagaMiddleware),\r\n);\r\n\r\n// create a makeStore function\r\nconst makeStore: MakeStore = () => {\r\n    const store = createStore(reducers, enhancer);\r\n    sagaMiddleware.run(rootSaga);\r\n    return store\r\n};\r\n\r\n// export an assembled wrapper\r\nexport default makeStore;"]},"metadata":{},"sourceType":"module"}