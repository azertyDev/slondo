{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport CyrillicToTranslit from 'cyrillic-to-translit-js';\nexport const transformTitle = title => {\n  const transform = new CyrillicToTranslit().transform;\n  const formatRegEx = /[\\-\\,\\.\\;\\\"\\']+/g;\n  return transform(title).toLowerCase().replace(formatRegEx, ' ').replace(/\\s+/g, '-');\n};\nexport const numberRegEx = /^[0-9]*$/;\nexport const categoryDataNormalization = categoryList => categoryList.map(category => {\n  if (category.model) {\n    const model = category.model.map(subCategory => {\n      subCategory.type = categoryDataNormalization(subCategory.type);\n      return _objectSpread(_objectSpread({}, subCategory), {}, {\n        parents: [{\n          id: category.id,\n          name: category.name\n        }]\n      });\n    });\n    return _objectSpread(_objectSpread({}, category), {}, {\n      model\n    });\n  } else if (category.type) {\n    const type = category.type.map(subCategory => _objectSpread(_objectSpread({}, subCategory), {}, {\n      parents: [...subCategory.parents, {\n        id: category.id,\n        name: category.name\n      }]\n    }));\n    return _objectSpread(_objectSpread({}, category), {}, {\n      type\n    });\n  }\n});\nexport const categorySearchHelper = (text, categoryList) => {\n  const searchRegExp = RegExp(text, 'i');\n  return categoryList.reduce((list, category) => {\n    category.model.forEach(sub_ctgr => {\n      if (searchRegExp.test(sub_ctgr.name)) {\n        list.push(sub_ctgr);\n      }\n    });\n    return list;\n  }, []);\n};\nexport const prepareCreateAncmnt = (data, adParams) => Object.keys(data).reduce((acc, key) => {\n  if (Array.isArray(data[key]) || data[key] === '') {\n    acc[key] = data[key];\n  }\n\n  if (Array.isArray(data[key]) && data[key].length && adParams !== undefined && adParams[key]) {\n    acc = _objectSpread(_objectSpread({}, acc), prepareCreateAncmnt(adParams[key]));\n  }\n\n  return acc;\n}, {});\nexport const pricePrettier = price => price && price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/helpers.ts"],"names":["CyrillicToTranslit","transformTitle","title","transform","formatRegEx","toLowerCase","replace","numberRegEx","categoryDataNormalization","categoryList","map","category","model","subCategory","type","parents","id","name","categorySearchHelper","text","searchRegExp","RegExp","reduce","list","forEach","sub_ctgr","test","push","prepareCreateAncmnt","data","adParams","Object","keys","acc","key","Array","isArray","length","undefined","pricePrettier","price","toString"],"mappings":"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","sourcesContent":["import {CategoryType, ModelType} from \"@root/interfaces/Categories\";\r\nimport {IdNameType} from \"@root/interfaces/Announcement\";\r\nimport CyrillicToTranslit from 'cyrillic-to-translit-js';\r\n\r\n\r\nexport const transformTitle = (title: string): string => {\r\n    const transform = new CyrillicToTranslit().transform;\r\n    const formatRegEx = /[\\-\\,\\.\\;\\\"\\']+/g;\r\n\r\n    return transform(title)\r\n        .toLowerCase()\r\n        .replace(formatRegEx, ' ')\r\n        .replace(/\\s+/g, '-');\r\n};\r\n\r\n\r\nexport const numberRegEx = /^[0-9]*$/;\r\n\r\ntype SearchType = (IdNameType & {\r\n    parent: IdNameType,\r\n    icons: [],\r\n    image: { url: string }\r\n})[];\r\n\r\nexport const categoryDataNormalization = (categoryList: (CategoryType | ModelType)[]) => (\r\n        categoryList.map(category => {\r\n            if (category.model) {\r\n                const model = category.model.map(subCategory => {\r\n                    subCategory.type = categoryDataNormalization(subCategory.type);\r\n                    return {\r\n                        ...subCategory,\r\n                        parents: [{\r\n                            id: category.id,\r\n                            name: category.name\r\n                        }]\r\n                    }\r\n                })\r\n                return {...category, model}\r\n            } else if (category.type) {\r\n                const type = category.type.map(subCategory => ({\r\n                    ...subCategory,\r\n                    parents: [...subCategory.parents, {\r\n                        id: category.id,\r\n                        name: category.name\r\n                    }]\r\n                }));\r\n                return {...category, type};\r\n            }\r\n        })\r\n    )\r\n;\r\n\r\nexport const categorySearchHelper = (text: string, categoryList: CategoryType[]): SearchType => {\r\n    const searchRegExp = RegExp(text, 'i');\r\n    return categoryList\r\n        .reduce((list, category) => {\r\n            category.model.forEach(sub_ctgr => {\r\n                if (searchRegExp.test(sub_ctgr.name)) {\r\n                    list.push(sub_ctgr);\r\n                }\r\n            })\r\n            return list;\r\n        }, []);\r\n};\r\n\r\nexport const prepareCreateAncmnt = (data: any, adParams?: any): any => (\r\n    Object.keys(data).reduce((acc, key) => {\r\n        if (Array.isArray(data[key]) || data[key] === '') {\r\n            acc[key] = data[key];\r\n        }\r\n        if (\r\n            Array.isArray(data[key])\r\n            && data[key].length\r\n            && adParams !== undefined && adParams[key]\r\n        ) {\r\n            acc = {\r\n                ...acc,\r\n                ...prepareCreateAncmnt(adParams[key])\r\n            };\r\n        }\r\n        return acc;\r\n    }, {})\r\n);\r\n\r\nexport const pricePrettier = (price: number): string =>\r\n    price && price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");"]},"metadata":{},"sourceType":"module"}