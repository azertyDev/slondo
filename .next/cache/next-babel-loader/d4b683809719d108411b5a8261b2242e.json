{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _extraReducers;\n\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from '@src/api/api';\nexport var fetchToken = createAsyncThunk('auth/fetchByIdStatus', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return userAPI.login(values.phone, values.password);\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\nvar initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null\n};\nvar authSlice = createSlice({\n  name: 'auth',\n  initialState: initialState,\n  reducers: {\n    setIsAuth: function setIsAuth(state, action) {\n      state.isAuth = action.payload;\n    }\n  },\n  extraReducers: (_extraReducers = {}, _defineProperty(_extraReducers, fetchToken.pending.type, function (state) {\n    state.isFetch = true;\n    state.error = null;\n  }), _defineProperty(_extraReducers, fetchToken.fulfilled.type, function (state) {\n    state.isFetch = false;\n    state.isAuth = true;\n  }), _defineProperty(_extraReducers, fetchToken.rejected.type, function (state, action) {\n    state.isFetch = false;\n    state.error = action.payload;\n  }), _extraReducers)\n});\nvar setIsAuth = authSlice.actions.setIsAuth;\nexport { setIsAuth };\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/authReducer.ts"],"names":["createAsyncThunk","createSlice","userAPI","fetchToken","values","login","phone","password","response","data","initialState","isFetch","isAuth","error","authSlice","name","reducers","setIsAuth","state","action","payload","extraReducers","pending","type","fulfilled","rejected","actions","reducer"],"mappings":";;;;;;AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAAQC,OAAR,QAAsB,cAAtB;AAIA,OAAO,IAAMC,UAAU,GAAGH,gBAAgB,CACtC,sBADsC;AAAA,sEAEtC,iBAAOI,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC2BF,OAAO,CAACG,KAAR,CAAcD,MAAM,CAACE,KAArB,EAA4BF,MAAM,CAACG,QAAnC,CAD3B;;AAAA;AACUC,YAAAA,QADV;AAAA,6CAEWA,QAAQ,CAACC,IAFpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFsC;;AAAA;AAAA;AAAA;AAAA,IAAnC;AAcP,IAAMC,YAAuB,GAAG;AAC5BC,EAAAA,OAAO,EAAE,KADmB;AAE5BC,EAAAA,MAAM,EAAE,KAFoB;AAG5BC,EAAAA,KAAK,EAAE;AAHqB,CAAhC;AAMA,IAAMC,SAAS,GAAGb,WAAW,CAAC;AAC1Bc,EAAAA,IAAI,EAAE,MADoB;AAE1BL,EAAAA,YAAY,EAAZA,YAF0B;AAG1BM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAE,mBAACC,KAAD,EAAQC,MAAR,EAAmB;AAC1BD,MAAAA,KAAK,CAACN,MAAN,GAAeO,MAAM,CAACC,OAAtB;AACH;AAHK,GAHgB;AAQ1BC,EAAAA,aAAa,wDACRlB,UAAU,CAACmB,OAAX,CAAmBC,IADX,EACkB,UAACL,KAAD,EAAW;AAClCA,IAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACAO,IAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACH,GAJQ,mCAKRV,UAAU,CAACqB,SAAX,CAAqBD,IALb,EAKoB,UAACL,KAAD,EAAW;AACpCA,IAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,IAAAA,KAAK,CAACN,MAAN,GAAe,IAAf;AACH,GARQ,mCASRT,UAAU,CAACsB,QAAX,CAAoBF,IATZ,EASmB,UAACL,KAAD,EAAQC,MAAR,EAAmB;AAC3CD,IAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,IAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAArB;AACH,GAZQ;AARa,CAAD,CAA7B;IAwBcH,S,GAAaH,SAAS,CAACY,O,CAAvBT,S;;AACd,eAAeH,SAAS,CAACa,OAAzB","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {userAPI} from '@src/api/api'\r\nimport {AuthInputVals} from \"@src/components/elements/auth_reg_form/AuthRegForm\";\r\n\r\n\r\nexport const fetchToken = createAsyncThunk<any, AuthInputVals>(\r\n    'auth/fetchByIdStatus',\r\n    async (values) => {\r\n        const response = await userAPI.login(values.phone, values.password)\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport type AuthTypes = {\r\n    isFetch: boolean,\r\n    isAuth: boolean,\r\n    error?: any\r\n};\r\n\r\nconst initialState: AuthTypes = {\r\n    isFetch: false,\r\n    isAuth: false,\r\n    error: null\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        setIsAuth: (state, action) => {\r\n            state.isAuth = action.payload\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [fetchToken.pending.type]: (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        },\r\n        [fetchToken.fulfilled.type]: (state) => {\r\n            state.isFetch = false;\r\n            state.isAuth = true;\r\n        },\r\n        [fetchToken.rejected.type]: (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const {setIsAuth} = authSlice.actions;\r\nexport default authSlice.reducer;"]},"metadata":{},"sourceType":"module"}