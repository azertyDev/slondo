{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from \"@src/api/api\";\nconst initialState = {\n  isFetch: false,\n  error: null,\n  adType: {\n    id: null,\n    name: ''\n  },\n  category: {\n    id: null,\n    name: ''\n  },\n  data: {\n    id: null,\n    name: ''\n  }\n};\nexport const fetchAdDataForCreate = createAsyncThunk('createAdvrt/fetchAdDataForCreate', async ({\n  ctgryID,\n  subCtgryID,\n  lang\n}, {\n  rejectWithValue\n}) => {\n  try {\n    return await userAPI.getAdDataForCreate(ctgryID, subCtgryID, lang);\n  } catch (e) {\n    return rejectWithValue(e.message);\n  }\n});\nconst createAdvrtSlice = createSlice({\n  name: 'createAdvrt',\n  initialState,\n  reducers: {\n    createAdvrtDataAction: (state, action) => {\n      state.adType = action.payload;\n      state.category = action.payload.category;\n    },\n    resetCreateAdvrtDataAction: state => {\n      state.data = initialState.data;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAdDataForCreate.pending, state => {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchAdDataForCreate.fulfilled, (state, action) => {\n      state.isFetch = false;\n      state.data = action.payload;\n    });\n    builder.addCase(fetchAdDataForCreate.rejected, (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  resetCreateAdvrtDataAction,\n  createAdvrtDataAction\n} = createAdvrtSlice.actions;\nexport const createAdvrtReducer = createAdvrtSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/createAdvrtSlice.ts"],"names":["createAsyncThunk","createSlice","userAPI","initialState","isFetch","error","adType","id","name","category","data","fetchAdDataForCreate","ctgryID","subCtgryID","lang","rejectWithValue","getAdDataForCreate","e","message","createAdvrtSlice","reducers","createAdvrtDataAction","state","action","payload","resetCreateAdvrtDataAction","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","createAdvrtReducer","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAAQC,OAAR,QAAsB,cAAtB;AAKA,MAAMC,YAA2B,GAAG;AAChCC,EAAAA,OAAO,EAAE,KADuB;AAEhCC,EAAAA,KAAK,EAAE,IAFyB;AAGhCC,EAAAA,MAAM,EAAE;AACJC,IAAAA,EAAE,EAAE,IADA;AAEJC,IAAAA,IAAI,EAAE;AAFF,GAHwB;AAOhCC,EAAAA,QAAQ,EAAE;AACNF,IAAAA,EAAE,EAAE,IADE;AAENC,IAAAA,IAAI,EAAE;AAFA,GAPsB;AAWhCE,EAAAA,IAAI,EAAE;AACFH,IAAAA,EAAE,EAAE,IADF;AAEFC,IAAAA,IAAI,EAAE;AAFJ;AAX0B,CAApC;AAiBA,OAAO,MAAMG,oBAAoB,GAAGX,gBAAgB,CAChD,kCADgD,EAEhD,OAAO;AAACY,EAAAA,OAAD;AAAUC,EAAAA,UAAV;AAAsBC,EAAAA;AAAtB,CAAP,EAAoC;AAACC,EAAAA;AAAD,CAApC,KAA0D;AACtD,MAAI;AACA,WAAO,MAAMb,OAAO,CAACc,kBAAR,CAA2BJ,OAA3B,EAAoCC,UAApC,EAAgDC,IAAhD,CAAb;AACH,GAFD,CAEE,OAAOG,CAAP,EAAU;AACR,WAAOF,eAAe,CAACE,CAAC,CAACC,OAAH,CAAtB;AACH;AACJ,CAR+C,CAA7C;AAWP,MAAMC,gBAAgB,GAAGlB,WAAW,CAAC;AACjCO,EAAAA,IAAI,EAAE,aAD2B;AAEjCL,EAAAA,YAFiC;AAGjCiB,EAAAA,QAAQ,EAAE;AACNC,IAAAA,qBAAqB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtCD,MAAAA,KAAK,CAAChB,MAAN,GAAeiB,MAAM,CAACC,OAAtB;AACAF,MAAAA,KAAK,CAACb,QAAN,GAAiBc,MAAM,CAACC,OAAP,CAAef,QAAhC;AACH,KAJK;AAKNgB,IAAAA,0BAA0B,EAAGH,KAAD,IAAW;AACnCA,MAAAA,KAAK,CAACZ,IAAN,GAAaP,YAAY,CAACO,IAA1B;AACH;AAPK,GAHuB;AAYjCgB,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBjB,oBAAoB,CAACkB,OAArC,EAA+CP,KAAD,IAAW;AACrDA,MAAAA,KAAK,CAAClB,OAAN,GAAgB,IAAhB;AACAkB,MAAAA,KAAK,CAACjB,KAAN,GAAc,IAAd;AACH,KAHD;AAIAsB,IAAAA,OAAO,CAACC,OAAR,CAAgBjB,oBAAoB,CAACmB,SAArC,EAAgD,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAC/DD,MAAAA,KAAK,CAAClB,OAAN,GAAgB,KAAhB;AACAkB,MAAAA,KAAK,CAACZ,IAAN,GAAaa,MAAM,CAACC,OAApB;AACH,KAHD;AAIAG,IAAAA,OAAO,CAACC,OAAR,CAAgBjB,oBAAoB,CAACoB,QAArC,EAA+C,CAACT,KAAD,EAAQC,MAAR,KAAmB;AAC9DD,MAAAA,KAAK,CAAClB,OAAN,GAAgB,KAAhB;AACAkB,MAAAA,KAAK,CAACjB,KAAN,GAAckB,MAAM,CAACC,OAArB;AACH,KAHD;AAIH;AAzBgC,CAAD,CAApC;AA4BA,OAAO,MAAM;AAACC,EAAAA,0BAAD;AAA6BJ,EAAAA;AAA7B,IAAsDF,gBAAgB,CAACa,OAA7E;AACP,OAAO,MAAMC,kBAAkB,GAAGd,gBAAgB,CAACe,OAA5C","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {userAPI} from \"@src/api/api\";\r\nimport {CreateAdState} from '@root/interfaces/Advertisement';\r\nimport {CategoryIDs} from \"@root/interfaces/Categories\";\r\n\r\n\r\nconst initialState: CreateAdState = {\r\n    isFetch: false,\r\n    error: null,\r\n    adType: {\r\n        id: null,\r\n        name: ''\r\n    },\r\n    category: {\r\n        id: null,\r\n        name: ''\r\n    },\r\n    data: {\r\n        id: null,\r\n        name: ''\r\n    }\r\n};\r\n\r\nexport const fetchAdDataForCreate = createAsyncThunk<any, CategoryIDs>(\r\n    'createAdvrt/fetchAdDataForCreate',\r\n    async ({ctgryID, subCtgryID, lang}, {rejectWithValue}) => {\r\n        try {\r\n            return await userAPI.getAdDataForCreate(ctgryID, subCtgryID, lang);\r\n        } catch (e) {\r\n            return rejectWithValue(e.message);\r\n        }\r\n    }\r\n);\r\n\r\nconst createAdvrtSlice = createSlice({\r\n    name: 'createAdvrt',\r\n    initialState,\r\n    reducers: {\r\n        createAdvrtDataAction: (state, action) => {\r\n            state.adType = action.payload;\r\n            state.category = action.payload.category;\r\n        },\r\n        resetCreateAdvrtDataAction: (state) => {\r\n            state.data = initialState.data;\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchAdDataForCreate.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        })\r\n        builder.addCase(fetchAdDataForCreate.fulfilled, (state, action) => {\r\n            state.isFetch = false;\r\n            state.data = action.payload;\r\n        })\r\n        builder.addCase(fetchAdDataForCreate.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport const {resetCreateAdvrtDataAction, createAdvrtDataAction} = createAdvrtSlice.actions;\r\nexport const createAdvrtReducer = createAdvrtSlice.reducer;"]},"metadata":{},"sourceType":"module"}