{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { i18n } from \"@root/i18n\";\nimport { userAPI } from '@src/api/api';\nimport { CreateAncmnt } from \"./CreateAncmnt\";\nimport { MainLayout } from \"@src/components/MainLayout\";\nimport { AncmntFormContainer } from \"./ancmnt_form/AncmntFormContainer\";\nimport { setErrorMsgAction } from '@root/src/redux/slices/errorSlice';\nimport { AncmntTypesPage } from \"@src/components/announcement/ancmnt_types_page/AncmntTypesPage\";\nimport { categoryDataNormalization } from \"@src/helpers\";\nimport { AncmntHeader } from './ancmnt_header/AncmntHeader';\nimport { SuccessAncmnt } from \"@src/components/announcement/create_ancmnt/ancmnt_form/success_ancmnt/SuccessAncmnt\";\nconst steps = ['Тип объявления', 'Категория', 'Заполнение', 'Проверка'];\nconst initAncmntTypeStates = {\n  isFetch: false,\n  types: [{\n    id: 1,\n    name: \"Обычный\",\n    currency: [{\n      id: 1,\n      name: \"уе\"\n    }, {\n      id: 2,\n      name: \"sum\"\n    }],\n    expired: [{\n      id: 3,\n      expiration_at: 720\n    }],\n    image: {\n      url: '/img/adv-background.png'\n    }\n  }, {\n    id: 2,\n    name: \"Аукцион\",\n    currency: [{\n      id: 3,\n      name: \"sum\"\n    }],\n    expired: [{\n      id: 1,\n      expiration_at: 2\n    }, {\n      id: 2,\n      expiration_at: 720\n    }],\n    image: {\n      url: '/img/lot-background.png'\n    }\n  }, {\n    id: 3,\n    name: \"Продвинутый аукцион\",\n    currency: [{\n      id: 4,\n      name: \"sum\"\n    }],\n    expired: [{\n      id: 4,\n      expiration_at: 2\n    }, {\n      id: 5,\n      expiration_at: 720\n    }],\n    image: {\n      url: '/img/advanced-lot-background.png'\n    }\n  }]\n};\nexport const CreateAncmntContainer = ({\n  t\n}) => {\n  const lang = i18n.language;\n  const initAncmntTypeState = {\n    id: null,\n    name: '',\n    currency: [{\n      id: null,\n      name: ''\n    }],\n    expired: [{\n      id: null,\n      expiration_at: null\n    }],\n    image: {\n      url: ''\n    }\n  };\n  const initCreateAncmntState = {\n    isFetch: false,\n    error: null,\n    category: {\n      id: null,\n      name: '',\n      image: {\n        url: {\n          default: ''\n        }\n      },\n      icon: {\n        id: null,\n        url: ''\n      },\n      model: [],\n      has_auction: null\n    }\n  };\n  const categoriesList = useSelector(({\n    categories\n  }) => {\n    return categoryDataNormalization(categories.list); // return categories.list;\n  });\n  const dispatch = useDispatch();\n  const {\n    0: ancmntType,\n    1: setAncmntType\n  } = useState(initAncmntTypeState);\n  const {\n    0: ancmntTypes,\n    1: setAncmntTypes\n  } = useState(initAncmntTypeStates);\n  const {\n    0: createAncmnt,\n    1: setCreateAncmnt\n  } = useState(initCreateAncmntState);\n  const {\n    0: subLvlCtgrs,\n    1: setSubLvlCtgrs\n  } = useState([]);\n  const {\n    0: activeStep,\n    1: setActiveStep\n  } = useState(0);\n  const {\n    0: searchTxt,\n    1: setSearchTxt\n  } = useState('');\n\n  const handleNextStep = () => {\n    setActiveStep(prevStep => prevStep + 1);\n  };\n\n  const handlePrevStep = () => {\n    setActiveStep(prevStep => prevStep - 1);\n  };\n\n  const handleResetSteps = () => {\n    setActiveStep(0);\n  }; // const setAncmntsTypes = async () => {\n  //     try {\n  //         const types = userAPI.getAncmntsTypes(lang);\n  //         await setFetchedData(\n  //             ancmntTypes,\n  //             setAncmntTypes,\n  //             {types},\n  //         );\n  //     } catch (e) {\n  //         dispatch(setErrorMsgAction(e.message));\n  //         setAncmntTypes({...ancmntTypes, isFetch: false});\n  //     }\n  // };\n\n\n  const handleAncmntType = selectedAncmntType => () => {\n    handleNextStep();\n    setAncmntType(selectedAncmntType);\n  };\n\n  const handleSearch = ({\n    target\n  }) => {\n    setSearchTxt(target.value);\n  }; // const setFoundCategoriesChilds = () => {\n  //     const model = !!searchTxt\n  //         ? categorySearchHelper(searchTxt, categoriesList)\n  //         : [];\n  //\n  //     setCreateAncmnt({\n  //         ...createAncmnt,\n  //         category: {\n  //             ...initCreateAncmntState.category,\n  //             model\n  //         }\n  //     });\n  // };\n\n\n  const handleCategory = category => () => {\n    try {\n      let list = [];\n\n      if (category.type) {\n        list = category.type;\n      } else if (category.model) {\n        list = category.model;\n        setCreateAncmnt(category);\n      }\n\n      setSubLvlCtgrs(list);\n    } catch (e) {\n      dispatch(setErrorMsgAction(e.message));\n      setCreateAncmnt(_objectSpread(_objectSpread({}, createAncmnt), {}, {\n        isFetch: false\n      }));\n    }\n  };\n\n  const handleBackCtgr = () => {\n    setSubLvlCtgrs(createAncmnt.category.model);\n  };\n\n  const handleSubCategory = (parent, child_id, name) => async () => {\n    try {\n      setCreateAncmnt(_objectSpread(_objectSpread({}, createAncmnt), {}, {\n        isFetch: true\n      }));\n      const data = await userAPI.getDataForCreateAncmnt(parent.id, child_id, lang);\n      setCreateAncmnt(_objectSpread(_objectSpread({}, createAncmnt), {}, {\n        isFetch: false // subCategory: {\n        //     id: child_id,\n        //     name,\n        //     data,\n        //     parent\n        // }\n\n      }));\n      handleNextStep();\n    } catch (e) {\n      dispatch(setErrorMsgAction(e.message));\n      setCreateAncmnt(_objectSpread(_objectSpread({}, createAncmnt), {}, {\n        isFetch: false\n      }));\n    }\n  };\n\n  const handleResetCreateData = () => {\n    setSearchTxt('');\n    setCreateAncmnt(initCreateAncmntState);\n  };\n\n  const handleResetAncmntType = () => {\n    handleResetSteps();\n    handleResetCreateData();\n    setAncmntType(initAncmntTypeState);\n  };\n\n  const handleBackBtn = () => {\n    handlePrevStep();\n\n    switch (activeStep) {\n      case 1:\n        handleResetAncmntType();\n        break;\n\n      case 2:\n        handleResetCreateData();\n    }\n  };\n\n  const setCreateAncmntByLang = async () => {// const [ctgrByLang] = categoriesList.filter(ctgr => ctgr.id === subCategory.parent.id);\n    // ctgrByLang && setCreateAncmnt({\n    //     ...createAncmnt,\n    //     category: ctgrByLang,\n    // });\n    // if (subCategory.id !== null) {\n    //     const [subCtgrByLang] = ctgrByLang.model.filter(subCtgr => subCtgr.id === subCategory.id);\n    //\n    //     try {\n    //         setCreateAncmnt({\n    //             ...createAncmnt,\n    //             isFetch: true\n    //         });\n    //\n    //         const data = await userAPI.getAdDataForCreateAncmnt(subCategory.parent.id, subCategory.id, lang);\n    //\n    //         setCreateAncmnt({\n    //             ...createAncmnt,\n    //             isFetch: false,\n    //             subCategory: {\n    //                 ...subCtgrByLang,\n    //                 data\n    //             }\n    //         });\n    //     } catch (e) {\n    //         dispatch(setErrorMsgAction(e.message));\n    //         setCreateAncmnt({...createAncmnt, isFetch: false});\n    //     }\n    // }\n  };\n\n  const renderPageByActiveStep = () => {\n    switch (activeStep) {\n      case 0:\n        return __jsx(AncmntTypesPage, {\n          ancmntTypes: ancmntTypes.types,\n          handleAncmntType: handleAncmntType\n        });\n\n      case 1:\n        return __jsx(CreateAncmnt, {\n          ancmntType: ancmntType,\n          createAncmnt: createAncmnt,\n          categoriesList: categoriesList,\n          subLvlCtgrs: subLvlCtgrs,\n          searchTxt: searchTxt,\n          handleBackCtgr: handleBackCtgr,\n          handleSearch: handleSearch,\n          handleCategory: handleCategory,\n          handleSubCategory: handleSubCategory\n        });\n\n      case 4:\n        return __jsx(SuccessAncmnt, {\n          handleCreateNewAncmnt: handleResetAncmntType\n        });\n\n      default:\n        return __jsx(AncmntFormContainer, {\n          t: t,\n          activeStep: activeStep,\n          ancmntType: ancmntType,\n          createAncmnt: createAncmnt,\n          handleNextStep: handleNextStep\n        });\n    }\n  }; // useEffect(() => {\n  //    setAncmntsTypes();\n  // }, []);\n  // useEffect(() => {\n  //     setCreateAncmntByLang();\n  // }, [categoriesList[0].name]);\n  // useEffect(() => {\n  //     setFoundCategoriesChilds();\n  // }, [searchTxt]);\n  // console.log(createAncmnt)\n  // console.log(categoriesList)\n\n\n  return __jsx(MainLayout, null, activeStep !== 0 && activeStep !== 4 && __jsx(AncmntHeader, {\n    steps: steps,\n    activeStep: activeStep,\n    handleBackBtn: handleBackBtn\n  }), renderPageByActiveStep());\n};","map":null,"metadata":{},"sourceType":"module"}