{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(workerAuth),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAuth);\n\nimport { userApi } from '../../api/api';\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { FETCH_TOKEN, authActions } from \"../actions/authActions\"; // Self data saga\n\nvar fetchAuthBegin = authActions.fetchAuthBegin,\n    fetchAuthSuccess = authActions.fetchAuthSuccess,\n    fetchAuthFailure = authActions.fetchAuthFailure;\n\nfunction workerAuth(actions) {\n  var payload, token;\n  return _regeneratorRuntime.wrap(function workerAuth$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = actions.payload;\n          _context.prev = 1;\n          _context.next = 4;\n          return put(fetchAuthBegin());\n\n        case 4:\n          _context.next = 6;\n          return call(userApi.login, payload.phone, payload.password);\n\n        case 6:\n          token = _context.sent;\n          _context.next = 9;\n          return put(fetchAuthSuccess({\n            token: token\n          }));\n\n        case 9:\n          _context.next = 15;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 15;\n          return put(fetchAuthFailure(_context.t0.message));\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 11]]);\n}\n\nexport function watchAuth() {\n  return _regeneratorRuntime.wrap(function watchAuth$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(FETCH_TOKEN, workerAuth);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/sagas/authSaga.ts"],"names":["workerAuth","watchAuth","userApi","call","put","takeLatest","FETCH_TOKEN","authActions","fetchAuthBegin","fetchAuthSuccess","fetchAuthFailure","actions","payload","login","phone","password","token","message"],"mappings":";;oDAQUA,U;qDAWOC,S;;AAnBjB,SAAQC,OAAR,QAAsB,eAAtB;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,wBAAvC,C,CAGA;;IACOC,c,GAAsDD,W,CAAtDC,c;IAAgBC,gB,GAAsCF,W,CAAtCE,gB;IAAkBC,gB,GAAoBH,W,CAApBG,gB;;AAEzC,SAAUV,UAAV,CAAqBW,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AACWC,UAAAA,OADX,GACsBD,OADtB,CACWC,OADX;AAAA;AAAA;AAGQ,iBAAMR,GAAG,CAACI,cAAc,EAAf,CAAT;;AAHR;AAAA;AAIsB,iBAAML,IAAI,CAACD,OAAO,CAACW,KAAT,EAAgBD,OAAO,CAACE,KAAxB,EAA+BF,OAAO,CAACG,QAAvC,CAAV;;AAJtB;AAIcC,UAAAA,KAJd;AAAA;AAKQ,iBAAMZ,GAAG,CAACK,gBAAgB,CAAC;AAACO,YAAAA,KAAK,EAALA;AAAD,WAAD,CAAjB,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOQ,iBAAMZ,GAAG,CAACM,gBAAgB,CAAC,YAAEO,OAAH,CAAjB,CAAT;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,OAAO,SAAUhB,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMI,UAAU,CAACC,WAAD,EAAcN,UAAd,CAAhB;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {userApi} from '../../api/api'\r\nimport {call, put, takeLatest} from \"redux-saga/effects\"\r\nimport {FETCH_TOKEN, authActions} from \"../actions/authActions\"\r\n\r\n\r\n// Self data saga\r\nconst {fetchAuthBegin, fetchAuthSuccess, fetchAuthFailure} = authActions;\r\n\r\nfunction* workerAuth(actions) {\r\n    const {payload} = actions;\r\n    try {\r\n        yield put(fetchAuthBegin());\r\n        const token = yield call(userApi.login, payload.phone, payload.password);\r\n        yield put(fetchAuthSuccess({token}));\r\n    } catch (e) {\r\n        yield put(fetchAuthFailure(e.message));\r\n    }\r\n}\r\n\r\nexport function* watchAuth() {\r\n    yield takeLatest(FETCH_TOKEN, workerAuth);\r\n}"]},"metadata":{},"sourceType":"module"}