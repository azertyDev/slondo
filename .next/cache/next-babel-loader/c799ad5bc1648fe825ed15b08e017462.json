{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { DragDropContext, resetServerContext } from 'react-beautiful-dnd';\nimport { TOTAL_FILES_SIZE_LIMIT } from '@src/constants';\nimport { CustomDroppable } from \"../preview_photos/CustomDroppable\";\nimport { initPhoto } from \"../ancmnt_form/AncmntFormContainer\";\n\nvar sizeCounter = function sizeCounter(files) {\n  return files.reduce(function (total, _ref) {\n    var size = _ref.size;\n\n    if (size) {\n      total += total + size;\n    }\n\n    return total;\n  }, 0);\n};\n\nexport var PreviewPhotos = function PreviewPhotos(props) {\n  resetServerContext();\n  var values = props.values,\n      setValues = props.setValues,\n      isPreview = props.isPreview;\n  var files = values.files;\n\n  var handleOnDragEnd = function handleOnDragEnd(_ref2) {\n    var destination = _ref2.destination,\n        source = _ref2.source;\n    if (!destination) return;\n    var items = files;\n\n    var _items$splice = items.splice(source.index, 1),\n        _items$splice2 = _slicedToArray(_items$splice, 1),\n        reorderedItem = _items$splice2[0];\n\n    items.splice(destination.index, 0, reorderedItem);\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      files: items\n    }));\n  };\n\n  var handleUploadFile = function handleUploadFile(_ref3) {\n    var target = _ref3.target;\n    var photos = Array.from(target.files);\n    var totalFilesSize = sizeCounter(files);\n    var selectedFilesSize = sizeCounter(photos);\n\n    if (totalFilesSize + selectedFilesSize <= TOTAL_FILES_SIZE_LIMIT) {\n      photos = photos.map(function (photo) {\n        return {\n          file: photo,\n          url: URL.createObjectURL(photo)\n        };\n      });\n      files.splice(-photos.length, photos.length);\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        files: [].concat(_toConsumableArray(photos), _toConsumableArray(files))\n      }));\n    }\n  };\n\n  var removeFile = function removeFile(url) {\n    return function () {\n      files.map(function (item, index) {\n        if (item.url === url) {\n          files.splice(index, 1);\n          setValues(_objectSpread(_objectSpread({}, values), {}, {\n            files: [].concat(_toConsumableArray(files), [initPhoto])\n          }));\n        }\n      });\n    };\n  };\n\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    disabled: isPreview,\n    onChange: handleUploadFile,\n    multiple: true,\n    accept: \"image/png,image/jpeg\"\n  }), __jsx(DragDropContext, {\n    enableDefaultSensors: true,\n    onDragEnd: handleOnDragEnd\n  }, __jsx(CustomDroppable, {\n    droppableId: \"firstRow\",\n    files: files,\n    isPreview: isPreview,\n    removeFile: removeFile\n  }), __jsx(CustomDroppable, {\n    droppableId: \"secondRow\",\n    files: files,\n    isPreview: isPreview,\n    removeFile: removeFile\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}