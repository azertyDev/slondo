{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from \"@src/api/api\";\nconst initialState = {\n  isFetch: false,\n  error: null,\n  data: []\n};\nexport const fetchAdDataForCreate = createAsyncThunk('createAdvrt/fetchAdDataForCreate', async ({\n  ctgryID,\n  subCtgryID,\n  lang\n}, {\n  rejectWithValue\n}) => {\n  try {\n    return await userAPI.getAdDataForCreate(ctgryID, subCtgryID, lang);\n  } catch (e) {\n    return rejectWithValue(e.message);\n  }\n});\nconst createAdvrtSlice = createSlice({\n  name: 'createAdvrt',\n  initialState,\n  reducers: {\n    adTypeAction: () => {},\n    resetCreateAdvrtDataAction: state => {\n      state.data = [];\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAdDataForCreate.pending, state => {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchAdDataForCreate.fulfilled, (state, action) => {\n      state.isFetch = false;\n      state.data = action.payload;\n    });\n    builder.addCase(fetchAdDataForCreate.rejected, (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  resetCreateAdvrtDataAction\n} = createAdvrtSlice.actions;\nexport const createAdvrtReducer = createAdvrtSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/createAdvrtSlice.ts"],"names":["createAsyncThunk","createSlice","userAPI","initialState","isFetch","error","data","fetchAdDataForCreate","ctgryID","subCtgryID","lang","rejectWithValue","getAdDataForCreate","e","message","createAdvrtSlice","name","reducers","adTypeAction","resetCreateAdvrtDataAction","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","createAdvrtReducer","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAAQC,OAAR,QAAsB,cAAtB;AAKA,MAAMC,YAA2B,GAAG;AAChCC,EAAAA,OAAO,EAAE,KADuB;AAEhCC,EAAAA,KAAK,EAAE,IAFyB;AAGhCC,EAAAA,IAAI,EAAE;AAH0B,CAApC;AAMA,OAAO,MAAMC,oBAAoB,GAAGP,gBAAgB,CAChD,kCADgD,EAEhD,OAAO;AAACQ,EAAAA,OAAD;AAAUC,EAAAA,UAAV;AAAsBC,EAAAA;AAAtB,CAAP,EAAoC;AAACC,EAAAA;AAAD,CAApC,KAA0D;AACtD,MAAI;AACA,WAAO,MAAMT,OAAO,CAACU,kBAAR,CAA2BJ,OAA3B,EAAoCC,UAApC,EAAgDC,IAAhD,CAAb;AACH,GAFD,CAEE,OAAOG,CAAP,EAAU;AACR,WAAOF,eAAe,CAACE,CAAC,CAACC,OAAH,CAAtB;AACH;AACJ,CAR+C,CAA7C;AAWP,MAAMC,gBAAgB,GAAGd,WAAW,CAAC;AACjCe,EAAAA,IAAI,EAAE,aAD2B;AAEjCb,EAAAA,YAFiC;AAGjCc,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,EAAE,MAAM,CAEnB,CAHK;AAINC,IAAAA,0BAA0B,EAAGC,KAAD,IAAW;AACnCA,MAAAA,KAAK,CAACd,IAAN,GAAa,EAAb;AACH;AANK,GAHuB;AAWjCe,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBhB,oBAAoB,CAACiB,OAArC,EAA+CJ,KAAD,IAAW;AACrDA,MAAAA,KAAK,CAAChB,OAAN,GAAgB,IAAhB;AACAgB,MAAAA,KAAK,CAACf,KAAN,GAAc,IAAd;AACH,KAHD;AAIAiB,IAAAA,OAAO,CAACC,OAAR,CAAgBhB,oBAAoB,CAACkB,SAArC,EAAgD,CAACL,KAAD,EAAQM,MAAR,KAAmB;AAC/DN,MAAAA,KAAK,CAAChB,OAAN,GAAgB,KAAhB;AACAgB,MAAAA,KAAK,CAACd,IAAN,GAAaoB,MAAM,CAACC,OAApB;AACH,KAHD;AAIAL,IAAAA,OAAO,CAACC,OAAR,CAAgBhB,oBAAoB,CAACqB,QAArC,EAA+C,CAACR,KAAD,EAAQM,MAAR,KAAmB;AAC9DN,MAAAA,KAAK,CAAChB,OAAN,GAAgB,KAAhB;AACAgB,MAAAA,KAAK,CAACf,KAAN,GAAcqB,MAAM,CAACC,OAArB;AACH,KAHD;AAIH;AAxBgC,CAAD,CAApC;AA2BA,OAAO,MAAM;AAACR,EAAAA;AAAD,IAA+BJ,gBAAgB,CAACc,OAAtD;AACP,OAAO,MAAMC,kBAAkB,GAAGf,gBAAgB,CAACgB,OAA5C","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {userAPI} from \"@src/api/api\";\r\nimport {CreateAdState} from '@root/interfaces/Advertisement';\r\nimport {CategoryIDs} from \"@root/interfaces/Categories\";\r\n\r\n\r\nconst initialState: CreateAdState = {\r\n    isFetch: false,\r\n    error: null,\r\n    data: []\r\n};\r\n\r\nexport const fetchAdDataForCreate = createAsyncThunk<any, CategoryIDs>(\r\n    'createAdvrt/fetchAdDataForCreate',\r\n    async ({ctgryID, subCtgryID, lang}, {rejectWithValue}) => {\r\n        try {\r\n            return await userAPI.getAdDataForCreate(ctgryID, subCtgryID, lang);\r\n        } catch (e) {\r\n            return rejectWithValue(e.message);\r\n        }\r\n    }\r\n);\r\n\r\nconst createAdvrtSlice = createSlice({\r\n    name: 'createAdvrt',\r\n    initialState,\r\n    reducers: {\r\n        adTypeAction: () => {\r\n\r\n        },\r\n        resetCreateAdvrtDataAction: (state) => {\r\n            state.data = [];\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchAdDataForCreate.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        })\r\n        builder.addCase(fetchAdDataForCreate.fulfilled, (state, action) => {\r\n            state.isFetch = false;\r\n            state.data = action.payload;\r\n        })\r\n        builder.addCase(fetchAdDataForCreate.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport const {resetCreateAdvrtDataAction} = createAdvrtSlice.actions;\r\nexport const createAdvrtReducer = createAdvrtSlice.reducer;"]},"metadata":{},"sourceType":"module"}