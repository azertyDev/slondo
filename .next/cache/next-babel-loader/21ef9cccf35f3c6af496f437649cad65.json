{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { rootReducer } from \"./reducers/rootReducer\";\nimport rootSaga from './sagas/rootSaga';\nconst sagaMiddleware = createSagaMiddleware();\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    const {\n      composeWithDevTools\n    } = require('redux-devtools-extension');\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nconst enhancer = composeWithDevTools(applyMiddleware(sagaMiddleware)); // create a makeStore function\n\nconst makeStore = () => {\n  const store = createStore(rootReducer, bindMiddleware);\n  sagaMiddleware.run(rootSaga);\n  return store;\n}; // export an assembled wrapper\n\n\nexport default makeStore;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/store.ts"],"names":["createStore","applyMiddleware","createSagaMiddleware","composeWithDevTools","rootReducer","rootSaga","sagaMiddleware","bindMiddleware","middleware","require","enhancer","makeStore","store","run"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AAEA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,OAAOC,QAAP,MAAqB,kBAArB;AAGA,MAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;;AAEA,MAAMK,cAAc,GAAIC,UAAD,IAAgB;AACnC,YAA2C;AACvC,UAAM;AAAEL,MAAAA;AAAF,QAA0BM,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAON,mBAAmB,CAACF,eAAe,CAAC,GAAGO,UAAJ,CAAhB,CAA1B;AACH;;AACD,SAAOP,eAAe,CAAC,GAAGO,UAAJ,CAAtB;AACH,CAND;;AAQA,MAAME,QAAQ,GAAGP,mBAAmB,CAChCF,eAAe,CAACK,cAAD,CADiB,CAApC,C,CAIA;;AACA,MAAMK,SAAoB,GAAG,MAAM;AAC/B,QAAMC,KAAK,GAAGZ,WAAW,CAACI,WAAD,EAAcG,cAAd,CAAzB;AACAD,EAAAA,cAAc,CAACO,GAAf,CAAmBR,QAAnB;AACA,SAAOO,KAAP;AACH,CAJD,C,CAMA;;;AACA,eAAeD,SAAf","sourcesContent":["import {createStore, applyMiddleware} from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport {MakeStore} from 'next-redux-wrapper'\r\nimport {rootReducer} from \"./reducers/rootReducer\"\r\nimport rootSaga from './sagas/rootSaga'\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst bindMiddleware = (middleware) => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        const { composeWithDevTools } = require('redux-devtools-extension')\r\n        return composeWithDevTools(applyMiddleware(...middleware))\r\n    }\r\n    return applyMiddleware(...middleware)\r\n}\r\n\r\nconst enhancer = composeWithDevTools(\r\n    applyMiddleware(sagaMiddleware),\r\n);\r\n\r\n// create a makeStore function\r\nconst makeStore: MakeStore = () => {\r\n    const store = createStore(rootReducer, bindMiddleware);\r\n    sagaMiddleware.run(rootSaga);\r\n    return store\r\n};\r\n\r\n// export an assembled wrapper\r\nexport default makeStore;"]},"metadata":{},"sourceType":"module"}