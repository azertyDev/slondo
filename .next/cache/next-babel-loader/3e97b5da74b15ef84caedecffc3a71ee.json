{"ast":null,"code":"import Axios from 'axios';\nimport Cookies from 'universal-cookie';\nvar cookies = new Cookies();\n\nvar _ref = cookies.get('token') || {\n  token: ''\n},\n    token = _ref.token;\n\nvar productionIP = 'http://54.205.72.116/api/';\nvar testingIP = 'http://192.168.1.60/slondo/public/api/';\nvar instance = Axios.create({\n  withCredentials: true,\n  baseURL: productionIP\n});\nvar config = {\n  headers: {\n    'Content-Type': 'multipart/form-data',\n    // 'Authorization': `Bearer ${token}`,\n    \"Access-Control-Allow-Origin\": \"*\"\n  }\n};\nexport var userAPI = {\n  login: function login(phone, password) {\n    var form = new FormData();\n    form.set('phone', phone);\n    form.set('password', password);\n    return instance.post(\"login\", form, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(function (res) {\n      return res.data;\n    })[\"catch\"](function (err) {\n      throw err;\n    });\n  },\n  getCategories: function getCategories(lang) {\n    return instance.get(\"categories/main?lang=\".concat(lang)).then(function (res) {\n      return res.data;\n    })[\"catch\"](function (err) {\n      throw err;\n    });\n  },\n  getAdDataForCreate: function getAdDataForCreate(ctgryID, subCtgryID, lang) {\n    return instance.get(\"subcategory?parent_id=\".concat(ctgryID, \"&lang=\").concat(lang, \"&child_id=\").concat(subCtgryID)).then(function (res) {\n      return res.data;\n    })[\"catch\"](function (err) {\n      throw err;\n    });\n  },\n  getCardData: function getCardData(itemsPerPage, page, type, lang) {\n    return instance.get(\"ads/all?itemsPerPage=\".concat(itemsPerPage, \"&page=\").concat(page, \"&type=\").concat(type, \"&lang=\").concat(lang)).then(function (res) {\n      return res.data;\n    })[\"catch\"](function (err) {\n      throw err;\n    });\n  },\n  getAddById: function getAddById(ads_id, lang) {\n    return instance.get(\"getAddById?ads_id=\".concat(ads_id, \"&lang=\").concat(lang)).then(function (res) {\n      return res.data;\n    })[\"catch\"](function (err) {\n      throw err;\n    });\n  },\n  getLocations: function getLocations(lang) {\n    return instance.get(\"location?lang=\".concat(lang)).then(function (res) {\n      return res.data;\n    })[\"catch\"](function (err) {\n      throw err;\n    });\n  },\n  createAdvrt: function createAdvrt(data) {\n    return instance.post(\"regular/ads/new\", data).then(function (res) {\n      return res.data;\n    })[\"catch\"](function (err) {\n      throw err;\n    });\n  },\n  getAdTypes: function getAdTypes(lang) {\n    return instance.get(\"ads/type?lang=\".concat(lang)).then(function (res) {\n      return res.data;\n    })[\"catch\"](function (err) {\n      throw err;\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/api/api.tsx"],"names":["Axios","Cookies","cookies","get","token","productionIP","testingIP","instance","create","withCredentials","baseURL","config","headers","userAPI","login","phone","password","form","FormData","set","post","then","res","data","err","getCategories","lang","getAdDataForCreate","ctgryID","subCtgryID","getCardData","itemsPerPage","page","type","getAddById","ads_id","getLocations","createAdvrt","getAdTypes"],"mappings":"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","sourcesContent":["import Axios from 'axios';\r\nimport Cookies from 'universal-cookie';\r\nimport {LocationsDataTypes} from \"@root/interfaces/Locations\";\r\nimport {CategoryType} from \"@root/interfaces/Categories\";\r\n\r\n\r\nconst cookies = new Cookies();\r\nconst {token} = cookies.get('token') || {token: ''};\r\n\r\nconst productionIP = 'http://54.205.72.116/api/';\r\nconst testingIP = 'http://192.168.1.60/slondo/public/api/';\r\n\r\nconst instance = Axios.create({\r\n    withCredentials: true,\r\n    baseURL: productionIP,\r\n});\r\n\r\nconst config = {\r\n    headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n        // 'Authorization': `Bearer ${token}`,\r\n        \"Access-Control-Allow-Origin\": \"*\"\r\n    }\r\n};\r\n\r\nexport const userAPI = {\r\n    login: (phone: string, password: string): Promise<unknown> => {\r\n        const form = new FormData();\r\n        form.set('phone', phone);\r\n        form.set('password', password);\r\n        return instance\r\n            .post(`login`, form, {\r\n                headers: {'Content-Type': 'multipart/form-data'},\r\n            })\r\n            .then((res) => res.data)\r\n            .catch((err) => {\r\n                throw err;\r\n            });\r\n    },\r\n    getCategories: (lang: string): Promise<CategoryType[]> => {\r\n        return instance.get(`categories/main?lang=${lang}`)\r\n            .then(res => res.data)\r\n            .catch(err => {\r\n                throw err\r\n            })\r\n    },\r\n    getAdDataForCreate: (ctgryID: number, subCtgryID: number, lang: string): Promise<unknown> => {\r\n        return instance.get(`subcategory?parent_id=${ctgryID}&lang=${lang}&child_id=${subCtgryID}`)\r\n            .then(res => res.data)\r\n            .catch(err => {\r\n                throw err\r\n            })\r\n    },\r\n    getCardData: (itemsPerPage: number, page: number, type: string, lang: string): Promise<any> => {\r\n        return instance.get(`ads/all?itemsPerPage=${itemsPerPage}&page=${page}&type=${type}&lang=${lang}`)\r\n            .then((res) => res.data)\r\n            .catch((err) => {\r\n                throw err;\r\n            });\r\n    },\r\n    getAddById: (ads_id, lang): Promise<any> => {\r\n        return instance.get(`getAddById?ads_id=${ads_id}&lang=${lang}`)\r\n            .then((res) => res.data)\r\n            .catch((err) => {\r\n                throw err;\r\n            })\r\n    },\r\n    getLocations: (lang: string): Promise<LocationsDataTypes> => {\r\n        return instance.get(`location?lang=${lang}`)\r\n            .then(res => res.data)\r\n            .catch(err => {\r\n                throw err\r\n            })\r\n    },\r\n    createAdvrt: (data: any): Promise<LocationsDataTypes> => {\r\n        return instance.post(`regular/ads/new`, data)\r\n            .then(res => res.data)\r\n            .catch(err => {\r\n                throw err\r\n            })\r\n    },\r\n    getAdTypes: (lang: string) => {\r\n        return instance.get(`ads/type?lang=${lang}`)\r\n            .then(res => res.data)\r\n            .catch(err => {\r\n                throw err\r\n            })\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}