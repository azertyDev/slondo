{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { CustomCheckbox } from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\nimport { CustomFormikField } from \"@src/components/elements/custom_formik_field/CustomFormikField\";\nimport { isRequired } from '@root/validation_schemas/createAdvrtSchema';\nimport { useStyles } from './useStyles';\nexport const AdvrtParamsBlock = props => {\n  const {\n    isPreview,\n    createAdvrt,\n    values,\n    setValues,\n    errors,\n    touched,\n    onBlur,\n    handleMenuItem,\n    handleListItem,\n    handleParamsInput,\n    handleParamsCheckbox\n  } = props;\n  const {\n    0: initReqFields,\n    1: setInitReqFields\n  } = useState({});\n  const initReqFieldsLen = Object.keys(initReqFields).length;\n  const {\n    subCategory\n  } = createAdvrt;\n  const {\n    adParams\n  } = values;\n  const adParamsLen = Object.keys(adParams).length;\n  const data = isPreview ? adParams : subCategory.data;\n  const classes = useStyles({\n    isPreview\n  });\n  const paramsBlock = result();\n  useEffect(() => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      adParams: _objectSpread(_objectSpread({}, adParams), initReqFields)\n    }));\n  }, [adParamsLen, initReqFieldsLen]);\n  return __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    className: classes.root\n  }, paramsBlock);\n\n  function result() {\n    return Object.keys(data).map(key => {\n      var _adParams$year, _adParams$mileage;\n\n      return __jsx(Fragment, {\n        key: key\n      }, !isPreview && adParams[key] ? __jsx(React.Fragment, null, listGenerator(data[key], key), Object.keys(adParams[key]).map(innerKey => {\n        if (Array.isArray(adParams[key][innerKey]) && adParams[key][innerKey].length) {\n          return listGenerator(adParams[key][innerKey], innerKey);\n        }\n      })) : listGenerator(data[key], key), key === 'body' && __jsx(React.Fragment, null, __jsx(Grid, {\n        item: true,\n        container: true,\n        xs: 12,\n        sm: 6,\n        className: classes.gridItem\n      }, __jsx(Typography, {\n        variant: \"subtitle1\"\n      }, __jsx(\"strong\", null, \"year\", isRequired(key) && __jsx(\"span\", {\n        className: \"error-text\"\n      }, \"*\")), errors.adParams && errors.adParams.year && touched.year && __jsx(\"span\", {\n        className: \"error-text\"\n      }, \" \", errors.adParams.year)), isPreview ? __jsx(Typography, null, adParams.year) : __jsx(CustomFormikField, {\n        className: errors.adParams && errors.adParams.year && touched.year ? 'error-border' : '',\n        name: \"year\",\n        placeholder: \"\\u0413\\u043E\\u0434 \\u0432\\u044B\\u043F\\u0443\\u0441\\u043A\\u0430\",\n        value: (_adParams$year = adParams.year) !== null && _adParams$year !== void 0 ? _adParams$year : '',\n        onChange: handleParamsInput('year')\n      })), __jsx(Grid, {\n        item: true,\n        container: true,\n        xs: 12,\n        sm: 6,\n        className: classes.gridItem\n      }, __jsx(Typography, {\n        variant: \"subtitle1\"\n      }, __jsx(\"strong\", null, \"mileage\", isRequired(key) && __jsx(\"span\", {\n        className: \"error-text\"\n      }, \"*\")), errors.adParams && errors.adParams.mileage && touched.mileage && __jsx(\"span\", {\n        className: \"error-text\"\n      }, \" \", errors.adParams.mileage)), isPreview ? __jsx(Typography, null, adParams.mileage) : __jsx(CustomFormikField, {\n        className: errors.adParams && errors.adParams.mileage && touched.mileage ? 'error-border' : '',\n        name: \"mileage\",\n        placeholder: \"\\u041F\\u0440\\u043E\\u0431\\u0435\\u0433\",\n        value: (_adParams$mileage = adParams.mileage) !== null && _adParams$mileage !== void 0 ? _adParams$mileage : '',\n        onChange: handleParamsInput('mileage')\n      }))));\n    });\n  }\n\n  function listGenerator(data, key) {\n    let fields;\n\n    if (isRequired(key) || key === 'adsParams' && data[0].condition && data[0].condition.length) {\n      if (key !== 'adsParams') {\n        setInitReqFields(_objectSpread(_objectSpread({}, initReqFields), {}, {\n          [key]: {\n            id: null,\n            name: 'Не выбрано'\n          }\n        }));\n      } else {\n        key = 'condition';\n        data = data[0].condition;\n        setInitReqFields(_objectSpread(_objectSpread({}, initReqFields), {}, {\n          [key]: data[0]\n        }));\n      }\n    }\n\n    const isExcludedRows = key !== 'id' && key !== 'name' && key !== 'adsParams';\n    const isOptions = key === 'safety' || key === 'multimedia' || key === 'assistant' || key === 'exterior';\n    const isSpecialRows = key === 'body' || key === 'colors' || isOptions;\n\n    if (isExcludedRows && data) {\n      if (isSpecialRows && data.length) {\n        fields = __jsx(React.Fragment, null, __jsx(Typography, {\n          variant: \"subtitle1\"\n        }, key, isRequired(key) && __jsx(\"span\", {\n          className: \"error-text\"\n        }, \"*\")), __jsx(\"div\", {\n          className: \"row-list\"\n        }, data.map(item => __jsx(\"div\", {\n          key: item.id\n        }, key === 'body' ? __jsx(\"div\", {\n          onClick: !isPreview ? handleListItem(key, item) : null,\n          className: adParams[key] && adParams[key].id === item.id ? classes.selected : ''\n        }, __jsx(\"img\", {\n          src: item.icon.url,\n          alt: item.name\n        }), __jsx(Typography, null, item.name)) : __jsx(React.Fragment, null, key === 'colors' ? __jsx(\"div\", {\n          onClick: !isPreview ? handleListItem(key, item) : null,\n          className: adParams[key] && adParams[key].id === item.id ? classes.selected : '',\n          style: {\n            width: '50px',\n            height: '50px',\n            backgroundColor: `${item.hex_color_code}`\n          }\n        }) : __jsx(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center'\n          }\n        }, __jsx(CustomCheckbox, {\n          disabled: isPreview,\n          checked: adParams[key] && adParams[key].some(val => val.id === item.id),\n          onChange: handleParamsCheckbox(key, item)\n        }), __jsx(Typography, null, item.name)))))));\n      } else {\n        if (!Array.isArray(data)) {\n          fields = __jsx(React.Fragment, null, __jsx(Typography, {\n            variant: \"subtitle1\"\n          }, key, isRequired(key) && __jsx(\"span\", {\n            className: \"error-text\"\n          }, \"*\")), key === 'body' ? __jsx(Typography, null, data.name) : key === 'colors' ? __jsx(\"div\", {\n            style: {\n              width: '50px',\n              height: '50px',\n              backgroundColor: `${data.hex_color_code}`\n            }\n          }) : __jsx(Typography, null, data.name));\n        } else if (data.length) {\n          if (key !== 'condition') data = [{\n            id: null,\n            name: 'Не выбрано'\n          }, ...data];\n          fields = __jsx(React.Fragment, null, __jsx(Typography, {\n            variant: \"subtitle1\"\n          }, __jsx(\"strong\", null, key, isRequired(key) && __jsx(\"span\", {\n            className: \"error-text\"\n          }, \"*\"))), __jsx(CustomMenu, {\n            className: errors.adParams && errors.adParams[key] && touched[key] ? 'error-border' : '',\n            name: key,\n            onBlur: onBlur,\n            items: data,\n            valueName: adParams[key] ? adParams[key].name : data[0].name,\n            onClick: handleMenuItem(key)\n          }));\n        }\n      }\n\n      return __jsx(Grid, {\n        item: true,\n        container: true,\n        className: classes.gridItem,\n        key: key,\n        xs: 12,\n        sm: isSpecialRows && !isPreview || isOptions ? 12 : 6\n      }, fields);\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_params_block/AdvrtParamsBlock.tsx"],"names":["React","Fragment","useEffect","useState","Grid","Typography","CustomMenu","CustomCheckbox","CustomFormikField","isRequired","useStyles","AdvrtParamsBlock","props","isPreview","createAdvrt","values","setValues","errors","touched","onBlur","handleMenuItem","handleListItem","handleParamsInput","handleParamsCheckbox","initReqFields","setInitReqFields","initReqFieldsLen","Object","keys","length","subCategory","adParams","adParamsLen","data","classes","paramsBlock","result","root","map","key","listGenerator","innerKey","Array","isArray","gridItem","year","mileage","fields","condition","id","name","isExcludedRows","isOptions","isSpecialRows","item","selected","icon","url","width","height","backgroundColor","hex_color_code","display","alignItems","some","val"],"mappings":"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","sourcesContent":["import React, {FC, Fragment, useEffect, useState} from \"react\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {CustomCheckbox} from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\r\nimport {CustomFormikField} from \"@src/components/elements/custom_formik_field/CustomFormikField\";\r\nimport {isRequired} from '@root/validation_schemas/createAdvrtSchema';\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const AdvrtParamsBlock: FC<any> = (props) => {\r\n    const {\r\n        isPreview,\r\n        createAdvrt,\r\n        values,\r\n        setValues,\r\n        errors,\r\n        touched,\r\n        onBlur,\r\n        handleMenuItem,\r\n        handleListItem,\r\n        handleParamsInput,\r\n        handleParamsCheckbox\r\n    } = props;\r\n\r\n\r\n    const [initReqFields, setInitReqFields] = useState({});\r\n    const initReqFieldsLen = Object.keys(initReqFields).length;\r\n\r\n    const {subCategory} = createAdvrt;\r\n\r\n    const {adParams} = values;\r\n    const adParamsLen = Object.keys(adParams).length;\r\n\r\n    const data = isPreview ? adParams : subCategory.data;\r\n\r\n    const classes = useStyles({isPreview});\r\n    const paramsBlock = result();\r\n\r\n    useEffect(() => {\r\n        setValues({...values, adParams: {...adParams, ...initReqFields}});\r\n    }, [adParamsLen, initReqFieldsLen]);\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={1}\r\n            className={classes.root}\r\n        >\r\n            {paramsBlock}\r\n        </Grid>\r\n    )\r\n\r\n    function result() {\r\n        return Object.keys(data).map(key => {\r\n            return (\r\n                <Fragment key={key}>\r\n                    {\r\n                        !isPreview && adParams[key]\r\n                            ? (\r\n                                <>\r\n                                    {listGenerator(data[key], key)}\r\n                                    {\r\n                                        Object.keys(adParams[key]).map(innerKey => {\r\n                                            if (Array.isArray(adParams[key][innerKey]) && adParams[key][innerKey].length) {\r\n                                                return listGenerator(adParams[key][innerKey], innerKey)\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </>\r\n                            )\r\n                            : listGenerator(data[key], key)\r\n                    }\r\n                    {\r\n                        key === 'body' && (\r\n                            <>\r\n                                <Grid\r\n                                    item\r\n                                    container\r\n                                    xs={12}\r\n                                    sm={6}\r\n                                    className={classes.gridItem}\r\n                                >\r\n                                    <Typography variant=\"subtitle1\">\r\n                                        <strong>\r\n                                            year\r\n                                            {\r\n                                                isRequired(key)\r\n                                                && <span className='error-text'>*</span>\r\n                                            }\r\n                                        </strong>\r\n                                        {\r\n                                            errors.adParams\r\n                                            && errors.adParams.year\r\n                                            && touched.year\r\n                                            && <span className='error-text'> {errors.adParams.year}</span>\r\n                                        }\r\n                                    </Typography>\r\n                                    {\r\n                                        isPreview\r\n                                            ? <Typography>{adParams.year}</Typography>\r\n                                            : <CustomFormikField\r\n                                                className={\r\n                                                    errors.adParams\r\n                                                    && errors.adParams.year\r\n                                                    && touched.year ? 'error-border' : ''\r\n                                                }\r\n                                                name='year'\r\n                                                placeholder='Год выпуска'\r\n                                                value={adParams.year ?? ''}\r\n                                                onChange={handleParamsInput('year')}\r\n                                            />\r\n                                    }\r\n                                </Grid>\r\n                                <Grid\r\n                                    item\r\n                                    container\r\n                                    xs={12}\r\n                                    sm={6}\r\n                                    className={classes.gridItem}\r\n                                >\r\n                                    <Typography variant=\"subtitle1\">\r\n                                        <strong>\r\n                                            mileage\r\n                                            {\r\n                                                isRequired(key)\r\n                                                && <span className='error-text'>*</span>\r\n                                            }\r\n                                        </strong>\r\n                                        {\r\n                                            errors.adParams\r\n                                            && errors.adParams.mileage\r\n                                            && touched.mileage\r\n                                            && <span className='error-text'> {errors.adParams.mileage}</span>\r\n                                        }\r\n                                    </Typography>\r\n                                    {\r\n                                        isPreview\r\n                                            ? <Typography>{adParams.mileage}</Typography>\r\n                                            : <CustomFormikField\r\n                                                className={\r\n                                                    errors.adParams\r\n                                                    && errors.adParams.mileage\r\n                                                    && touched.mileage ? 'error-border' : ''\r\n                                                }\r\n                                                name='mileage'\r\n                                                placeholder='Пробег'\r\n                                                value={adParams.mileage ?? ''}\r\n                                                onChange={handleParamsInput('mileage')}\r\n                                            />\r\n                                    }\r\n                                </Grid>\r\n                            </>\r\n                        )\r\n                    }\r\n                </Fragment>\r\n            )\r\n        })\r\n    }\r\n\r\n    function listGenerator(data: any, key: string) {\r\n        let fields;\r\n\r\n        if (isRequired(key) || (key === 'adsParams' && data[0].condition && data[0].condition.length)) {\r\n            if (key !== 'adsParams') {\r\n                setInitReqFields({\r\n                    ...initReqFields,\r\n                    [key]: {id: null, name: 'Не выбрано'}\r\n                })\r\n            } else {\r\n                key = 'condition';\r\n                data = data[0].condition;\r\n                setInitReqFields({\r\n                    ...initReqFields,\r\n                    [key]: data[0]\r\n                })\r\n            }\r\n        }\r\n\r\n        const isExcludedRows = key !== 'id' && key !== 'name' && key !== 'adsParams';\r\n\r\n        const isOptions = key === 'safety'\r\n            || key === 'multimedia'\r\n            || key === 'assistant'\r\n            || key === 'exterior';\r\n\r\n        const isSpecialRows = key === 'body' || key === 'colors' || isOptions;\r\n\r\n        if (isExcludedRows && data) {\r\n            if (isSpecialRows && data.length) {\r\n                fields = (\r\n                    <>\r\n                        <Typography variant=\"subtitle1\">\r\n                            {key}\r\n                            {\r\n                                isRequired(key)\r\n                                && <span className='error-text'>*</span>\r\n                            }\r\n                        </Typography>\r\n                        <div className='row-list'>\r\n                            {\r\n                                data.map(item => (\r\n                                    <div key={item.id}>\r\n                                        {\r\n                                            key === 'body'\r\n                                                ? <div\r\n                                                    onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                                    className={\r\n                                                        adParams[key]\r\n                                                        && adParams[key].id === item.id\r\n                                                            ? classes.selected : ''\r\n                                                    }\r\n                                                >\r\n                                                    <img src={item.icon.url} alt={item.name}/>\r\n                                                    <Typography>{item.name}</Typography>\r\n                                                </div>\r\n                                                : <>\r\n                                                    {\r\n                                                        key === 'colors'\r\n                                                            ? <div\r\n                                                                onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                                                className={adParams[key] && adParams[key].id === item.id ? classes.selected : ''}\r\n                                                                style={{\r\n                                                                    width: '50px',\r\n                                                                    height: '50px',\r\n                                                                    backgroundColor: `${item.hex_color_code}`,\r\n                                                                }}\r\n                                                            />\r\n                                                            : <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                                <CustomCheckbox\r\n                                                                    disabled={isPreview}\r\n                                                                    checked={\r\n                                                                        adParams[key]\r\n                                                                        && adParams[key].some(val => val.id === item.id)\r\n                                                                    }\r\n                                                                    onChange={handleParamsCheckbox(key, item)}\r\n                                                                />\r\n                                                                <Typography>{item.name}</Typography>\r\n                                                            </div>\r\n                                                    }\r\n                                                </>\r\n                                        }\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </>\r\n                );\r\n            } else {\r\n                if (!Array.isArray(data)) {\r\n                    fields = (\r\n                        <>\r\n                            <Typography variant=\"subtitle1\">\r\n                                {key}\r\n                                {\r\n                                    isRequired(key)\r\n                                    && <span className='error-text'>*</span>\r\n                                }\r\n                            </Typography>\r\n                            {\r\n                                key === 'body'\r\n                                    ? <Typography>{data.name}</Typography>\r\n                                    : key === 'colors'\r\n                                    ? <div\r\n                                        style={{\r\n                                            width: '50px',\r\n                                            height: '50px',\r\n                                            backgroundColor: `${data.hex_color_code}`\r\n                                        }}\r\n                                    />\r\n                                    : <Typography>{data.name}</Typography>\r\n                            }\r\n                        </>\r\n                    );\r\n                } else if (data.length) {\r\n                    if (key !== 'condition') data = [{id: null, name: 'Не выбрано'}, ...data];\r\n                    fields = (\r\n                        <>\r\n                            <Typography variant=\"subtitle1\">\r\n                                <strong>\r\n                                    {key}\r\n                                    {\r\n                                        isRequired(key)\r\n                                        && <span className='error-text'>*</span>\r\n                                    }\r\n                                </strong>\r\n                            </Typography>\r\n                            <CustomMenu\r\n                                className={\r\n                                    errors.adParams\r\n                                    && errors.adParams[key]\r\n                                    && touched[key] ? 'error-border' : ''\r\n                                }\r\n                                name={key}\r\n                                onBlur={onBlur}\r\n                                items={data}\r\n                                valueName={adParams[key] ? adParams[key].name : data[0].name}\r\n                                onClick={handleMenuItem(key)}\r\n                            />\r\n                        </>\r\n                    );\r\n                }\r\n            }\r\n            return (\r\n                <Grid\r\n                    item\r\n                    container\r\n                    className={classes.gridItem}\r\n                    key={key}\r\n                    xs={12}\r\n                    sm={isSpecialRows && !isPreview || isOptions ? 12 : 6}\r\n                >\r\n                    {fields}\r\n                </Grid>\r\n            )\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}