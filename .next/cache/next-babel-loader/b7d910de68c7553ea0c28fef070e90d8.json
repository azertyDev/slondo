{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { Grid, Hidden, Container, Typography } from '@material-ui/core';\nimport { AdvrtForm } from './advrtForm/AdvrtForm';\nimport { SuccessAdvertisement } from './successAdvertisement/SuccessAdvertisement';\nimport { createAdvrtSchema } from \"@src/validationSchemas\";\nimport { Form, Formik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchAdDataForCreate, resetCreateAdvrtDataAction } from '@src/redux/slices/createAdvrtSlice';\nimport { ButtonComponent } from \"@src/components/elements/button/Button\";\nimport { PreviewAdvertisement } from './previewAdvertisement/PreviewAdvertisement';\nimport { i18n } from '@root/i18n';\nimport { MainLayout } from \"@src/components/MainLayout\"; // styles\n\nimport { useStyles } from './useStyles';\nexport var CreateAdvrt = function CreateAdvrt() {\n  _s();\n\n  var store = useSelector(function (store) {\n    return store;\n  });\n  var dispatch = useDispatch();\n  var lang = i18n.language;\n\n  var _useState = useState(false),\n      isPreview = _useState[0],\n      setIsPreview = _useState[1];\n\n  var _useState2 = useState(false),\n      isSuccess = _useState2[0],\n      setIsSuccess = _useState2[1];\n\n  var handlePreview = function handlePreview(value) {\n    return function () {\n      setIsPreview(value);\n    };\n  };\n\n  var initVals = {\n    adName: '',\n    adType: {\n      id: null,\n      name: 'Тип объявления'\n    },\n    adCategory: {\n      id: null,\n      name: 'Выберите категорию',\n      childs: []\n    },\n    adSubCategory: {\n      id: null,\n      name: 'Выберите под категорию'\n    },\n    safeBuy: false,\n    haveDelivery: false,\n    haveExch: false,\n    location: null,\n    photos: [],\n    description: '',\n    phone: ''\n  };\n\n  var submit = function submit() {\n    isPreview ? console.log('submit') : setIsPreview(true);\n  };\n\n  var classes = useStyles();\n  return __jsx(MainLayout, null, __jsx(Container, {\n    maxWidth: \"lg\"\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 9\n  }, __jsx(Formik, {\n    initialValues: initVals,\n    validationSchema: createAdvrtSchema,\n    onSubmit: submit\n  }, function (_ref) {\n    var errors = _ref.errors,\n        touched = _ref.touched,\n        values = _ref.values,\n        setValues = _ref.setValues,\n        handleBlur = _ref.handleBlur;\n    console.log(values);\n\n    var handleCheckboxChange = function handleCheckboxChange(event) {\n      setValues(event.target.checked);\n    };\n\n    var handleClickMenuItem = function handleClickMenuItem(valueName) {\n      return function (newValue, setAnchor) {\n        return function () {\n          setValues(_objectSpread(_objectSpread({}, values), {}, _defineProperty({}, valueName, newValue)));\n          setAnchor(null);\n          Object.keys(newValue).map(function (key) {\n            if (values[key]) {\n              var _objectSpread3;\n\n              setValues(_objectSpread(_objectSpread({}, values), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, valueName, newValue), _defineProperty(_objectSpread3, key, _objectSpread({\n                id: null,\n                name: 'Не выбрано'\n              }, newValue[key])), _objectSpread3)));\n            }\n          }); // Fetch data when sub category chosen\n\n          if (valueName === 'adSubCategory') {\n            dispatch(fetchAdDataForCreate({\n              lang: lang,\n              ctgryID: values.adCategory.id,\n              subCtgryID: newValue.id\n            }));\n            setValues(_objectSpread(_objectSpread({}, initVals), {}, _defineProperty({\n              adType: values.adType,\n              adCategory: values.adCategory\n            }, valueName, newValue)));\n          }\n        };\n      };\n    };\n\n    var handleClickMenuCategory = function handleClickMenuCategory(newValue, setAnchor) {\n      return function () {\n        setValues(_objectSpread(_objectSpread({}, initVals), {}, {\n          adType: values.adType,\n          adCategory: newValue,\n          adSubCategory: initVals.adSubCategory\n        }));\n        dispatch(resetCreateAdvrtDataAction());\n        setAnchor(null);\n      };\n    };\n\n    return __jsx(Form, null, isSuccess ? __jsx(SuccessAdvertisement, null) : isPreview ? __jsx(PreviewAdvertisement, null) : __jsx(AdvrtForm, {\n      store: store,\n      errors: errors,\n      touched: touched,\n      values: values,\n      handleBlur: handleBlur,\n      handleClickMenuItem: handleClickMenuItem,\n      handleCheckboxChange: handleCheckboxChange,\n      handleClickMenuCategory: handleClickMenuCategory\n    }), __jsx(\"div\", {\n      className: classes.nextButtonBlock\n    }, isPreview && __jsx(ButtonComponent, {\n      className: classes.nextButton,\n      onClick: handlePreview(false)\n    }, __jsx(Typography, null, \"\\u041D\\u0430\\u0437\\u0430\\u0434\")), __jsx(ButtonComponent, {\n      type: \"submit\",\n      className: classes.nextButton\n    }, __jsx(Typography, null, isPreview ? 'Отпарвить на модерацию' : 'Далее'))));\n  })), __jsx(Hidden, {\n    smDown: true\n  }, __jsx(Grid, {\n    item: true,\n    md: 3,\n    container: true,\n    justify: \"flex-end\",\n    className: classes.adBanner\n  }, __jsx(Grid, {\n    item: true,\n    md: 12\n  }, __jsx(\"div\", {\n    className: \"right-banner\"\n  })))))));\n};\n\n_s(CreateAdvrt, \"BDxn3d/nVWrGKzYxBr2AI+6MzFA=\", false, function () {\n  return [useSelector, useDispatch, useStyles];\n});\n\n_c = CreateAdvrt;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAdvrt\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advertisement/CreateAdvrt.tsx"],"names":["React","useState","Grid","Hidden","Container","Typography","AdvrtForm","SuccessAdvertisement","createAdvrtSchema","Form","Formik","useDispatch","useSelector","fetchAdDataForCreate","resetCreateAdvrtDataAction","ButtonComponent","PreviewAdvertisement","i18n","MainLayout","useStyles","CreateAdvrt","store","dispatch","lang","language","isPreview","setIsPreview","isSuccess","setIsSuccess","handlePreview","value","initVals","adName","adType","id","name","adCategory","childs","adSubCategory","safeBuy","haveDelivery","haveExch","location","photos","description","phone","submit","console","log","classes","errors","touched","values","setValues","handleBlur","handleCheckboxChange","event","target","checked","handleClickMenuItem","valueName","newValue","setAnchor","Object","keys","map","key","ctgryID","subCtgryID","handleClickMenuCategory","nextButtonBlock","nextButton","adBanner"],"mappings":"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","sourcesContent":["import React, {FC, useState} from 'react';\r\nimport {Grid, Hidden, Container, Typography} from '@material-ui/core';\r\nimport {AdvrtForm} from './advrtForm/AdvrtForm';\r\nimport {SuccessAdvertisement} from './successAdvertisement/SuccessAdvertisement';\r\nimport {AdvertisementProps} from \"@root/interfaces/Advertisement\";\r\nimport {createAdvrtSchema} from \"@src/validationSchemas\";\r\nimport {Form, Formik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchAdDataForCreate, resetCreateAdvrtDataAction} from '@src/redux/slices/createAdvrtSlice';\r\nimport {RootState} from \"@src/redux/rootReducer\";\r\nimport {ButtonComponent} from \"@src/components/elements/button/Button\";\r\nimport {PreviewAdvertisement} from './previewAdvertisement/PreviewAdvertisement';\r\nimport {i18n} from '@root/i18n';\r\nimport {MainLayout} from \"@src/components/MainLayout\";\r\n// styles\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const CreateAdvrt: FC<AdvertisementProps> = () => {\r\n\r\n    const store = useSelector((store: RootState) => store);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const lang = i18n.language;\r\n\r\n    const [isPreview, setIsPreview] = useState(false);\r\n    const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n\r\n    const handlePreview = (value) => () => {\r\n        setIsPreview(value)\r\n    };\r\n\r\n    const initVals = {\r\n        adName: '',\r\n        adType: {\r\n            id: null,\r\n            name: 'Тип объявления'\r\n        },\r\n        adCategory: {\r\n            id: null,\r\n            name: 'Выберите категорию',\r\n            childs: []\r\n        },\r\n        adSubCategory: {\r\n            id: null,\r\n            name: 'Выберите под категорию'\r\n        },\r\n        safeBuy: false,\r\n        haveDelivery: false,\r\n        haveExch: false,\r\n        location: null,\r\n        photos: [],\r\n        description: '',\r\n        phone: ''\r\n    };\r\n\r\n    const submit = () => {\r\n        isPreview\r\n            ? console.log('submit')\r\n            : setIsPreview(true)\r\n    };\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <MainLayout>\r\n            <Container maxWidth=\"lg\">\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12} md={9}>\r\n                        <Formik initialValues={initVals} validationSchema={createAdvrtSchema} onSubmit={submit}>\r\n                            {\r\n                                ({\r\n                                     errors,\r\n                                     touched,\r\n                                     values,\r\n                                     setValues,\r\n                                     handleBlur,\r\n                                 }) => {\r\n                                    console.log(values)\r\n                                    const handleCheckboxChange = (event) => {\r\n                                        setValues(event.target.checked);\r\n                                    };\r\n\r\n                                    const handleClickMenuItem = (valueName) => (newValue, setAnchor) => () => {\r\n                                        setValues({...values, [valueName]: newValue});\r\n\r\n                                        setAnchor(null);\r\n\r\n                                        Object.keys(newValue).map(key => {\r\n                                            if (values[key]) {\r\n                                                setValues({\r\n                                                    ...values,\r\n                                                    [valueName]: newValue,\r\n                                                    [key]: {id: null, name: 'Не выбрано', ...newValue[key]}\r\n                                                })\r\n                                            }\r\n                                        });\r\n\r\n                                        // Fetch data when sub category chosen\r\n                                        if (valueName === 'adSubCategory') {\r\n                                            dispatch(fetchAdDataForCreate({\r\n                                                lang,\r\n                                                ctgryID: values.adCategory.id,\r\n                                                subCtgryID: newValue.id,\r\n                                            }))\r\n                                            setValues({\r\n                                                ...initVals,\r\n                                                adType: values.adType,\r\n                                                adCategory: values.adCategory,\r\n                                                [valueName]: newValue\r\n                                            });\r\n                                        }\r\n                                    };\r\n\r\n                                    const handleClickMenuCategory = (newValue, setAnchor) => () => {\r\n                                        setValues({\r\n                                            ...initVals,\r\n                                            adType: values.adType,\r\n                                            adCategory: newValue,\r\n                                            adSubCategory: initVals.adSubCategory\r\n                                        });\r\n\r\n                                        dispatch(resetCreateAdvrtDataAction())\r\n\r\n                                        setAnchor(null);\r\n                                    };\r\n\r\n                                    return (\r\n                                        <Form>\r\n                                            {\r\n                                                isSuccess\r\n                                                    ? <SuccessAdvertisement/>\r\n                                                    : (\r\n                                                        isPreview\r\n                                                            ? <PreviewAdvertisement/>\r\n                                                            : <AdvrtForm\r\n                                                                store={store}\r\n                                                                errors={errors}\r\n                                                                touched={touched}\r\n                                                                values={values}\r\n                                                                handleBlur={handleBlur}\r\n                                                                handleClickMenuItem={handleClickMenuItem}\r\n                                                                handleCheckboxChange={handleCheckboxChange}\r\n                                                                handleClickMenuCategory={handleClickMenuCategory}\r\n                                                            />\r\n                                                    )\r\n                                            }\r\n                                            <div className={classes.nextButtonBlock}>\r\n                                                {\r\n                                                    isPreview && (\r\n                                                        <ButtonComponent\r\n                                                            className={classes.nextButton}\r\n                                                            onClick={handlePreview(false)}\r\n                                                        >\r\n                                                            <Typography>\r\n                                                                Назад\r\n                                                            </Typography>\r\n                                                        </ButtonComponent>\r\n                                                    )\r\n                                                }\r\n                                                <ButtonComponent\r\n                                                    type='submit'\r\n                                                    className={classes.nextButton}\r\n                                                >\r\n                                                    <Typography>\r\n                                                        {\r\n                                                            isPreview\r\n                                                                ? 'Отпарвить на модерацию'\r\n                                                                : 'Далее'\r\n                                                        }\r\n                                                    </Typography>\r\n                                                </ButtonComponent>\r\n                                            </div>\r\n                                        </Form>\r\n                                    )\r\n                                }\r\n                            }\r\n                        </Formik>\r\n                    </Grid>\r\n                    <Hidden smDown>\r\n                        <Grid\r\n                            item\r\n                            md={3}\r\n                            container\r\n                            justify=\"flex-end\"\r\n                            className={classes.adBanner}\r\n                        >\r\n                            <Grid item md={12}>\r\n                                <div className=\"right-banner\"/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Hidden>\r\n                </Grid>\r\n            </Container>\r\n        </MainLayout>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}