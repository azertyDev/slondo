{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _createSlice;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAction, createSlice } from '@reduxjs/toolkit';\nexport var setIsAuthAction = createAction('auth/setAuth', function (isAuth) {\n  return {\n    payload: isAuth\n  };\n});\nexport var fetchTokenBeginAction = createAction('token/beginFetch');\nexport var fetchTokenSuccessAction = createAction('token/fetchSuccess');\nexport var fetchTokenFailureAction = createAction('token/fetchFailure');\nvar initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null\n};\nexport var authReducer = createSlice(initialState, (_createSlice = {}, _defineProperty(_createSlice, setIsAuthAction.type, function (state, action) {\n  return state.isAuth = action.payload;\n}), _defineProperty(_createSlice, fetchTokenBeginAction.type, function (state) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    isFetch: true,\n    error: null\n  });\n}), _defineProperty(_createSlice, fetchTokenSuccessAction.type, function (state, action) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    isFetch: false\n  }, action.payload);\n}), _defineProperty(_createSlice, fetchTokenFailureAction.type, function (state, action) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    isFetch: false,\n    error: action.payload\n  });\n}), _createSlice));","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/authReducer.ts"],"names":["createAction","createSlice","setIsAuthAction","isAuth","payload","fetchTokenBeginAction","fetchTokenSuccessAction","fetchTokenFailureAction","initialState","isFetch","error","authReducer","type","state","action"],"mappings":";;;;;;;;AACA,SAAQA,YAAR,EAAsBC,WAAtB,QAAwC,kBAAxC;AAEA,OAAO,IAAMC,eAAe,GAAGF,YAAY,CAAC,cAAD,EAAiB,UAACG,MAAD;AAAA,SAAa;AAACC,IAAAA,OAAO,EAAED;AAAV,GAAb;AAAA,CAAjB,CAApC;AACP,OAAO,IAAME,qBAAqB,GAAGL,YAAY,CAAC,kBAAD,CAA1C;AACP,OAAO,IAAMM,uBAAuB,GAAGN,YAAY,CAAC,oBAAD,CAA5C;AACP,OAAO,IAAMO,uBAAuB,GAAGP,YAAY,CAAC,oBAAD,CAA5C;AAQP,IAAMQ,YAAuB,GAAG;AAC5BC,EAAAA,OAAO,EAAE,KADmB;AAE5BN,EAAAA,MAAM,EAAE,KAFoB;AAG5BO,EAAAA,KAAK,EAAE;AAHqB,CAAhC;AAMA,OAAO,IAAMC,WAAW,GAAGV,WAAW,CAACO,YAAD,oDACjCN,eAAe,CAACU,IADiB,EACV,UAACC,KAAD,EAAQC,MAAR;AAAA,SAAmBD,KAAK,CAACV,MAAN,GAAeW,MAAM,CAACV,OAAzC;AAAA,CADU,iCAEjCC,qBAAqB,CAACO,IAFW,EAEJ,UAACC,KAAD;AAAA,yCACvBA,KADuB;AAE1BJ,IAAAA,OAAO,EAAE,IAFiB;AAG1BC,IAAAA,KAAK,EAAE;AAHmB;AAAA,CAFI,iCAOjCJ,uBAAuB,CAACM,IAPS,EAOF,UAACC,KAAD,EAAQC,MAAR;AAAA,yCACzBD,KADyB;AAE5BJ,IAAAA,OAAO,EAAE;AAFmB,KAGzBK,MAAM,CAACV,OAHkB;AAAA,CAPE,iCAYjCG,uBAAuB,CAACK,IAZS,EAYF,UAACC,KAAD,EAAQC,MAAR;AAAA,yCACzBD,KADyB;AAE5BJ,IAAAA,OAAO,EAAE,KAFmB;AAG5BC,IAAAA,KAAK,EAAEI,MAAM,CAACV;AAHc;AAAA,CAZE,iBAA/B","sourcesContent":["import {HYDRATE} from \"next-redux-wrapper\"\r\nimport {createAction, createSlice} from '@reduxjs/toolkit'\r\n\r\nexport const setIsAuthAction = createAction('auth/setAuth', (isAuth) => ({payload: isAuth}));\r\nexport const fetchTokenBeginAction = createAction('token/beginFetch');\r\nexport const fetchTokenSuccessAction = createAction('token/fetchSuccess');\r\nexport const fetchTokenFailureAction = createAction('token/fetchFailure');\r\n\r\nexport type AuthTypes = {\r\n    isFetch: boolean,\r\n    isAuth: boolean,\r\n    error?: any\r\n};\r\n\r\nconst initialState: AuthTypes = {\r\n    isFetch: false,\r\n    isAuth: false,\r\n    error: null\r\n};\r\n\r\nexport const authReducer = createSlice(initialState, {\r\n    [setIsAuthAction.type]: (state, action) => state.isAuth = action.payload,\r\n    [fetchTokenBeginAction.type]: (state) => ({\r\n        ...state,\r\n        isFetch: true,\r\n        error: null\r\n    }),\r\n    [fetchTokenSuccessAction.type]: (state, action) => ({\r\n        ...state,\r\n        isFetch: false,\r\n        ...action.payload\r\n    }),\r\n    [fetchTokenFailureAction.type]: (state, action) => ({\r\n        ...state,\r\n        isFetch: false,\r\n        error: action.payload\r\n    })\r\n});"]},"metadata":{},"sourceType":"module"}