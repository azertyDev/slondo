{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport { CustomSlider } from '../custom_slider/CustomSlider';\nimport { FullscreenIcon } from '../icons';\nimport Button from '@material-ui/core/Button'; // styles\n\nimport { useStyles } from './useStyles';\nexport var SyncSliders = function SyncSliders(props) {\n  _s();\n\n  var imgs = props.imgs;\n\n  var _useState = useState({\n    nav1: null,\n    nav2: null\n  }),\n      slidersNav = _useState[0],\n      setSlidersNav = _useState[1];\n\n  var slider1 = useRef();\n  var slider2 = useRef();\n  useEffect(function () {\n    setSlidersNav({\n      nav1: slider1.current,\n      nav2: slider2.current\n    });\n  }, []);\n  var classes = useStyles();\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", {\n    className: classes.firstSlider\n  }, __jsx(\"div\", {\n    className: classes.fullscreenIcon\n  }, __jsx(Button, {\n    variant: \"text\",\n    color: \"default\"\n  }, __jsx(\"img\", {\n    src: FullscreenIcon,\n    alt: \"fullscreen-icon\"\n  }))), __jsx(CustomSlider, {\n    asNavFor: slidersNav.nav2,\n    ref: slider1\n  }, imgs.map(function (_ref, i) {\n    var url = _ref.url,\n        alt = _ref.alt;\n    return __jsx(\"div\", {\n      key: i\n    }, __jsx(\"img\", {\n      src: url,\n      alt: alt\n    }));\n  }))), __jsx(\"div\", {\n    className: classes.secondSlider\n  }, __jsx(CustomSlider, {\n    asNavFor: slidersNav.nav1,\n    ref: slider2,\n    slidesToShow: 7,\n    focusOnSelect: true\n  }, imgs.map(function (_ref2, i) {\n    var url = _ref2.url,\n        alt = _ref2.alt;\n    return __jsx(\"div\", {\n      key: i\n    }, __jsx(\"img\", {\n      src: url,\n      alt: alt\n    }));\n  }))));\n};\n\n_s(SyncSliders, \"VITrBY1WQ/u4+kXJh8VEVxSkf18=\", false, function () {\n  return [useStyles];\n});\n\n_c = SyncSliders;\n\nvar _c;\n\n$RefreshReg$(_c, \"SyncSliders\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/syncSliders/SyncSliders.tsx"],"names":["React","useEffect","useRef","useState","CustomSlider","FullscreenIcon","Button","useStyles","SyncSliders","props","imgs","nav1","nav2","slidersNav","setSlidersNav","slider1","slider2","current","classes","root","firstSlider","fullscreenIcon","map","i","url","alt","secondSlider"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,SAAQC,YAAR,QAA2B,+BAA3B;AACA,SAAQC,cAAR,QAA6B,UAA7B;AACA,OAAOC,MAAP,MAAmB,0BAAnB,C,CAEA;;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAAA;;AAAA,MAC3BC,IAD2B,GACnBD,KADmB,CAC3BC,IAD2B;;AAAA,kBAEEP,QAAQ,CAAC;AAACQ,IAAAA,IAAI,EAAE,IAAP;AAAaC,IAAAA,IAAI,EAAE;AAAnB,GAAD,CAFV;AAAA,MAE3BC,UAF2B;AAAA,MAEfC,aAFe;;AAGlC,MAAMC,OAAO,GAAGb,MAAM,EAAtB;AACA,MAAMc,OAAO,GAAGd,MAAM,EAAtB;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACZa,IAAAA,aAAa,CAAC;AACVH,MAAAA,IAAI,EAAEI,OAAO,CAACE,OADJ;AAEVL,MAAAA,IAAI,EAAEI,OAAO,CAACC;AAFJ,KAAD,CAAb;AAIH,GALQ,EAKN,EALM,CAAT;AAOA,MAAMC,OAAO,GAAGX,SAAS,EAAzB;AACA,SACI;AAAK,IAAA,SAAS,EAAEW,OAAO,CAACC;AAAxB,KACI;AAAK,IAAA,SAAS,EAAED,OAAO,CAACE;AAAxB,KACI;AAAK,IAAA,SAAS,EAAEF,OAAO,CAACG;AAAxB,KACI,MAAC,MAAD;AACI,IAAA,OAAO,EAAC,MADZ;AAEI,IAAA,KAAK,EAAC;AAFV,KAII;AAAK,IAAA,GAAG,EAAEhB,cAAV;AAA0B,IAAA,GAAG,EAAC;AAA9B,IAJJ,CADJ,CADJ,EASI,MAAC,YAAD;AAAc,IAAA,QAAQ,EAAEQ,UAAU,CAACD,IAAnC;AAAyC,IAAA,GAAG,EAAEG;AAA9C,KACKL,IAAI,CAACY,GAAL,CAAS,gBAAaC,CAAb;AAAA,QAAEC,GAAF,QAAEA,GAAF;AAAA,QAAOC,GAAP,QAAOA,GAAP;AAAA,WACN;AAAK,MAAA,GAAG,EAAEF;AAAV,OACI;AAAK,MAAA,GAAG,EAAEC,GAAV;AAAe,MAAA,GAAG,EAAEC;AAApB,MADJ,CADM;AAAA,GAAT,CADL,CATJ,CADJ,EAkBI;AAAK,IAAA,SAAS,EAAEP,OAAO,CAACQ;AAAxB,KACI,MAAC,YAAD;AACI,IAAA,QAAQ,EAAEb,UAAU,CAACF,IADzB;AAEI,IAAA,GAAG,EAAEK,OAFT;AAGI,IAAA,YAAY,EAAE,CAHlB;AAII,IAAA,aAAa,EAAE;AAJnB,KAMKN,IAAI,CAACY,GAAL,CAAS,iBAAaC,CAAb;AAAA,QAAEC,GAAF,SAAEA,GAAF;AAAA,QAAOC,GAAP,SAAOA,GAAP;AAAA,WACN;AAAK,MAAA,GAAG,EAAEF;AAAV,OACI;AAAK,MAAA,GAAG,EAAEC,GAAV;AAAe,MAAA,GAAG,EAAEC;AAApB,MADJ,CADM;AAAA,GAAT,CANL,CADJ,CAlBJ,CADJ;AAmCH,CAjDM;;GAAMjB,W;UAaOD,S;;;KAbPC,W","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport {CustomSlider} from '../custom_slider/CustomSlider';\r\nimport {FullscreenIcon} from '../icons';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n// styles\r\nimport {useStyles} from './useStyles';\r\n\r\nexport const SyncSliders = (props) => {\r\n    const {imgs} = props;\r\n    const [slidersNav, setSlidersNav] = useState({nav1: null, nav2: null});\r\n    const slider1 = useRef();\r\n    const slider2 = useRef();\r\n\r\n    useEffect(() => {\r\n        setSlidersNav({\r\n            nav1: slider1.current,\r\n            nav2: slider2.current,\r\n        });\r\n    }, []);\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.firstSlider}>\r\n                <div className={classes.fullscreenIcon}>\r\n                    <Button\r\n                        variant=\"text\"\r\n                        color=\"default\"\r\n                    >\r\n                        <img src={FullscreenIcon} alt=\"fullscreen-icon\"/>\r\n                    </Button>\r\n                </div>\r\n                <CustomSlider asNavFor={slidersNav.nav2} ref={slider1}>\r\n                    {imgs.map(({url, alt}, i) => (\r\n                        <div key={i}>\r\n                            <img src={url} alt={alt}/>\r\n                        </div>\r\n                    ))}\r\n                </CustomSlider>\r\n            </div>\r\n            <div className={classes.secondSlider}>\r\n                <CustomSlider\r\n                    asNavFor={slidersNav.nav1}\r\n                    ref={slider2}\r\n                    slidesToShow={7}\r\n                    focusOnSelect={true}\r\n                >\r\n                    {imgs.map(({url, alt}, i) => (\r\n                        <div key={i}>\r\n                            <img src={url} alt={alt}/>\r\n                        </div>\r\n                    ))}\r\n                </CustomSlider>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}