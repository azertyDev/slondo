{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from '@src/api/api';\nvar fetchToken = createAsyncThunk('auth/fetchByIdStatus', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(phone, password) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return userAPI.login(phone, password);\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nvar initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null\n};\nvar authSlice = createSlice({\n  name: 'auth',\n  initialState: initialState,\n  extraReducers: {// [setIsAuthAction]: (state, action) => state.isAuth = action.payload,\n    // [fetchToken.pending]: (state) => {\n    //     state.isFetch = true,\n    //     state.error = null\n    // },\n    // [fetchToken.fulfilled]: (state, action) => ({\n    //     ...state,\n    //     isFetch: false,\n    //     ...action.payload\n    // }),\n    // [fetchToken.rejected]: (state, action) => ({\n    //     ...state,\n    //     isFetch: false,\n    //     error: action.payload\n    // })\n  }\n});\nexport var auth = function auth(state) {\n  return state.auth;\n};\nvar setIsAuthAction = authSlice.actions.setIsAuthAction;\nexport { setIsAuthAction };\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/authReducer.ts"],"names":["createAsyncThunk","createSlice","userAPI","fetchToken","phone","password","login","response","data","initialState","isFetch","isAuth","error","authSlice","name","extraReducers","auth","state","setIsAuthAction","actions","reducer"],"mappings":";;AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAAQC,OAAR,QAAsB,cAAtB;AAGA,IAAMC,UAAU,GAAGH,gBAAgB,CAC/B,sBAD+B;AAAA,sEAE/B,iBAAOI,KAAP,EAAcC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC2BH,OAAO,CAACI,KAAR,CAAcF,KAAd,EAAqBC,QAArB,CAD3B;;AAAA;AACUE,YAAAA,QADV;AAAA,6CAEWA,QAAQ,CAACC,IAFpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAF+B;;AAAA;AAAA;AAAA;AAAA,IAAnC;AAcA,IAAMC,YAAuB,GAAG;AAC5BC,EAAAA,OAAO,EAAE,KADmB;AAE5BC,EAAAA,MAAM,EAAE,KAFoB;AAG5BC,EAAAA,KAAK,EAAE;AAHqB,CAAhC;AAMA,IAAMC,SAAS,GAAGZ,WAAW,CAAC;AAC1Ba,EAAAA,IAAI,EAAE,MADoB;AAE1BL,EAAAA,YAAY,EAAZA,YAF0B;AAG1BM,EAAAA,aAAa,EAAE,CACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfW;AAHW,CAAD,CAA7B;AAsBA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD;AAAA,SAAWA,KAAK,CAACD,IAAjB;AAAA,CAAb;IAEOE,e,GAAmBL,SAAS,CAACM,O,CAA7BD,e;;AAEd,eAAeL,SAAS,CAACO,OAAzB","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {userAPI} from '@src/api/api'\r\n\r\n\r\nconst fetchToken = createAsyncThunk(\r\n    'auth/fetchByIdStatus',\r\n    async (phone, password) => {\r\n        const response = await userAPI.login(phone, password)\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport type AuthTypes = {\r\n    isFetch: boolean,\r\n    isAuth: boolean,\r\n    error?: any\r\n};\r\n\r\nconst initialState: AuthTypes = {\r\n    isFetch: false,\r\n    isAuth: false,\r\n    error: null\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    extraReducers: {\r\n        // [setIsAuthAction]: (state, action) => state.isAuth = action.payload,\r\n        // [fetchToken.pending]: (state) => {\r\n        //     state.isFetch = true,\r\n        //     state.error = null\r\n        // },\r\n        // [fetchToken.fulfilled]: (state, action) => ({\r\n        //     ...state,\r\n        //     isFetch: false,\r\n        //     ...action.payload\r\n        // }),\r\n        // [fetchToken.rejected]: (state, action) => ({\r\n        //     ...state,\r\n        //     isFetch: false,\r\n        //     error: action.payload\r\n        // })\r\n    }\r\n});\r\n\r\nexport const auth = (state) => state.auth;\r\n\r\nexport const {setIsAuthAction} = authSlice.actions;\r\n\r\nexport default authSlice.reducer;"]},"metadata":{},"sourceType":"module"}