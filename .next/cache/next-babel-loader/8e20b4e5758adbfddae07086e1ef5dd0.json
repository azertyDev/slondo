{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createWrapper } from 'next-redux-wrapper';\nimport reducers from \"./reducers\";\nimport rootSaga from './sagas';\nvar sagaMiddleware = createSagaMiddleware();\nvar enhancer = composeWithDevTools(applyMiddleware(sagaMiddleware)); // create a makeStore function\n\nvar makeStore = function makeStore() {\n  var store = createStore(reducers, enhancer);\n\n  store.runSaga = function () {\n    // Avoid running twice\n    if (store.saga) return;\n    store.saga = sagaMiddleware.run(rootSaga);\n  };\n\n  store.stopSaga = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (store.saga) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            store.dispatch(END);\n            _context.next = 5;\n            return store.saga.done;\n\n          case 5:\n            store.saga = null;\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\n\nsagaMiddleware.run(rootSaga); // export an assembled wrapper\n\nexport default createWrapper(makeStore);","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/store.ts"],"names":["createStore","applyMiddleware","createSagaMiddleware","composeWithDevTools","createWrapper","reducers","rootSaga","sagaMiddleware","enhancer","makeStore","store","runSaga","saga","run","stopSaga","dispatch","END","done"],"mappings":";;AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,SAAmBC,aAAnB,QAAuC,oBAAvC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,SAArB;AAIA,IAAMC,cAAc,GAAGL,oBAAoB,EAA3C;AAEA,IAAMM,QAAQ,GAAGL,mBAAmB,CAChCF,eAAe,CAACM,cAAD,CADiB,CAApC,C,CAIA;;AACA,IAAME,SAAoB,GAAG,SAAvBA,SAAuB,GAAM;AAE/B,MAAMC,KAAK,GAAGV,WAAW,CAACK,QAAD,EAAWG,QAAX,CAAzB;;AAEAE,EAAAA,KAAK,CAACC,OAAN,GAAgB,YAAM;AAClB;AACA,QAAID,KAAK,CAACE,IAAV,EAAgB;AAChBF,IAAAA,KAAK,CAACE,IAAN,GAAaL,cAAc,CAACM,GAAf,CAAmBP,QAAnB,CAAb;AACH,GAJD;;AAMAI,EAAAA,KAAK,CAACI,QAAN,yEAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAERJ,KAAK,CAACE,IAFE;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGbF,YAAAA,KAAK,CAACK,QAAN,CAAeC,GAAf;AAHa;AAAA,mBAIPN,KAAK,CAACE,IAAN,CAAWK,IAJJ;;AAAA;AAKbP,YAAAA,KAAK,CAACE,IAAN,GAAa,IAAb;;AALa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;AAOH,CAjBD;;AAmBAL,cAAc,CAACM,GAAf,CAAmBP,QAAnB,E,CAEA;;AACA,eAAeF,aAAa,CAAWK,SAAX,CAA5B","sourcesContent":["import {createStore, applyMiddleware} from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport {MakeStore, createWrapper} from 'next-redux-wrapper'\r\nimport reducers from \"./reducers\"\r\nimport rootSaga from './sagas'\r\n\r\nexport type AppState = ReturnType<typeof reducers>;\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst enhancer = composeWithDevTools(\r\n    applyMiddleware(sagaMiddleware),\r\n);\r\n\r\n// create a makeStore function\r\nconst makeStore: MakeStore = () => {\r\n\r\n    const store = createStore(reducers, enhancer);\r\n\r\n    store.runSaga = () => {\r\n        // Avoid running twice\r\n        if (store.saga) return;\r\n        store.saga = sagaMiddleware.run(rootSaga);\r\n    };\r\n\r\n    store.stopSaga = async () => {\r\n        // Avoid running twice\r\n        if (!store.saga) return;\r\n        store.dispatch(END);\r\n        await store.saga.done;\r\n        store.saga = null;\r\n    };\r\n}\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\n// export an assembled wrapper\r\nexport default createWrapper<AppState>(makeStore);"]},"metadata":{},"sourceType":"module"}