{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Grid, Hidden, Container, Typography } from '@material-ui/core';\nimport { AdvrtForm } from './advrt_form/AdvrtForm';\nimport { SuccessAdvrt } from './success_advrt/SuccessAdvrt';\nimport { createAdvrtSchema } from \"@root/validation_schemas/createAdvrtSchema\";\nimport { useFormik, FormikProvider } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport { ButtonComponent } from \"@src/components/elements/button/Button\";\nimport { MainLayout } from \"@src/components/MainLayout\"; // styles\n\nimport { useStyles } from './useStyles';\nconst initFields = {\n  adType: {\n    id: null,\n    name: ''\n  },\n  category: {\n    id: null,\n    name: ''\n  },\n  price: {\n    value: 0,\n    currency: null\n  },\n  title: '',\n  safe_deal: false,\n  delivery: false,\n  exchange: false,\n  location: null,\n  files: [],\n  description: '',\n  phone: '',\n  adsParams: {}\n};\nexport const CreateAdvrt = () => {\n  const {\n    createAdvrt\n  } = useSelector(store => store);\n  const {\n    0: isPreview,\n    1: setIsPreview\n  } = useState(false);\n  const {\n    0: isSuccess,\n    1: setIsSuccess\n  } = useState(false);\n\n  const onSubmit = () => {\n    isPreview ? console.log('submit') : setIsPreview(true);\n  };\n\n  const formik = useFormik({\n    initialValues: initFields,\n    validationSchema: createAdvrtSchema,\n    onSubmit\n  });\n  const {\n    setValues,\n    values,\n    errors,\n    setErrors,\n    touched,\n    handleBlur\n  } = formik;\n\n  const handlePreview = value => () => {\n    setIsPreview(value);\n  };\n\n  const handleCheckboxChange = valName => ({\n    target\n  }) => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [valName]: target.checked\n    }));\n  };\n\n  const handleParamsCheckbox = (valueName, value) => () => {\n    const {\n      adsParams\n    } = values;\n\n    if (adsParams[valueName]) {\n      if (adsParams[valueName].some(val => val.id === value.id)) {\n        adsParams[valueName].map((val, index) => {\n          if (val.id === value.id) {\n            adsParams[valueName].splice(index, 1);\n          }\n        });\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          adsParams: _objectSpread({}, adsParams)\n        }));\n      } else {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          adsParams: _objectSpread(_objectSpread({}, adsParams), {}, {\n            [valueName]: [...adsParams[valueName], value]\n          })\n        }));\n      }\n    } else {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        adsParams: _objectSpread(_objectSpread({}, adsParams), {}, {\n          [valueName]: [value]\n        })\n      }));\n    }\n  };\n\n  const handleMenuItem = valueName => (newValue, setAnchor) => () => {\n    setAnchor(null);\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      adsParams: _objectSpread(_objectSpread({}, values.adsParams), {}, {\n        [valueName]: newValue\n      })\n    })); // Reset sub props in values\n\n    Object.keys(newValue).map(key => {\n      if (values.adsParams[key]) {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          adsParams: _objectSpread(_objectSpread({}, values.adsParams), {}, {\n            [valueName]: newValue,\n            [key]: _objectSpread({\n              id: null,\n              name: 'Не выбрано'\n            }, newValue[key])\n          })\n        }));\n      }\n    });\n  };\n\n  const handleListItem = (valueName, value) => () => {\n    if (values.adsParams[valueName] && values.adsParams[valueName].id === value.id) {\n      delete values.adsParams[valueName];\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        adsParams: _objectSpread({}, values.adsParams)\n      }));\n    } else {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        adsParams: _objectSpread(_objectSpread({}, values.adsParams), {}, {\n          [valueName]: value\n        })\n      }));\n    }\n  };\n\n  useEffect(() => {\n    setErrors({});\n    isPreview && setIsPreview(false);\n    setValues(_objectSpread(_objectSpread({}, initFields), {}, {\n      adType: createAdvrt.adType,\n      category: createAdvrt.data\n    }));\n  }, [createAdvrt.category.id, createAdvrt.data.id, createAdvrt.data.name]);\n  console.log(values);\n  const classes = useStyles();\n  return __jsx(MainLayout, null, __jsx(Container, {\n    maxWidth: \"lg\"\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 9\n  }, __jsx(FormikProvider, {\n    value: formik\n  }, __jsx(\"form\", {\n    onSubmit: formik.handleSubmit\n  }, isSuccess ? __jsx(SuccessAdvrt, null) : __jsx(AdvrtForm, {\n    isPreview: isPreview,\n    setIsPreview: setIsPreview,\n    createAdvrt: createAdvrt,\n    errors: errors,\n    touched: touched,\n    values: values,\n    setValues: setValues,\n    handleBlur: handleBlur,\n    handleMenuItem: handleMenuItem,\n    handleListItem: handleListItem,\n    handleParamsCheckbox: handleParamsCheckbox,\n    handleCheckboxChange: handleCheckboxChange\n  }), __jsx(\"div\", {\n    className: classes.nextButtonBlock\n  }, isPreview && __jsx(ButtonComponent, {\n    className: classes.nextButton,\n    onClick: handlePreview(false)\n  }, __jsx(Typography, null, \"\\u041D\\u0430\\u0437\\u0430\\u0434\")), __jsx(ButtonComponent, {\n    type: \"submit\",\n    className: classes.nextButton\n  }, __jsx(Typography, null, isPreview ? 'Создать' : 'Далее')))))), __jsx(Hidden, {\n    smDown: true\n  }, __jsx(Grid, {\n    item: true,\n    md: 3,\n    container: true,\n    justify: \"flex-end\",\n    className: classes.adBanner\n  }, __jsx(Grid, {\n    item: true,\n    md: 12\n  }, __jsx(\"div\", {\n    className: \"right-banner\"\n  })))))));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/CreateAdvrt.tsx"],"names":["React","useEffect","useState","Grid","Hidden","Container","Typography","AdvrtForm","SuccessAdvrt","createAdvrtSchema","useFormik","FormikProvider","useSelector","ButtonComponent","MainLayout","useStyles","initFields","adType","id","name","category","price","value","currency","title","safe_deal","delivery","exchange","location","files","description","phone","adsParams","CreateAdvrt","createAdvrt","store","isPreview","setIsPreview","isSuccess","setIsSuccess","onSubmit","console","log","formik","initialValues","validationSchema","setValues","values","errors","setErrors","touched","handleBlur","handlePreview","handleCheckboxChange","valName","target","checked","handleParamsCheckbox","valueName","some","val","map","index","splice","handleMenuItem","newValue","setAnchor","Object","keys","key","handleListItem","data","classes","handleSubmit","nextButtonBlock","nextButton","adBanner"],"mappings":"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","sourcesContent":["import React, {FC, useEffect, useState} from 'react';\r\nimport {Grid, Hidden, Container, Typography} from '@material-ui/core';\r\nimport {AdvrtForm} from './advrt_form/AdvrtForm';\r\nimport {SuccessAdvrt} from './success_advrt/SuccessAdvrt';\r\nimport {CreateAdFields} from \"@root/interfaces/Advertisement\";\r\nimport {createAdvrtSchema} from \"@root/validation_schemas/createAdvrtSchema\";\r\nimport {useFormik, FormikProvider} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"@src/redux/rootReducer\";\r\nimport {ButtonComponent} from \"@src/components/elements/button/Button\";\r\nimport {MainLayout} from \"@src/components/MainLayout\";\r\n// styles\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nconst initFields: CreateAdFields = {\r\n    adType: {\r\n        id: null,\r\n        name: ''\r\n    },\r\n    category: {\r\n        id: null,\r\n        name: ''\r\n    },\r\n    price: {\r\n        value: 0,\r\n        currency: null,\r\n    },\r\n    title: '',\r\n    safe_deal: false,\r\n    delivery: false,\r\n    exchange: false,\r\n    location: null,\r\n    files: [],\r\n    description: '',\r\n    phone: '',\r\n    adsParams: {}\r\n};\r\n\r\nexport const CreateAdvrt: FC = () => {\r\n    const {createAdvrt} = useSelector((store: RootState) => store);\r\n\r\n    const [isPreview, setIsPreview] = useState(false);\r\n    const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n    const onSubmit = () => {\r\n        isPreview\r\n            ? console.log('submit')\r\n            : setIsPreview(true)\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: initFields,\r\n        validationSchema: createAdvrtSchema,\r\n        onSubmit\r\n    });\r\n\r\n    const {\r\n        setValues,\r\n        values,\r\n        errors,\r\n        setErrors,\r\n        touched,\r\n        handleBlur,\r\n    } = formik;\r\n\r\n    const handlePreview = (value) => () => {\r\n        setIsPreview(value)\r\n    };\r\n\r\n    const handleCheckboxChange = (valName) => ({target}) => {\r\n        setValues({...values, [valName]: target.checked});\r\n    };\r\n\r\n    const handleParamsCheckbox = (valueName, value) => () => {\r\n        const {adsParams} = values;\r\n        if (adsParams[valueName]) {\r\n            if (adsParams[valueName].some(val => val.id === value.id)) {\r\n                adsParams[valueName].map((val, index) => {\r\n                    if (val.id === value.id) {\r\n                        adsParams[valueName].splice(index, 1)\r\n                    }\r\n                });\r\n                setValues({\r\n                        ...values,\r\n                        adsParams: {...adsParams}\r\n                    }\r\n                );\r\n            } else {\r\n                setValues({\r\n                        ...values,\r\n                        adsParams: {\r\n                            ...adsParams,\r\n                            [valueName]: [\r\n                                ...adsParams[valueName],\r\n                                value\r\n                            ]\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        } else {\r\n            setValues({\r\n                    ...values,\r\n                    adsParams: {\r\n                        ...adsParams,\r\n                        [valueName]: [value]\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    const handleMenuItem = (valueName) => (newValue, setAnchor) => () => {\r\n        setAnchor(null);\r\n\r\n        setValues({\r\n            ...values,\r\n            adsParams: {\r\n                ...values.adsParams,\r\n                [valueName]: newValue\r\n            }\r\n        });\r\n\r\n        // Reset sub props in values\r\n        Object.keys(newValue).map(key => {\r\n            if (values.adsParams[key]) {\r\n                setValues({\r\n                    ...values,\r\n                    adsParams: {\r\n                        ...values.adsParams,\r\n                        [valueName]: newValue,\r\n                        [key]: {id: null, name: 'Не выбрано', ...newValue[key]}\r\n                    }\r\n                })\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleListItem = (valueName, value) => () => {\r\n        if (values.adsParams[valueName] && values.adsParams[valueName].id === value.id) {\r\n            delete values.adsParams[valueName];\r\n\r\n            setValues({\r\n                ...values,\r\n                adsParams: {\r\n                    ...values.adsParams\r\n                }\r\n            });\r\n        } else {\r\n            setValues({\r\n                ...values,\r\n                adsParams: {\r\n                    ...values.adsParams,\r\n                    [valueName]: value\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setErrors({});\r\n        isPreview && setIsPreview(false);\r\n        setValues({...initFields, adType: createAdvrt.adType, category: createAdvrt.data});\r\n    }, [createAdvrt.category.id, createAdvrt.data.id, createAdvrt.data.name]);\r\n\r\n    console.log(values)\r\n    const classes = useStyles();\r\n    return (\r\n        <MainLayout>\r\n            <Container maxWidth=\"lg\">\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12} md={9}>\r\n                        <FormikProvider value={formik}>\r\n                            <form onSubmit={formik.handleSubmit}>\r\n                                {\r\n                                    isSuccess\r\n                                        ? <SuccessAdvrt/>\r\n                                        : (\r\n                                            <AdvrtForm\r\n                                                isPreview={isPreview}\r\n                                                setIsPreview={setIsPreview}\r\n                                                createAdvrt={createAdvrt}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                values={values}\r\n                                                setValues={setValues}\r\n                                                handleBlur={handleBlur}\r\n                                                handleMenuItem={handleMenuItem}\r\n                                                handleListItem={handleListItem}\r\n                                                handleParamsCheckbox={handleParamsCheckbox}\r\n                                                handleCheckboxChange={handleCheckboxChange}\r\n                                            />\r\n                                        )\r\n                                }\r\n                                <div className={classes.nextButtonBlock}>\r\n                                    {\r\n                                        isPreview && (\r\n                                            <ButtonComponent\r\n                                                className={classes.nextButton}\r\n                                                onClick={handlePreview(false)}\r\n                                            >\r\n                                                <Typography>\r\n                                                    Назад\r\n                                                </Typography>\r\n                                            </ButtonComponent>\r\n                                        )\r\n                                    }\r\n                                    <ButtonComponent\r\n                                        type='submit'\r\n                                        className={classes.nextButton}\r\n                                    >\r\n                                        <Typography>\r\n                                            {\r\n                                                isPreview\r\n                                                    ? 'Создать'\r\n                                                    : 'Далее'\r\n                                            }\r\n                                        </Typography>\r\n                                    </ButtonComponent>\r\n                                </div>\r\n                            </form>\r\n                        </FormikProvider>\r\n                    </Grid>\r\n                    <Hidden smDown>\r\n                        <Grid\r\n                            item\r\n                            md={3}\r\n                            container\r\n                            justify=\"flex-end\"\r\n                            className={classes.adBanner}\r\n                        >\r\n                            <Grid item md={12}>\r\n                                <div className=\"right-banner\"/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Hidden>\r\n                </Grid>\r\n            </Container>\r\n        </MainLayout>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}