{"ast":null,"code":"import * as yup from \"yup\";\nconst requiredList = {\n  drive: true,\n  seats: true\n};\n\nconst lazyFunc = value => {\n  const valueKeys = Object.keys(value);\n  const shape = yup.object().shape({});\n  console.log(valueKeys); // if (requiredList) {\n  //     console.log(value)\n  //     return yup.object().shape({\n  //         [value.name]: yup.object({\n  //             id: yup.number().nullable().required('Обязательный параметр!')\n  //         })\n  //     });\n  // }\n\n  valueKeys.forEach(key => {\n    if (requiredList[key]) {\n      shape[key] = yup.object({\n        id: yup.number().nullable().required('Обязательный параметр!')\n      });\n    }\n  });\n  return yup.mixed().notRequired();\n};\n\nexport const createAdvrtSchema = yup.object({\n  // title: yup.string().required('Обязательное поле!'),\n  // location: yup.string().required('Обязательное поле!'),\n  // files: yup.array().required('Загрузите фотографии!'),\n  // description: yup.string().required('Обязательное поле!'),\n  // phone: yup.string().required('Обязательное поле!'),\n  adsParams: yup.lazy(lazyFunc)\n});","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/validation_schemas/createAdvrtSchema.ts"],"names":["yup","requiredList","drive","seats","lazyFunc","value","valueKeys","Object","keys","shape","object","console","log","forEach","key","id","number","nullable","required","mixed","notRequired","createAdvrtSchema","adsParams","lazy"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,IADU;AAEjBC,EAAAA,KAAK,EAAE;AAFU,CAArB;;AAKA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AACxB,QAAMC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAZ,CAAlB;AACA,QAAMI,KAAK,GAAGT,GAAG,CAACU,MAAJ,GAAaD,KAAb,CAAmB,EAAnB,CAAd;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ,EAJwB,CAKxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,EAAAA,SAAS,CAACO,OAAV,CAAkBC,GAAG,IAAI;AACrB,QAAIb,YAAY,CAACa,GAAD,CAAhB,EAAuB;AACnBL,MAAAA,KAAK,CAACK,GAAD,CAAL,GAAad,GAAG,CAACU,MAAJ,CAAW;AACpBK,QAAAA,EAAE,EAAEf,GAAG,CAACgB,MAAJ,GAAaC,QAAb,GAAwBC,QAAxB,CAAiC,wBAAjC;AADgB,OAAX,CAAb;AAGH;AACJ,GAND;AAQA,SAAOlB,GAAG,CAACmB,KAAJ,GAAYC,WAAZ,EAAP;AACH,CAvBD;;AAyBA,OAAO,MAAMC,iBAAiB,GAAGrB,GAAG,CAACU,MAAJ,CAAW;AACxC;AACA;AACA;AACA;AACA;AACAY,EAAAA,SAAS,EAAEtB,GAAG,CAACuB,IAAJ,CAASnB,QAAT;AAN6B,CAAX,CAA1B","sourcesContent":["import * as yup from \"yup\";\r\n\r\n\r\nconst requiredList = {\r\n    drive: true,\r\n    seats: true\r\n};\r\n\r\nconst lazyFunc = (value) => {\r\n    const valueKeys = Object.keys(value);\r\n    const shape = yup.object().shape({});\r\n\r\n    console.log(valueKeys)\r\n    // if (requiredList) {\r\n    //     console.log(value)\r\n    //     return yup.object().shape({\r\n    //         [value.name]: yup.object({\r\n    //             id: yup.number().nullable().required('Обязательный параметр!')\r\n    //         })\r\n    //     });\r\n    // }\r\n\r\n    valueKeys.forEach(key => {\r\n        if (requiredList[key]) {\r\n            shape[key] = yup.object({\r\n                id: yup.number().nullable().required('Обязательный параметр!')\r\n            });\r\n        }\r\n    })\r\n\r\n    return yup.mixed().notRequired();\r\n};\r\n\r\nexport const createAdvrtSchema = yup.object({\r\n    // title: yup.string().required('Обязательное поле!'),\r\n    // location: yup.string().required('Обязательное поле!'),\r\n    // files: yup.array().required('Загрузите фотографии!'),\r\n    // description: yup.string().required('Обязательное поле!'),\r\n    // phone: yup.string().required('Обязательное поле!'),\r\n    adsParams: yup.lazy(lazyFunc)\r\n});"]},"metadata":{},"sourceType":"module"}