{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from \"@src/api/api\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\nconst initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null\n}; // Async thunk\n\nexport const fetchToken = createAsyncThunk('authReg/fetchTokenByLogin', async ({\n  phone,\n  password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const token = await userAPI.login(phone, password);\n    cookies.set('token', token, {\n      maxAge: 2 * 3600\n    });\n  } catch (e) {\n    return rejectWithValue(e.message);\n  }\n}); // Slice\n\nconst authRegSlice = createSlice({\n  name: 'authReg',\n  initialState,\n  reducers: {\n    setIsAuthAction: (state, action) => {\n      state.isAuth = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchToken.pending, state => {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchToken.fulfilled, state => {\n      state.isFetch = false;\n      state.isAuth = true;\n    });\n    builder.addCase(fetchToken.rejected, (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  setIsAuthAction\n} = authRegSlice.actions;\nexport const authReducer = authRegSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/authRegSlice.ts"],"names":["createAsyncThunk","createSlice","userAPI","Cookies","cookies","initialState","isFetch","isAuth","error","fetchToken","phone","password","rejectWithValue","token","login","set","maxAge","e","message","authRegSlice","name","reducers","setIsAuthAction","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","authReducer","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAAQC,OAAR,QAAsB,cAAtB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAIA,MAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;AAEA,MAAME,YAAsB,GAAG;AAC3BC,EAAAA,OAAO,EAAE,KADkB;AAE3BC,EAAAA,MAAM,EAAE,KAFmB;AAG3BC,EAAAA,KAAK,EAAE;AAHoB,CAA/B,C,CAMA;;AACA,OAAO,MAAMC,UAAU,GAAGT,gBAAgB,CACtC,2BADsC,EAEtC,OAAO;AAACU,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAP,EAA0B;AAACC,EAAAA;AAAD,CAA1B,KAAgD;AAC5C,MAAI;AACA,UAAMC,KAAK,GAAG,MAAMX,OAAO,CAACY,KAAR,CAAcJ,KAAd,EAAqBC,QAArB,CAApB;AACAP,IAAAA,OAAO,CAACW,GAAR,CAAY,OAAZ,EAAqBF,KAArB,EAA4B;AAACG,MAAAA,MAAM,EAAE,IAAI;AAAb,KAA5B;AACH,GAHD,CAGE,OAAOC,CAAP,EAAU;AACR,WAAOL,eAAe,CAACK,CAAC,CAACC,OAAH,CAAtB;AACH;AACJ,CATqC,CAAnC,C,CAYP;;AACA,MAAMC,YAAY,GAAGlB,WAAW,CAAC;AAC7BmB,EAAAA,IAAI,EAAE,SADuB;AAE7Bf,EAAAA,YAF6B;AAG7BgB,EAAAA,QAAQ,EAAE;AACNC,IAAAA,eAAe,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChCD,MAAAA,KAAK,CAAChB,MAAN,GAAeiB,MAAM,CAACC,OAAtB;AACH;AAHK,GAHmB;AAQ7BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,UAAU,CAACoB,OAA3B,EAAqCN,KAAD,IAAW;AAC3CA,MAAAA,KAAK,CAACjB,OAAN,GAAgB,IAAhB;AACAiB,MAAAA,KAAK,CAACf,KAAN,GAAc,IAAd;AACH,KAHD;AAIAmB,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,UAAU,CAACqB,SAA3B,EAAuCP,KAAD,IAAW;AAC7CA,MAAAA,KAAK,CAACjB,OAAN,GAAgB,KAAhB;AACAiB,MAAAA,KAAK,CAAChB,MAAN,GAAe,IAAf;AACH,KAHD;AAIAoB,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,UAAU,CAACsB,QAA3B,EAAqC,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACpDD,MAAAA,KAAK,CAACjB,OAAN,GAAgB,KAAhB;AACAiB,MAAAA,KAAK,CAACf,KAAN,GAAcgB,MAAM,CAACC,OAArB;AACH,KAHD;AAIH;AArB4B,CAAD,CAAhC;AAwBA,OAAO,MAAM;AAACH,EAAAA;AAAD,IAAoBH,YAAY,CAACa,OAAvC;AACP,OAAO,MAAMC,WAAW,GAAGd,YAAY,CAACe,OAAjC","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {userAPI} from \"@src/api/api\";\r\nimport Cookies from \"universal-cookie\";\r\nimport {IAuthInputs, IAuthReg} from \"@root/interfaces/Auth\";\r\n\r\n\r\nconst cookies = new Cookies();\r\n\r\nconst initialState: IAuthReg = {\r\n    isFetch: false,\r\n    isAuth: false,\r\n    error: null\r\n};\r\n\r\n// Async thunk\r\nexport const fetchToken = createAsyncThunk<never, IAuthInputs>(\r\n    'authReg/fetchTokenByLogin',\r\n    async ({phone, password}, {rejectWithValue}) => {\r\n        try {\r\n            const token = await userAPI.login(phone, password);\r\n            cookies.set('token', token, {maxAge: 2 * 3600});\r\n        } catch (e) {\r\n            return rejectWithValue(e.message);\r\n        }\r\n    }\r\n);\r\n\r\n// Slice\r\nconst authRegSlice = createSlice({\r\n    name: 'authReg',\r\n    initialState,\r\n    reducers: {\r\n        setIsAuthAction: (state, action) => {\r\n            state.isAuth = action.payload\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchToken.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        })\r\n        builder.addCase(fetchToken.fulfilled, (state) => {\r\n            state.isFetch = false;\r\n            state.isAuth = true;\r\n        })\r\n        builder.addCase(fetchToken.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport const {setIsAuthAction} = authRegSlice.actions;\r\nexport const authReducer = authRegSlice.reducer;"]},"metadata":{},"sourceType":"module"}