{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport { useRouter } from \"next/router\";\nimport { MenuItem, Typography } from \"@material-ui/core\";\nimport { ButtonComponent } from \"@src/components/elements/button/Button\";\nimport * as Yup from 'yup';\nimport { useStyles } from './useStyles';\nimport { CustomFormikMenu } from \"@src/components/elements/custom_formik_menu/CustomFormikMenu\";\nconst initValues = {\n  type: {\n    id: null,\n    desc: 'Выберите тип'\n  } // category: {\n  //     id: null,\n  //     desc: 'Выберите категорию'\n  // }\n\n};\nexport const CreateAdModalForm = props => {\n  const {\n    handleCloseModal\n  } = props;\n  const router = useRouter();\n  const {\n    0: anchorEl,\n    1: setAnchorEl\n  } = useState(null);\n  const validationSchema = Yup.object().shape({\n    type: {\n      id: Yup.string().required('Выберите тип объявления!')\n    } // category: Yup.string().required('Выберите категорию!'),\n\n  });\n\n  const handleMenuOpen = e => {\n    setAnchorEl(e.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleClickMenuItem = (handleSetValue, values, newValue) => () => {\n    handleSetValue(_objectSpread(_objectSpread({}, values), newValue));\n  };\n\n  const submit = () => {\n    router.push('/create_advertisement');\n  };\n\n  const classes = useStyles();\n  return __jsx(Formik, {\n    initialValues: initValues,\n    validationSchema: validationSchema,\n    onSubmit: submit\n  }, ({\n    errors,\n    touched,\n    values,\n    setValues\n  }) => {\n    console.log(errors);\n    return __jsx(Form, {\n      className: classes.root\n    }, __jsx(\"div\", null, __jsx(Typography, null, errors.type.id), __jsx(ButtonComponent, {\n      onClick: handleMenuOpen\n    }, values.type.desc), __jsx(CustomFormikMenu, {\n      name: values,\n      anchorEl: anchorEl,\n      open: Boolean(anchorEl),\n      onClose: handleMenuClose,\n      setValues: setValues\n    }, __jsx(MenuItem, {\n      value: 1,\n      onClick: handleClickMenuItem(setValues, values, {\n        type: {\n          id: 1,\n          desc: 'Объявление'\n        }\n      })\n    }, \"\\u041E\\u0431\\u044A\\u044F\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435\"), __jsx(MenuItem, {\n      value: 2,\n      onClick: handleClickMenuItem(setValues, values, {\n        type: {\n          id: 1,\n          desc: 'Торг'\n        }\n      })\n    }, \"\\u0422\\u043E\\u0440\\u0433\"))), __jsx(\"div\", {\n      className: \"form-btns\"\n    }, __jsx(ButtonComponent, {\n      onClick: handleCloseModal\n    }, __jsx(Typography, null, \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0430\")), __jsx(ButtonComponent, {\n      type: \"submit\"\n    }, __jsx(Typography, null, \"\\u041F\\u0440\\u043E\\u0434\\u043E\\u043B\\u0436\\u0438\\u0442\\u044C\"))));\n  });\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/createAdModalForm/CreateAdModalForm.tsx"],"names":["React","useState","Formik","Form","useRouter","MenuItem","Typography","ButtonComponent","Yup","useStyles","CustomFormikMenu","initValues","type","id","desc","CreateAdModalForm","props","handleCloseModal","router","anchorEl","setAnchorEl","validationSchema","object","shape","string","required","handleMenuOpen","e","currentTarget","handleMenuClose","handleClickMenuItem","handleSetValue","values","newValue","submit","push","classes","errors","touched","setValues","console","log","root","Boolean"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\"\r\nimport {Formik, Form} from \"formik\"\r\nimport {useRouter} from \"next/router\"\r\nimport {MenuItem, Typography} from \"@material-ui/core\"\r\nimport {ButtonComponent} from \"@src/components/elements/button/Button\"\r\nimport * as Yup from 'yup'\r\nimport {useStyles} from './useStyles'\r\nimport {CustomFormikMenu} from \"@src/components/elements/custom_formik_menu/CustomFormikMenu\";\r\n\r\nconst initValues = {\r\n    type: {\r\n        id: null,\r\n        desc: 'Выберите тип',\r\n    },\r\n    // category: {\r\n    //     id: null,\r\n    //     desc: 'Выберите категорию'\r\n    // }\r\n};\r\n\r\nexport const CreateAdModalForm = (props) => {\r\n    const {handleCloseModal} = props;\r\n\r\n    const router = useRouter();\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const validationSchema = Yup.object().shape<object>({\r\n        type: {\r\n            id: Yup.string().required('Выберите тип объявления!'),\r\n        }\r\n        // category: Yup.string().required('Выберите категорию!'),\r\n    });\r\n\r\n    const handleMenuOpen = (e) => {\r\n        setAnchorEl(e.currentTarget)\r\n    };\r\n\r\n    const handleMenuClose = () => {\r\n        setAnchorEl(null)\r\n    };\r\n\r\n    const handleClickMenuItem = (handleSetValue, values, newValue) => () => {\r\n        handleSetValue({...values, ...newValue});\r\n    };\r\n\r\n    const submit = () => {\r\n        router.push('/create_advertisement');\r\n    };\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <Formik initialValues={initValues} validationSchema={validationSchema} onSubmit={submit}>\r\n            {({errors, touched, values, setValues}) => {\r\n                console.log(errors)\r\n                return (\r\n                    <Form className={classes.root}>\r\n                        <div>\r\n                            <Typography>{errors.type.id}</Typography>\r\n                            <ButtonComponent onClick={handleMenuOpen}>{values.type.desc}</ButtonComponent>\r\n                            <CustomFormikMenu\r\n                                name={values}\r\n                                anchorEl={anchorEl}\r\n                                open={Boolean(anchorEl)}\r\n                                onClose={handleMenuClose}\r\n                                setValues={setValues}\r\n                            >\r\n                                <MenuItem\r\n                                    value={1}\r\n                                    onClick={handleClickMenuItem(setValues, values, {\r\n                                        type: {\r\n                                            id: 1,\r\n                                            desc: 'Объявление'\r\n                                        }\r\n                                    })}\r\n                                >\r\n                                    Объявление\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                    value={2}\r\n                                    onClick={handleClickMenuItem(setValues, values, {type: {id: 1, desc: 'Торг'}})}\r\n                                >\r\n                                    Торг\r\n                                </MenuItem>\r\n                            </CustomFormikMenu>\r\n                        </div>\r\n                        <div className='form-btns'>\r\n                            <ButtonComponent onClick={handleCloseModal}>\r\n                                <Typography>Отмена</Typography>\r\n                            </ButtonComponent>\r\n                            <ButtonComponent type='submit'>\r\n                                <Typography>Продолжить</Typography>\r\n                            </ButtonComponent>\r\n                        </div>\r\n                    </Form>\r\n                )\r\n            }}\r\n        </Formik>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}