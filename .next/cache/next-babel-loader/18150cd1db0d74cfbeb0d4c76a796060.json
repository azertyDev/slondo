{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createReducer } from '@reduxjs/toolkit';\nimport { setIsAuth, fetchTokenBegin, fetchTokenSuccess, fetchTokenFailure } from '../actions/authActions';\nconst initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null\n};\nexport const authReducer = createReducer(initialState, {\n  [setIsAuth.type]: (state, action) => state.isAuth = action.payload,\n  [fetchTokenBegin.type]: state => _objectSpread(_objectSpread({}, state), {}, {\n    isFetch: true,\n    error: null\n  }),\n  [fetchTokenSuccess.type]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    isFetch: false\n  }, action.payload),\n  [fetchTokenFailure.type]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    isFetch: false,\n    error: action.payload\n  })\n});","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/reducers/authReducer.ts"],"names":["createReducer","setIsAuth","fetchTokenBegin","fetchTokenSuccess","fetchTokenFailure","initialState","isFetch","isAuth","error","authReducer","type","state","action","payload"],"mappings":";;;;;;AACA,SAAQA,aAAR,QAA4B,kBAA5B;AACA,SAAQC,SAAR,EAAkBC,eAAlB,EAAmCC,iBAAnC,EAAsDC,iBAAtD,QAA8E,wBAA9E;AAQA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,MAAM,EAAE,KAFS;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;AAMA,OAAO,MAAMC,WAAW,GAAGT,aAAa,CAACK,YAAD,EAAe;AAC/C,GAACJ,SAAS,CAACS,IAAX,GAAkB,CAACC,KAAD,EAAQC,MAAR,KAAmBD,KAAK,CAACJ,MAAN,GAAeK,MAAM,CAACC,OADZ;AAE/C,GAACX,eAAe,CAACQ,IAAjB,GAAyBC,KAAD,oCACbA,KADa;AAEhBL,IAAAA,OAAO,EAAE,IAFO;AAGhBE,IAAAA,KAAK,EAAE;AAHS,IAFuB;AAO/C,GAACL,iBAAiB,CAACO,IAAnB,GAA0B,CAACC,KAAD,EAAQC,MAAR,qCACfD,KADe;AAElBL,IAAAA,OAAO,EAAE;AAFS,KAGfM,MAAM,CAACC,OAHQ,CAPqB;AAY/C,GAACT,iBAAiB,CAACM,IAAnB,GAA0B,CAACC,KAAD,EAAQC,MAAR,qCACfD,KADe;AAElBL,IAAAA,OAAO,EAAE,KAFS;AAGlBE,IAAAA,KAAK,EAAEI,MAAM,CAACC;AAHI;AAZqB,CAAf,CAAjC","sourcesContent":["import {AnyAction} from \"redux\"\r\nimport {createReducer} from '@reduxjs/toolkit'\r\nimport {setIsAuth,fetchTokenBegin, fetchTokenSuccess, fetchTokenFailure} from '../actions/authActions'\r\n\r\nexport type AuthTypes = {\r\n    isFetch: boolean,\r\n    isAuth: boolean,\r\n    error?: any\r\n};\r\n\r\nconst initialState = {\r\n    isFetch: false,\r\n    isAuth: false,\r\n    error: null\r\n};\r\n\r\nexport const authReducer = createReducer(initialState, {\r\n        [setIsAuth.type]: (state, action) => state.isAuth = action.payload,\r\n        [fetchTokenBegin.type]: (state) => ({\r\n                ...state,\r\n                isFetch: true,\r\n                error: null\r\n            }),\r\n        [fetchTokenSuccess.type]: (state, action) => ({\r\n                ...state,\r\n                isFetch: false,\r\n                ...action.payload\r\n            }),\r\n        [fetchTokenFailure.type]: (state, action) => ({\r\n                ...state,\r\n                isFetch: false,\r\n                error: action.payload\r\n            })\r\n});"]},"metadata":{},"sourceType":"module"}