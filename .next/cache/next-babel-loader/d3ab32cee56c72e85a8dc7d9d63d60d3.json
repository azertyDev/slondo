{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from \"@src/api/api\";\nvar initialState = {\n  isFetch: false,\n  error: null,\n  adType: {\n    id: null,\n    name: ''\n  },\n  category: {\n    id: null,\n    name: ''\n  },\n  data: []\n};\nexport var fetchAdDataForCreate = createAsyncThunk('createAdvrt/fetchAdDataForCreate', /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref, _ref2) {\n    var ctgryID, subCtgryID, lang, rejectWithValue;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ctgryID = _ref.ctgryID, subCtgryID = _ref.subCtgryID, lang = _ref.lang;\n            rejectWithValue = _ref2.rejectWithValue;\n            _context.prev = 2;\n            _context.next = 5;\n            return userAPI.getAdDataForCreate(ctgryID, subCtgryID, lang);\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](2);\n            return _context.abrupt(\"return\", rejectWithValue(_context.t0.message));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 8]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nvar createAdvrtSlice = createSlice({\n  name: 'createAdvrt',\n  initialState: initialState,\n  reducers: {\n    adTypeAction: function adTypeAction(state, action) {\n      state.adType = action.payload.adType;\n      state.category = action.payload.category;\n    },\n    resetCreateAdvrtDataAction: function resetCreateAdvrtDataAction(state) {\n      state.data = [];\n    }\n  },\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchAdDataForCreate.pending, function (state) {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchAdDataForCreate.fulfilled, function (state, action) {\n      state.isFetch = false;\n      state.data = action.payload;\n    });\n    builder.addCase(fetchAdDataForCreate.rejected, function (state, action) {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nvar resetCreateAdvrtDataAction = createAdvrtSlice.actions.resetCreateAdvrtDataAction;\nexport { resetCreateAdvrtDataAction };\nexport var createAdvrtReducer = createAdvrtSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/createAdvrtSlice.ts"],"names":["createAsyncThunk","createSlice","userAPI","initialState","isFetch","error","adType","id","name","category","data","fetchAdDataForCreate","ctgryID","subCtgryID","lang","rejectWithValue","getAdDataForCreate","message","createAdvrtSlice","reducers","adTypeAction","state","action","payload","resetCreateAdvrtDataAction","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","createAdvrtReducer","reducer"],"mappings":";;AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAAQC,OAAR,QAAsB,cAAtB;AAKA,IAAMC,YAA2B,GAAG;AAChCC,EAAAA,OAAO,EAAE,KADuB;AAEhCC,EAAAA,KAAK,EAAE,IAFyB;AAGhCC,EAAAA,MAAM,EAAE;AACJC,IAAAA,EAAE,EAAE,IADA;AAEJC,IAAAA,IAAI,EAAE;AAFF,GAHwB;AAOhCC,EAAAA,QAAQ,EAAE;AACNF,IAAAA,EAAE,EAAE,IADE;AAENC,IAAAA,IAAI,EAAE;AAFA,GAPsB;AAWhCE,EAAAA,IAAI,EAAE;AAX0B,CAApC;AAcA,OAAO,IAAMC,oBAAoB,GAAGX,gBAAgB,CAChD,kCADgD;AAAA,uEAEhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQY,YAAAA,OAAR,QAAQA,OAAR,EAAiBC,UAAjB,QAAiBA,UAAjB,EAA6BC,IAA7B,QAA6BA,IAA7B;AAAqCC,YAAAA,eAArC,SAAqCA,eAArC;AAAA;AAAA;AAAA,mBAEqBb,OAAO,CAACc,kBAAR,CAA2BJ,OAA3B,EAAoCC,UAApC,EAAgDC,IAAhD,CAFrB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAIeC,eAAe,CAAC,YAAEE,OAAH,CAJ9B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFgD;;AAAA;AAAA;AAAA;AAAA,IAA7C;AAWP,IAAMC,gBAAgB,GAAGjB,WAAW,CAAC;AACjCO,EAAAA,IAAI,EAAE,aAD2B;AAEjCL,EAAAA,YAAY,EAAZA,YAFiC;AAGjCgB,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,EAAE,sBAACC,KAAD,EAAQC,MAAR,EAAmB;AAC7BD,MAAAA,KAAK,CAACf,MAAN,GAAegB,MAAM,CAACC,OAAP,CAAejB,MAA9B;AACAe,MAAAA,KAAK,CAACZ,QAAN,GAAiBa,MAAM,CAACC,OAAP,CAAed,QAAhC;AACH,KAJK;AAKNe,IAAAA,0BAA0B,EAAE,oCAACH,KAAD,EAAW;AACnCA,MAAAA,KAAK,CAACX,IAAN,GAAa,EAAb;AACH;AAPK,GAHuB;AAYjCe,EAAAA,aAAa,EAAE,uBAACC,OAAD,EAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBhB,oBAAoB,CAACiB,OAArC,EAA8C,UAACP,KAAD,EAAW;AACrDA,MAAAA,KAAK,CAACjB,OAAN,GAAgB,IAAhB;AACAiB,MAAAA,KAAK,CAAChB,KAAN,GAAc,IAAd;AACH,KAHD;AAIAqB,IAAAA,OAAO,CAACC,OAAR,CAAgBhB,oBAAoB,CAACkB,SAArC,EAAgD,UAACR,KAAD,EAAQC,MAAR,EAAmB;AAC/DD,MAAAA,KAAK,CAACjB,OAAN,GAAgB,KAAhB;AACAiB,MAAAA,KAAK,CAACX,IAAN,GAAaY,MAAM,CAACC,OAApB;AACH,KAHD;AAIAG,IAAAA,OAAO,CAACC,OAAR,CAAgBhB,oBAAoB,CAACmB,QAArC,EAA+C,UAACT,KAAD,EAAQC,MAAR,EAAmB;AAC9DD,MAAAA,KAAK,CAACjB,OAAN,GAAgB,KAAhB;AACAiB,MAAAA,KAAK,CAAChB,KAAN,GAAciB,MAAM,CAACC,OAArB;AACH,KAHD;AAIH;AAzBgC,CAAD,CAApC;IA4BcC,0B,GAA8BN,gBAAgB,CAACa,O,CAA/CP,0B;;AACd,OAAO,IAAMQ,kBAAkB,GAAGd,gBAAgB,CAACe,OAA5C","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {userAPI} from \"@src/api/api\";\r\nimport {CreateAdState} from '@root/interfaces/Advertisement';\r\nimport {CategoryIDs} from \"@root/interfaces/Categories\";\r\n\r\n\r\nconst initialState: CreateAdState = {\r\n    isFetch: false,\r\n    error: null,\r\n    adType: {\r\n        id: null,\r\n        name: ''\r\n    },\r\n    category: {\r\n        id: null,\r\n        name: ''\r\n    },\r\n    data: []\r\n};\r\n\r\nexport const fetchAdDataForCreate = createAsyncThunk<any, CategoryIDs>(\r\n    'createAdvrt/fetchAdDataForCreate',\r\n    async ({ctgryID, subCtgryID, lang}, {rejectWithValue}) => {\r\n        try {\r\n            return await userAPI.getAdDataForCreate(ctgryID, subCtgryID, lang);\r\n        } catch (e) {\r\n            return rejectWithValue(e.message);\r\n        }\r\n    }\r\n);\r\n\r\nconst createAdvrtSlice = createSlice({\r\n    name: 'createAdvrt',\r\n    initialState,\r\n    reducers: {\r\n        adTypeAction: (state, action) => {\r\n            state.adType = action.payload.adType;\r\n            state.category = action.payload.category;\r\n        },\r\n        resetCreateAdvrtDataAction: (state) => {\r\n            state.data = [];\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchAdDataForCreate.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        })\r\n        builder.addCase(fetchAdDataForCreate.fulfilled, (state, action) => {\r\n            state.isFetch = false;\r\n            state.data = action.payload;\r\n        })\r\n        builder.addCase(fetchAdDataForCreate.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport const {resetCreateAdvrtDataAction} = createAdvrtSlice.actions;\r\nexport const createAdvrtReducer = createAdvrtSlice.reducer;"]},"metadata":{},"sourceType":"module"}