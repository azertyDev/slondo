{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport { Field } from \"formik\";\nexport const CustomField = (_ref) => {\n  let {\n    setFieldValue,\n    validate\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"setFieldValue\", \"validate\"]);\n\n  const handler = ({\n    target\n  }) => {\n    let {\n      value\n    } = target;\n\n    if (props.name === 'phone') {\n      if (value.length < 3) {\n        value = `+998${value}`;\n      } else if (value.length === 6) {\n        value = `${value}`.replace(/[0-9][0-9]$/, match => `(${match}) `);\n      }\n    }\n\n    setFieldValue(props.name, value);\n  };\n\n  return __jsx(Field, {\n    validate: validate,\n    name: props.name\n  }, ({\n    field\n  }) => __jsx(TextField, _extends({\n    fullWidth: true,\n    focused: false,\n    variant: \"outlined\",\n    value: field.value,\n    onBlur: field.onBlur,\n    onChange: handler\n  }, props)));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/custom_field/CustomField.tsx"],"names":["React","TextField","Field","CustomField","setFieldValue","validate","props","handler","target","value","name","length","replace","match","field","onBlur"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAwB,OAAxB;AACA,SAAQC,SAAR,QAAwB,mBAAxB;AACA,SAAQC,KAAR,QAAoB,QAApB;AAIA,OAAO,MAAMC,WAA6B,GAAG,UAAyC;AAAA,MAAxC;AAACC,IAAAA,aAAD;AAAgBC,IAAAA;AAAhB,GAAwC;AAAA,MAAXC,KAAW;;AAElF,QAAMC,OAAO,GAAG,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAc;AAC1B,QAAI;AAACC,MAAAA;AAAD,QAAUD,MAAd;;AAEA,QAAIF,KAAK,CAACI,IAAN,KAAe,OAAnB,EAA4B;AACxB,UAAID,KAAK,CAACE,MAAN,GAAe,CAAnB,EAAsB;AAClBF,QAAAA,KAAK,GAAI,OAAMA,KAAM,EAArB;AACH,OAFD,MAEO,IAAIA,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AAC3BF,QAAAA,KAAK,GAAI,GAAEA,KAAM,EAAT,CAAWG,OAAX,CAAmB,aAAnB,EAAmCC,KAAD,IAAY,IAAGA,KAAM,IAAvD,CAAR;AACH;AACJ;;AAEDT,IAAAA,aAAa,CAACE,KAAK,CAACI,IAAP,EAAaD,KAAb,CAAb;AACH,GAZD;;AAcA,SACI,MAAC,KAAD;AAAO,IAAA,QAAQ,EAAEJ,QAAjB;AAA2B,IAAA,IAAI,EAAEC,KAAK,CAACI;AAAvC,KAEQ,CAAC;AAACI,IAAAA;AAAD,GAAD,KACI,MAAC,SAAD;AACI,IAAA,SAAS,MADb;AAEI,IAAA,OAAO,EAAE,KAFb;AAGI,IAAA,OAAO,EAAC,UAHZ;AAII,IAAA,KAAK,EAAEA,KAAK,CAACL,KAJjB;AAKI,IAAA,MAAM,EAAEK,KAAK,CAACC,MALlB;AAMI,IAAA,QAAQ,EAAER;AANd,KAOQD,KAPR,EAHZ,CADJ;AAiBH,CAjCM","sourcesContent":["import React, {FC} from \"react\"\r\nimport {TextField} from \"@material-ui/core\"\r\nimport {Field} from \"formik\"\r\nimport {ICustomField} from \"../../../../interfaces/ICustomField\"\r\n\r\n\r\nexport const CustomField: FC<ICustomField> = ({setFieldValue, validate, ...props}) => {\r\n\r\n    const handler = ({target}) => {\r\n        let {value} = target;\r\n\r\n        if (props.name === 'phone') {\r\n            if (value.length < 3) {\r\n                value = `+998${value}`;\r\n            } else if (value.length === 6) {\r\n                value = `${value}`.replace(/[0-9][0-9]$/, (match) => `(${match}) `);\r\n            }\r\n        }\r\n\r\n        setFieldValue(props.name, value);\r\n    };\r\n\r\n    return (\r\n        <Field validate={validate} name={props.name}>\r\n            {\r\n                ({field}) => (\r\n                    <TextField\r\n                        fullWidth\r\n                        focused={false}\r\n                        variant='outlined'\r\n                        value={field.value}\r\n                        onBlur={field.onBlur}\r\n                        onChange={handler}\r\n                        {...props}\r\n                    />\r\n                )\r\n            }\r\n        </Field>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}