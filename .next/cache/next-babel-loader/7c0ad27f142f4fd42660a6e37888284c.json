{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { DragDropContext, Droppable, Draggable, resetServerContext } from 'react-beautiful-dnd';\nexport const DropZone = props => {\n  const {\n    images = [],\n    setImages\n  } = props;\n\n  function handleOnDragEnd(result) {\n    if (!result.destination) return;\n    const items = Array.from(images);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    setImages(items);\n  }\n\n  resetServerContext();\n  return __jsx(\"div\", {\n    className: \"App\"\n  }, __jsx(\"header\", {\n    className: \"App-header\"\n  }, __jsx(\"h1\", null, \"Final Space Characters\"), __jsx(DragDropContext, {\n    onDragEnd: handleOnDragEnd\n  }, __jsx(Droppable, {\n    droppableId: \"characters\",\n    isDropDisabled: false\n  }, provided => __jsx(\"ul\", _extends({\n    className: \"characters\"\n  }, provided.droppableProps, {\n    ref: provided.innerRef\n  }), images.map(({\n    id,\n    name,\n    url\n  }, index) => {\n    return __jsx(Draggable, {\n      key: id,\n      draggableId: id,\n      index: index\n    }, provided => __jsx(\"li\", _extends({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps), __jsx(\"div\", {\n      className: \"characters-thumb\"\n    }, __jsx(\"img\", {\n      src: url,\n      alt: `${name} Thumb`\n    }))));\n  }), provided.placeholder)))));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/drop_zone/DropZone.tsx"],"names":["React","DragDropContext","Droppable","Draggable","resetServerContext","DropZone","props","images","setImages","handleOnDragEnd","result","destination","items","Array","from","reorderedItem","splice","source","index","provided","droppableProps","innerRef","map","id","name","url","draggableProps","dragHandleProps","placeholder"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkC,OAAlC;AACA,SAAQC,eAAR,EAAyBC,SAAzB,EAAoCC,SAApC,EAA+CC,kBAA/C,QAAwE,qBAAxE;AAGA,OAAO,MAAMC,QAAoD,GAAIC,KAAD,IAAW;AAC3E,QAAM;AAACC,IAAAA,MAAM,GAAG,EAAV;AAAcC,IAAAA;AAAd,MAA2BF,KAAjC;;AAEA,WAASG,eAAT,CAAyBC,MAAzB,EAAiC;AAC7B,QAAI,CAACA,MAAM,CAACC,WAAZ,EAAyB;AAEzB,UAAMC,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAWP,MAAX,CAAd;AACA,UAAM,CAACQ,aAAD,IAAkBH,KAAK,CAACI,MAAN,CAAaN,MAAM,CAACO,MAAP,CAAcC,KAA3B,EAAkC,CAAlC,CAAxB;AACAN,IAAAA,KAAK,CAACI,MAAN,CAAaN,MAAM,CAACC,WAAP,CAAmBO,KAAhC,EAAuC,CAAvC,EAA0CH,aAA1C;AAEAP,IAAAA,SAAS,CAACI,KAAD,CAAT;AACH;;AAEDR,EAAAA,kBAAkB;AAElB,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAQ,IAAA,SAAS,EAAC;AAAlB,KACI,2CADJ,EAEI,MAAC,eAAD;AAAiB,IAAA,SAAS,EAAEK;AAA5B,KACI,MAAC,SAAD;AAAW,IAAA,WAAW,EAAC,YAAvB;AAAoC,IAAA,cAAc,EAAE;AAApD,KACMU,QAAD,IACG;AAAI,IAAA,SAAS,EAAC;AAAd,KAA+BA,QAAQ,CAACC,cAAxC;AAAwD,IAAA,GAAG,EAAED,QAAQ,CAACE;AAAtE,MACKd,MAAM,CAACe,GAAP,CAAW,CAAC;AAACC,IAAAA,EAAD;AAAKC,IAAAA,IAAL;AAAWC,IAAAA;AAAX,GAAD,EAAkBP,KAAlB,KAA4B;AACpC,WACI,MAAC,SAAD;AAAW,MAAA,GAAG,EAAEK,EAAhB;AAAoB,MAAA,WAAW,EAAEA,EAAjC;AAAqC,MAAA,KAAK,EAAEL;AAA5C,OACMC,QAAD,IACG;AAAI,MAAA,GAAG,EAAEA,QAAQ,CAACE;AAAlB,OAAgCF,QAAQ,CAACO,cAAzC,EAA6DP,QAAQ,CAACQ,eAAtE,GACI;AAAK,MAAA,SAAS,EAAC;AAAf,OACI;AAAK,MAAA,GAAG,EAAEF,GAAV;AAAe,MAAA,GAAG,EAAG,GAAED,IAAK;AAA5B,MADJ,CADJ,CAFR,CADJ;AAWH,GAZA,CADL,EAcKL,QAAQ,CAACS,WAdd,CAFR,CADJ,CAFJ,CADJ,CADJ;AA6BH,CA5CM","sourcesContent":["import React, {Dispatch, FC} from 'react';\r\nimport {DragDropContext, Droppable, Draggable, resetServerContext} from 'react-beautiful-dnd';\r\n\r\n\r\nexport const DropZone: FC<{images: [], setImages: Dispatch<any>}> = (props) => {\r\n    const {images = [], setImages} = props;\r\n\r\n    function handleOnDragEnd(result) {\r\n        if (!result.destination) return;\r\n\r\n        const items = Array.from(images);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        setImages(items);\r\n    }\r\n\r\n    resetServerContext();\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <h1>Final Space Characters</h1>\r\n                <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                    <Droppable droppableId=\"characters\" isDropDisabled={false}>\r\n                        {(provided) => (\r\n                            <ul className=\"characters\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                                {images.map(({id, name, url}, index) => {\r\n                                    return (\r\n                                        <Draggable key={id} draggableId={id} index={index}>\r\n                                            {(provided) => (\r\n                                                <li ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                                    <div className=\"characters-thumb\">\r\n                                                        <img src={url} alt={`${name} Thumb`}/>\r\n                                                    </div>\r\n                                                </li>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    );\r\n                                })}\r\n                                {provided.placeholder}\r\n                            </ul>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n            </header>\r\n        </div>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}