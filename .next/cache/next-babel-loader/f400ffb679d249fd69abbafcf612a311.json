{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { Grid, Hidden, Container, Typography } from '@material-ui/core';\nimport { CreateAdvertisement } from './createAdvertisement/CreateAdvertisement';\nimport { SuccessAdvertisement } from './successAdvertisement/SuccessAdvertisement';\nimport { Formik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchAdDataForCreate } from '@src/redux/slices/createAdvrtSlice';\nimport { ButtonComponent } from \"@src/components/elements/button/Button\";\nimport { i18n } from '@root/i18n'; // styles\n\nimport { useStyles } from './useStyles';\nexport const Advertisement = props => {\n  const store = useSelector(store => store);\n  const {\n    categories,\n    createAdvrt\n  } = store;\n  const dispatch = useDispatch();\n  const lang = i18n.language;\n  const {\n    0: typeAnchor,\n    1: setTypeAnchor\n  } = useState(null);\n  const {\n    0: categoryAnchor,\n    1: setCategoryAnchor\n  } = useState(null);\n  const {\n    0: subCategoryAnchor,\n    1: setSubCategoryAnchor\n  } = useState(null);\n  const {\n    0: isPreview,\n    1: setIsPreview\n  } = useState(false);\n\n  const handleMenuOpen = setAnchor => e => {\n    setAnchor(e.currentTarget);\n  };\n\n  const handleMenuClose = setAnchor => () => {\n    setAnchor(null);\n  };\n\n  const handlePreview = value => () => {\n    setIsPreview(value);\n  };\n\n  const initVals = {\n    adType: {\n      id: null,\n      name: 'Тип объявления'\n    },\n    adCategory: {\n      id: null,\n      name: 'Выберите категорию',\n      childs: []\n    },\n    adSubCategory: {\n      id: null,\n      name: 'Выберите под категорию'\n    }\n  };\n\n  const submit = () => {\n    isPreview ? setIsPreview(true) : console.log('submit');\n  };\n\n  const classes = useStyles();\n  return __jsx(Container, {\n    maxWidth: \"lg\"\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 9\n  }, __jsx(Formik, {\n    initialValues: initVals,\n    onSubmit: submit\n  }, ({\n    errors,\n    touched,\n    values,\n    setValues,\n    handleBlur\n  }) => {\n    const handleChange = event => {\n      setValues(event.target.value);\n    };\n\n    const handleCheckboxChange = event => {\n      setValues(event.target.checked);\n    };\n\n    const handleClickMenuItem = (valueName, setAnchor) => newValue => () => {\n      const {\n        adCategory\n      } = values;\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        [valueName]: newValue\n      }));\n      handleMenuClose(setAnchor)();\n\n      if (valueName === 'adSubCategory') {\n        dispatch(fetchAdDataForCreate({\n          lang,\n          ctgryID: adCategory.id,\n          subCtgryID: newValue.id\n        }));\n      }\n    };\n\n    const handleClickMenuCategory = setAnchor => newValue => () => {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        adCategory: newValue,\n        adSubCategory: initVals.adSubCategory\n      }));\n      handleMenuClose(setAnchor)();\n    };\n\n    return __jsx(React.Fragment, null, props.isSuccess ? __jsx(SuccessAdvertisement, null) : __jsx(CreateAdvertisement, {\n      errors: errors,\n      touched: touched,\n      values: values,\n      typeAnchor: typeAnchor,\n      setTypeAnchor: setTypeAnchor,\n      categories: categories,\n      categoryAnchor: categoryAnchor,\n      setCategoryAnchor: setCategoryAnchor,\n      subCategoryAnchor: subCategoryAnchor,\n      setSubCategoryAnchor: setSubCategoryAnchor,\n      handleBlur: handleBlur,\n      handleMenuOpen: handleMenuOpen,\n      handleMenuClose: handleMenuClose,\n      handleClickMenuItem: handleClickMenuItem,\n      handleCheckboxChange: handleCheckboxChange,\n      handleClickMenuCategory: handleClickMenuCategory\n    }), __jsx(\"div\", {\n      className: classes.nextButtonBlock\n    }, isPreview && __jsx(ButtonComponent, {\n      type: \"submit\",\n      className: classes.nextButton,\n      onClick: handlePreview(false)\n    }, __jsx(Typography, null, \"\\u041D\\u0430\\u0437\\u0430\\u0434\")), __jsx(ButtonComponent, {\n      type: \"submit\",\n      className: classes.nextButton\n    }, __jsx(Typography, {\n      style: {\n        color: '#fafafa'\n      }\n    }, isPreview ? 'Отпарвить на модерацию' : 'Далее'))));\n  })), __jsx(Hidden, {\n    smDown: true\n  }, __jsx(Grid, {\n    item: true,\n    md: 3,\n    container: true,\n    justify: \"flex-end\",\n    className: classes.adBanner\n  }, __jsx(Grid, {\n    item: true,\n    md: 12\n  }, __jsx(\"div\", {\n    className: \"right-banner\"\n  }))))));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/Advertisement.tsx"],"names":["React","useState","Grid","Hidden","Container","Typography","CreateAdvertisement","SuccessAdvertisement","Formik","useDispatch","useSelector","fetchAdDataForCreate","ButtonComponent","i18n","useStyles","Advertisement","props","store","categories","createAdvrt","dispatch","lang","language","typeAnchor","setTypeAnchor","categoryAnchor","setCategoryAnchor","subCategoryAnchor","setSubCategoryAnchor","isPreview","setIsPreview","handleMenuOpen","setAnchor","e","currentTarget","handleMenuClose","handlePreview","value","initVals","adType","id","name","adCategory","childs","adSubCategory","submit","console","log","classes","errors","touched","values","setValues","handleBlur","handleChange","event","target","handleCheckboxChange","checked","handleClickMenuItem","valueName","newValue","ctgryID","subCtgryID","handleClickMenuCategory","isSuccess","nextButtonBlock","nextButton","color","adBanner"],"mappings":"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","sourcesContent":["import React, {FC, useState} from 'react';\r\nimport {Grid, Hidden, Container, Typography} from '@material-ui/core';\r\nimport {CreateAdvertisement} from './createAdvertisement/CreateAdvertisement';\r\nimport {SuccessAdvertisement} from './successAdvertisement/SuccessAdvertisement';\r\nimport {AdvertisementProps} from \"@root/interfaces/Advertisement\";\r\nimport {adTypeAndCtgrySchema} from \"@src/validation_schemas/validationSchemas\";\r\nimport {Formik, FormikProps} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchAdDataForCreate} from '@src/redux/slices/createAdvrtSlice';\r\nimport {RootState} from \"@src/redux/rootReducer\";\r\nimport {ButtonComponent} from \"@src/components/elements/button/Button\";\r\nimport {PreviewAdvertisement} from './previewAdvertisement/PreviewAdvertisement';\r\nimport {i18n} from '@root/i18n';\r\n// styles\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const Advertisement: FC<AdvertisementProps> = (props) => {\r\n\r\n    const store = useSelector((store: RootState) => store);\r\n    const {categories, createAdvrt} = store;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const lang = i18n.language;\r\n\r\n    const [typeAnchor, setTypeAnchor] = useState(null);\r\n    const [categoryAnchor, setCategoryAnchor] = useState(null);\r\n    const [subCategoryAnchor, setSubCategoryAnchor] = useState(null);\r\n    const [isPreview, setIsPreview] = useState(false);\r\n\r\n    const handleMenuOpen = (setAnchor) => (e) => {\r\n        setAnchor(e.currentTarget);\r\n    };\r\n\r\n    const handleMenuClose = (setAnchor) => () => {\r\n        setAnchor(null);\r\n    };\r\n\r\n    const handlePreview = (value) => () => {\r\n        setIsPreview(value)\r\n    };\r\n\r\n    const initVals = {\r\n        adType: {\r\n            id: null,\r\n            name: 'Тип объявления'\r\n        },\r\n        adCategory: {\r\n            id: null,\r\n            name: 'Выберите категорию',\r\n            childs: []\r\n        },\r\n        adSubCategory: {\r\n            id: null,\r\n            name: 'Выберите под категорию'\r\n        }\r\n    };\r\n\r\n    const submit = () => {\r\n        isPreview\r\n            ? setIsPreview(true)\r\n            : console.log('submit')\r\n    };\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <Container maxWidth=\"lg\">\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={12} md={9}>\r\n                    <Formik initialValues={initVals} onSubmit={submit}>\r\n                        {\r\n                            ({\r\n                                 errors,\r\n                                 touched,\r\n                                 values,\r\n                                 setValues,\r\n                                 handleBlur\r\n                             }: FormikProps<any> & { errors: any }) => {\r\n\r\n                                const handleChange = (event) => {\r\n                                    setValues(event.target.value)\r\n                                };\r\n\r\n                                const handleCheckboxChange = (event) => {\r\n                                    setValues(event.target.checked)\r\n                                };\r\n\r\n                                const handleClickMenuItem = (valueName, setAnchor) => (newValue) => () => {\r\n                                    const {adCategory} = values;\r\n\r\n                                    setValues({...values, [valueName]: newValue});\r\n                                    handleMenuClose(setAnchor)();\r\n\r\n                                    if (valueName === 'adSubCategory') {\r\n                                        dispatch(fetchAdDataForCreate({\r\n                                            lang,\r\n                                            ctgryID: adCategory.id,\r\n                                            subCtgryID: newValue.id,\r\n                                        }))\r\n                                    }\r\n                                };\r\n\r\n                                const handleClickMenuCategory = (setAnchor) => (newValue) => () => {\r\n                                    setValues({\r\n                                        ...values,\r\n                                        adCategory: newValue,\r\n                                        adSubCategory: initVals.adSubCategory\r\n                                    });\r\n                                    handleMenuClose(setAnchor)();\r\n                                };\r\n\r\n                                return (\r\n                                    <>\r\n                                        {\r\n                                            props.isSuccess\r\n                                                ? <SuccessAdvertisement/>\r\n                                                : <CreateAdvertisement\r\n                                                    errors={errors}\r\n                                                    touched={touched}\r\n                                                    values={values}\r\n                                                    typeAnchor={typeAnchor}\r\n                                                    setTypeAnchor={setTypeAnchor}\r\n                                                    categories={categories}\r\n                                                    categoryAnchor={categoryAnchor}\r\n                                                    setCategoryAnchor={setCategoryAnchor}\r\n                                                    subCategoryAnchor={subCategoryAnchor}\r\n                                                    setSubCategoryAnchor={setSubCategoryAnchor}\r\n                                                    handleBlur={handleBlur}\r\n                                                    handleMenuOpen={handleMenuOpen}\r\n                                                    handleMenuClose={handleMenuClose}\r\n                                                    handleClickMenuItem={handleClickMenuItem}\r\n                                                    handleCheckboxChange={handleCheckboxChange}\r\n                                                    handleClickMenuCategory={handleClickMenuCategory}\r\n                                                />\r\n                                        }\r\n                                        <div className={classes.nextButtonBlock}>\r\n                                            {\r\n                                                isPreview && (\r\n                                                    <ButtonComponent\r\n                                                        type='submit'\r\n                                                        className={classes.nextButton}\r\n                                                        onClick={handlePreview(false)}\r\n                                                    >\r\n                                                        <Typography>\r\n                                                            Назад\r\n                                                        </Typography>\r\n                                                    </ButtonComponent>\r\n                                                )\r\n                                            }\r\n                                            <ButtonComponent\r\n                                                type='submit'\r\n                                                className={classes.nextButton}\r\n                                            >\r\n                                                <Typography style={{color: '#fafafa'}}>\r\n                                                    {\r\n                                                        isPreview\r\n                                                            ? 'Отпарвить на модерацию'\r\n                                                            : 'Далее'\r\n                                                    }\r\n                                                </Typography>\r\n                                            </ButtonComponent>\r\n                                        </div>\r\n                                    </>\r\n                                )\r\n                            }\r\n                        }\r\n                    </Formik>\r\n                </Grid>\r\n                <Hidden smDown>\r\n                    <Grid\r\n                        item\r\n                        md={3}\r\n                        container\r\n                        justify=\"flex-end\"\r\n                        className={classes.adBanner}\r\n                    >\r\n                        <Grid item md={12}>\r\n                            <div className=\"right-banner\"/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Hidden>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}