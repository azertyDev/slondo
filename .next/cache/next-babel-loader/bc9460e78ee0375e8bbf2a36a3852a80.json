{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { TextField } from \"@material-ui/core\";\n\nconst formatData = list => {\n  return list.reduce((acc, row) => {\n    row.cities.forEach(city => {\n      if (city.district.length) {\n        city.district.forEach(district => {\n          acc = [...acc, {\n            region_id: row.id,\n            region: row.name,\n            city_id: city.id,\n            city: city.name,\n            district_id: district.id,\n            district: district.name\n          }];\n        });\n      } else {\n        acc = [...acc, {\n          region_id: row.id,\n          region: row.name,\n          city_id: city.id,\n          city: city.name\n        }];\n      }\n    });\n    return acc;\n  }, []);\n};\n\nexport const LocationAutocomplete = (_ref) => {\n  let {\n    values,\n    setValues\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"values\", \"setValues\"]);\n\n  const optionSelected = ({\n    district_id,\n    city_id\n  }, value) => {\n    return value.district_id ? district_id === value.district_id : city_id === value.city_id;\n  };\n\n  const option = location => {\n    return location.district ? `${location.district}, ${location.city}, ${location.region}` : `${location.city}, ${location.region}`;\n  };\n\n  const onChange = (_, val) => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      location: val\n    }));\n  };\n\n  return __jsx(Autocomplete, {\n    value: values.location,\n    onChange: onChange,\n    noOptionsText: \"\\u0413\\u043E\\u0440\\u043E\\u0434 \\u0438\\u043B\\u0438 \\u0440\\u0435\\u0433\\u0438\\u043E\\u043D \\u0441 \\u0442\\u0430\\u043A\\u0438\\u043C \\u0438\\u043C\\u0435\\u043D\\u0435\\u043C \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\",\n    options: formatData(props.list),\n    getOptionSelected: optionSelected,\n    getOptionLabel: option,\n    renderInput: params => {\n      return __jsx(TextField, _extends({\n        fullWidth: true,\n        focused: false,\n        variant: \"outlined\"\n      }, params, props));\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module"}