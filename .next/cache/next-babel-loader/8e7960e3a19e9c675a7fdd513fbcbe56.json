{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { DragDropContext, resetServerContext } from 'react-beautiful-dnd';\nimport { CustomDroppable } from \"../preview_photos/CustomDroppable\";\nexport const PreviewPhotos = props => {\n  resetServerContext();\n  const {\n    values,\n    setValues,\n    isPreview\n  } = props;\n  const {\n    files\n  } = values;\n\n  const handleOnDragEnd = ({\n    destination,\n    source\n  }) => {\n    if (!destination) return;\n    const items = files;\n    const [reorderedItem] = items.splice(source.index, 1);\n    items.splice(destination.index, 0, reorderedItem);\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      files: items\n    }));\n  };\n\n  const handleUploadFile = ({\n    target\n  }) => {\n    const photos = Array.from(target.files);\n    const totalSize = files.reduce((total, item) => total + item.file.size, 0);\n    console.log(photos[1]); // if ((totalSize + photos[0].size) < TOTAL_FILES_SIZE_LIMIT) {\n\n    photos.forEach((photo, index) => {\n      if (photos[index]) {\n        files.splice(index, 1, {\n          file: photos[index],\n          url: URL.createObjectURL(photos[index])\n        });\n      }\n    });\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      files\n    })); // }\n  };\n\n  const removeFile = url => () => {\n    files.map((item, index) => {\n      if (item.url === url) {\n        files.splice(index, 1);\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          files\n        }));\n      }\n    });\n  };\n\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    disabled: isPreview,\n    onChange: handleUploadFile,\n    multiple: true,\n    accept: \"image/png,image/jpeg\"\n  }), __jsx(DragDropContext, {\n    enableDefaultSensors: true,\n    onDragEnd: handleOnDragEnd\n  }, __jsx(CustomDroppable, {\n    droppableId: \"firstRow\",\n    files: files.slice(0, 4),\n    isPreview: isPreview,\n    removeFile: removeFile\n  }), __jsx(CustomDroppable, {\n    droppableId: \"secondRow\",\n    files: files.slice(4),\n    isPreview: isPreview,\n    removeFile: removeFile\n  })));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/preview_photos/PreviewPhotos.tsx"],"names":["React","DragDropContext","resetServerContext","CustomDroppable","PreviewPhotos","props","values","setValues","isPreview","files","handleOnDragEnd","destination","source","items","reorderedItem","splice","index","handleUploadFile","target","photos","Array","from","totalSize","reduce","total","item","file","size","console","log","forEach","photo","url","URL","createObjectURL","removeFile","map","slice"],"mappings":"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","sourcesContent":["import React, {Dispatch, FC} from 'react';\r\nimport {DragDropContext, resetServerContext, DropResult} from 'react-beautiful-dnd';\r\nimport {TOTAL_FILES_LIMIT, TOTAL_FILES_SIZE_LIMIT} from '@src/constants';\r\nimport {CreateAdFields, FileType} from \"@root/interfaces/Advertisement\";\r\nimport {CustomDroppable} from \"../preview_photos/CustomDroppable\";\r\n\r\n\r\ninterface IPreviewPhotos {\r\n    values: CreateAdFields,\r\n    setValues: Dispatch<unknown>\r\n    isPreview: boolean\r\n}\r\n\r\nexport const PreviewPhotos: FC<IPreviewPhotos> = (props) => {\r\n    resetServerContext();\r\n\r\n    const {values, setValues, isPreview} = props;\r\n    const {files} = values;\r\n\r\n    const handleOnDragEnd = ({destination, source}: DropResult): void => {\r\n        if (!destination) return;\r\n\r\n        const items = files;\r\n        const [reorderedItem] = items.splice(source.index, 1);\r\n        items.splice(destination.index, 0, reorderedItem);\r\n\r\n        setValues({...values, files: items});\r\n    };\r\n\r\n    const handleUploadFile = ({target}) => {\r\n        const photos: any = Array.from(target.files);\r\n\r\n        const totalSize = files.reduce(\r\n            (total, item: { file: any }) => total + item.file.size,\r\n            0\r\n        );\r\n        console.log(photos[1])\r\n        // if ((totalSize + photos[0].size) < TOTAL_FILES_SIZE_LIMIT) {\r\n            photos.forEach((photo, index) => {\r\n                if (photos[index]) {\r\n                    files.splice(\r\n                        index,\r\n                        1,\r\n                        {\r\n                            file: photos[index],\r\n                            url: URL.createObjectURL(photos[index])\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n\r\n            setValues({\r\n                ...values,\r\n                files\r\n            })\r\n        // }\r\n    };\r\n\r\n    const removeFile = (url) => () => {\r\n        files.map((item: FileType, index) => {\r\n            if (item.url === url) {\r\n                files.splice(index, 1);\r\n                setValues({...values, files});\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                type='file'\r\n                disabled={isPreview}\r\n                onChange={handleUploadFile}\r\n                multiple={true}\r\n                accept=\"image/png,image/jpeg\"\r\n            />\r\n            <DragDropContext enableDefaultSensors={true} onDragEnd={handleOnDragEnd}>\r\n                <CustomDroppable\r\n                    droppableId='firstRow'\r\n                    files={files.slice(0, 4)}\r\n                    isPreview={isPreview}\r\n                    removeFile={removeFile}\r\n                />\r\n                <CustomDroppable\r\n                    droppableId='secondRow'\r\n                    files={files.slice(4)}\r\n                    isPreview={isPreview}\r\n                    removeFile={removeFile}\r\n                />\r\n            </DragDropContext>\r\n        </div>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}