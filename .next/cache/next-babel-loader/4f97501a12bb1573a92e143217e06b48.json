{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { FETCH_SELF_DATA_BEGIN, FETCH_SELF_DATA_FAILURE, FETCH_SELF_DATA_SUCCESS } from '../actions/selfDataActions';\nconst initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null\n};\nexport const auth = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload.data);\n\n    case FETCH_SELF_DATA_BEGIN:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isFetch: true,\n        error: null\n      });\n\n    case FETCH_SELF_DATA_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isFetch: false\n      }, action.payload);\n\n    case FETCH_SELF_DATA_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isFetch: false,\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/reducers/auth.ts"],"names":["HYDRATE","FETCH_SELF_DATA_BEGIN","FETCH_SELF_DATA_FAILURE","FETCH_SELF_DATA_SUCCESS","initialState","isFetch","isAuth","error","auth","state","action","type","payload","data"],"mappings":";;;;;;AACA,SAAQA,OAAR,QAAsB,oBAAtB;AACA,SAAQC,qBAAR,EAA+BC,uBAA/B,EAAwDC,uBAAxD,QAAsF,4BAAtF;AAQA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,MAAM,EAAE,KAFS;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;AAMA,OAAO,MAAMC,IAAI,GAAG,CAACC,KAAgB,GAAGL,YAApB,EAAkCM,MAAlC,KAAmE;AACnF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKX,OAAL;AACI,6CACOS,KADP,GAEOC,MAAM,CAACE,OAAP,CAAeC,IAFtB;;AAIJ,SAAKZ,qBAAL;AACI,6CACOQ,KADP;AAEIJ,QAAAA,OAAO,EAAE,IAFb;AAGIE,QAAAA,KAAK,EAAE;AAHX;;AAKJ,SAAKJ,uBAAL;AACI,6CACOM,KADP;AAEIJ,QAAAA,OAAO,EAAE;AAFb,SAGOK,MAAM,CAACE,OAHd;;AAKJ,SAAKV,uBAAL;AACI,6CACOO,KADP;AAEIJ,QAAAA,OAAO,EAAE,KAFb;AAGIE,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAHlB;;AAKJ;AACI,aAAOH,KAAP;AAzBR;AA2BH,CA5BM","sourcesContent":["import {AnyAction} from \"redux\"\r\nimport {HYDRATE} from \"next-redux-wrapper\"\r\nimport {FETCH_SELF_DATA_BEGIN, FETCH_SELF_DATA_FAILURE, FETCH_SELF_DATA_SUCCESS} from '../actions/selfDataActions'\r\n\r\ntype AuthTypes = {\r\n    isFetch: boolean,\r\n    isAuth: boolean,\r\n    error: any\r\n};\r\n\r\nconst initialState = {\r\n    isFetch: false,\r\n    isAuth: false,\r\n    error: null\r\n};\r\n\r\nexport const auth = (state: AuthTypes = initialState, action: AnyAction): AuthTypes => {\r\n    switch (action.type) {\r\n        case HYDRATE:\r\n            return {\r\n                ...state,\r\n                ...action.payload.data\r\n            }\r\n        case FETCH_SELF_DATA_BEGIN:\r\n            return {\r\n                ...state,\r\n                isFetch: true,\r\n                error: null\r\n            }\r\n        case FETCH_SELF_DATA_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isFetch: false,\r\n                ...action.payload\r\n            }\r\n        case FETCH_SELF_DATA_FAILURE:\r\n            return {\r\n                ...state,\r\n                isFetch: false,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}