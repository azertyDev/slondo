{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createWrapper } from 'next-redux-wrapper';\nimport reducers from \"./reducers\";\nimport rootSaga from './sagas';\nconst sagaMiddleware = createSagaMiddleware();\nconst enhancer = composeWithDevTools(applyMiddleware(sagaMiddleware)); // create a makeStore function\n\nconst makeStore = () => {\n  const store = createStore(reducers, enhancer);\n\n  store.runSaga = () => {\n    // Avoid running twice\n    if (store.saga) return;\n    store.saga = sagaMiddleware.run(rootSaga);\n  };\n\n  store.stopSaga = async () => {\n    // Avoid running twice\n    if (!store.saga) return;\n    store.dispatch(END);\n    await store.saga.done;\n    store.saga = null;\n  };\n\n  store.execSagaTasks = async (isServer, tasks) => {\n    // run saga\n    store.runSaga(); // dispatch saga tasks\n\n    tasks(store.dispatch); // Stop running and wait for the tasks to be done\n\n    await store.stopSaga(); // Re-run on client side\n\n    if (!isServer) {\n      store.runSaga();\n    }\n  };\n};\n\nsagaMiddleware.run(rootSaga); // export an assembled wrapper\n\nexport default createWrapper(makeStore);","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/store.ts"],"names":["createStore","applyMiddleware","createSagaMiddleware","composeWithDevTools","createWrapper","reducers","rootSaga","sagaMiddleware","enhancer","makeStore","store","runSaga","saga","run","stopSaga","dispatch","END","done","execSagaTasks","isServer","tasks"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,SAAmBC,aAAnB,QAAuC,oBAAvC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,SAArB;AAIA,MAAMC,cAAc,GAAGL,oBAAoB,EAA3C;AAEA,MAAMM,QAAQ,GAAGL,mBAAmB,CAChCF,eAAe,CAACM,cAAD,CADiB,CAApC,C,CAIA;;AACA,MAAME,SAAoB,GAAG,MAAM;AAE/B,QAAMC,KAAK,GAAGV,WAAW,CAACK,QAAD,EAAWG,QAAX,CAAzB;;AAEAE,EAAAA,KAAK,CAACC,OAAN,GAAgB,MAAM;AAClB;AACA,QAAID,KAAK,CAACE,IAAV,EAAgB;AAChBF,IAAAA,KAAK,CAACE,IAAN,GAAaL,cAAc,CAACM,GAAf,CAAmBP,QAAnB,CAAb;AACH,GAJD;;AAMAI,EAAAA,KAAK,CAACI,QAAN,GAAiB,YAAY;AACzB;AACA,QAAI,CAACJ,KAAK,CAACE,IAAX,EAAiB;AACjBF,IAAAA,KAAK,CAACK,QAAN,CAAeC,GAAf;AACA,UAAMN,KAAK,CAACE,IAAN,CAAWK,IAAjB;AACAP,IAAAA,KAAK,CAACE,IAAN,GAAa,IAAb;AACH,GAND;;AAQAF,EAAAA,KAAK,CAACQ,aAAN,GAAsB,OAAOC,QAAP,EAAiBC,KAAjB,KAA2B;AAC7C;AACAV,IAAAA,KAAK,CAACC,OAAN,GAF6C,CAG7C;;AACAS,IAAAA,KAAK,CAACV,KAAK,CAACK,QAAP,CAAL,CAJ6C,CAK7C;;AACA,UAAML,KAAK,CAACI,QAAN,EAAN,CAN6C,CAO7C;;AACA,QAAI,CAACK,QAAL,EAAe;AACXT,MAAAA,KAAK,CAACC,OAAN;AACH;AACJ,GAXD;AAYH,CA9BD;;AAgCAJ,cAAc,CAACM,GAAf,CAAmBP,QAAnB,E,CAEA;;AACA,eAAeF,aAAa,CAAWK,SAAX,CAA5B","sourcesContent":["import {createStore, applyMiddleware} from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport {MakeStore, createWrapper} from 'next-redux-wrapper'\r\nimport reducers from \"./reducers\"\r\nimport rootSaga from './sagas'\r\n\r\nexport type AppState = ReturnType<typeof reducers>;\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst enhancer = composeWithDevTools(\r\n    applyMiddleware(sagaMiddleware),\r\n);\r\n\r\n// create a makeStore function\r\nconst makeStore: MakeStore = () => {\r\n\r\n    const store = createStore(reducers, enhancer);\r\n\r\n    store.runSaga = () => {\r\n        // Avoid running twice\r\n        if (store.saga) return;\r\n        store.saga = sagaMiddleware.run(rootSaga);\r\n    };\r\n\r\n    store.stopSaga = async () => {\r\n        // Avoid running twice\r\n        if (!store.saga) return;\r\n        store.dispatch(END);\r\n        await store.saga.done;\r\n        store.saga = null;\r\n    };\r\n\r\n    store.execSagaTasks = async (isServer, tasks) => {\r\n        // run saga\r\n        store.runSaga();\r\n        // dispatch saga tasks\r\n        tasks(store.dispatch);\r\n        // Stop running and wait for the tasks to be done\r\n        await store.stopSaga();\r\n        // Re-run on client side\r\n        if (!isServer) {\r\n            store.runSaga();\r\n        }\r\n    };\r\n}\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\n// export an assembled wrapper\r\nexport default createWrapper<AppState>(makeStore);"]},"metadata":{},"sourceType":"module"}