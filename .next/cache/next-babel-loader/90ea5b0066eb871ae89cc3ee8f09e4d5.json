{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useRef, useState, useEffect } from 'react';\nimport { CustomSlider } from '../custom_slider/CustomSlider';\nimport { useStyles } from './useStyles';\nexport var SyncSliders = function SyncSliders(props) {\n  _s();\n\n  var imgs = props.imgs,\n      _props$isModalOpen = props.isModalOpen,\n      isModalOpen = _props$isModalOpen === void 0 ? false : _props$isModalOpen,\n      currentSlide = props.currentSlide,\n      setCurrentSlide = props.setCurrentSlide,\n      _props$handleOpenModa = props.handleOpenModal,\n      handleOpenModal = _props$handleOpenModa === void 0 ? null : _props$handleOpenModa;\n\n  var _useState = useState({\n    nav1: null,\n    nav2: null\n  }),\n      slidersNav = _useState[0],\n      setSlidersNav = _useState[1];\n\n  var slider1 = useRef();\n  var slider2 = useRef();\n\n  var handleAfterChange = function handleAfterChange(newIndex) {\n    setCurrentSlide(newIndex);\n  };\n\n  var handleSelectSlide = function handleSelectSlide(index) {\n    return function () {\n      setCurrentSlide(index);\n      !!handleOpenModal && handleOpenModal();\n    };\n  };\n\n  useEffect(function () {\n    setSlidersNav({\n      nav1: slider1.current,\n      nav2: slider2.current\n    });\n  }, []);\n  var classes = useStyles(isModalOpen);\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", {\n    className: classes.firstSlider\n  }, __jsx(CustomSlider, {\n    ref: slider1,\n    centerMode: isModalOpen || imgs.length < 2,\n    asNavFor: slidersNav.nav2,\n    variableWidth: !isModalOpen,\n    afterChange: handleAfterChange,\n    initialSlide: currentSlide\n  }, imgs.map(function (_ref, i) {\n    var url = _ref.url,\n        alt = _ref.alt;\n    return __jsx(\"img\", {\n      key: i,\n      alt: alt,\n      src: url[\"default\"],\n      onClick: handleSelectSlide(i)\n    });\n  }))), __jsx(\"div\", {\n    className: classes.secondSlider\n  }, __jsx(CustomSlider, {\n    ref: slider2,\n    slide: currentSlide,\n    slidesToShow: 4,\n    slidesToScroll: 1,\n    arrows: false,\n    infinite: true,\n    focusOnSelect: true,\n    asNavFor: slidersNav.nav1,\n    afterChange: handleAfterChange\n  }, imgs.map(function (_ref2, i) {\n    var url = _ref2.url,\n        alt = _ref2.alt;\n    return __jsx(\"img\", {\n      key: i,\n      alt: alt,\n      src: url[\"default\"]\n    });\n  }))));\n};\n\n_s(SyncSliders, \"LKpQkc+JRJV91MCZASpQnHETC2s=\", false, function () {\n  return [useStyles];\n});\n\n_c = SyncSliders;\n\nvar _c;\n\n$RefreshReg$(_c, \"SyncSliders\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/sync_sliders/SyncSliders.tsx"],"names":["React","useRef","useState","useEffect","CustomSlider","useStyles","SyncSliders","props","imgs","isModalOpen","currentSlide","setCurrentSlide","handleOpenModal","nav1","nav2","slidersNav","setSlidersNav","slider1","slider2","handleAfterChange","newIndex","handleSelectSlide","index","current","classes","root","firstSlider","length","map","i","url","alt","secondSlider"],"mappings":"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","sourcesContent":["import React, {\r\n    FC,\r\n    Dispatch,\r\n    SetStateAction,\r\n    MutableRefObject,\r\n    useRef,\r\n    useState,\r\n    useEffect,\r\n} from 'react';\r\nimport {CustomSlider} from '../custom_slider/CustomSlider';\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\ntype SyncSlidersProps = {\r\n    isModalOpen?: boolean;\r\n    currentSlide: number;\r\n    handleOpenModal?: () => void;\r\n    setCurrentSlide: Dispatch<SetStateAction<number>>;\r\n    imgs: {\r\n        alt: string;\r\n        url: { default: string }\r\n    }[];\r\n};\r\n\r\nexport const SyncSliders: FC<SyncSlidersProps> = (props) => {\r\n    const {\r\n        imgs,\r\n        isModalOpen = false,\r\n        currentSlide,\r\n        setCurrentSlide,\r\n        handleOpenModal = null,\r\n    } = props;\r\n\r\n    const [slidersNav, setSlidersNav] = useState({nav1: null, nav2: null});\r\n    const slider1: MutableRefObject<unknown> = useRef();\r\n    const slider2: MutableRefObject<unknown> = useRef();\r\n\r\n    const handleAfterChange = (newIndex) => {\r\n        setCurrentSlide(newIndex);\r\n    };\r\n\r\n    const handleSelectSlide = (index) => () => {\r\n        setCurrentSlide(index);\r\n        !!handleOpenModal && handleOpenModal();\r\n    };\r\n\r\n    useEffect(() => {\r\n        setSlidersNav({\r\n            nav1: slider1.current,\r\n            nav2: slider2.current,\r\n        });\r\n    }, []);\r\n\r\n    const classes = useStyles(isModalOpen);\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.firstSlider}>\r\n                <CustomSlider\r\n                    ref={slider1}\r\n                    centerMode={isModalOpen || imgs.length < 2}\r\n                    asNavFor={slidersNav.nav2}\r\n                    variableWidth={!isModalOpen}\r\n                    afterChange={handleAfterChange}\r\n                    initialSlide={currentSlide}\r\n                >\r\n                    {\r\n                        imgs.map(({url, alt}, i) => (\r\n                            <img\r\n                                key={i}\r\n                                alt={alt}\r\n                                src={url.default}\r\n                                onClick={handleSelectSlide(i)}\r\n                            />\r\n                        ))\r\n                    }\r\n                </CustomSlider>\r\n            </div>\r\n            <div className={classes.secondSlider}>\r\n                <CustomSlider\r\n                    ref={slider2}\r\n                    slide={currentSlide}\r\n                    slidesToShow={4}\r\n                    slidesToScroll={1}\r\n                    arrows={false}\r\n                    infinite={true}\r\n                    focusOnSelect={true}\r\n                    asNavFor={slidersNav.nav1}\r\n                    afterChange={handleAfterChange}\r\n                >\r\n                    {\r\n                        imgs.map(({url, alt}, i) => (\r\n                            <img\r\n                                key={i}\r\n                                alt={alt}\r\n                                src={url.default}\r\n                            />\r\n                        ))\r\n                    }\r\n                </CustomSlider>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}