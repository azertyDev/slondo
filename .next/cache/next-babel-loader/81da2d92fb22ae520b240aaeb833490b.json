{"ast":null,"code":"export const FETCH_TOKEN = 'FETCH_TOKEN';\nexport const FETCH_TOKEN_BEGIN = 'FETCH_TOKEN_BEGIN';\nexport const FETCH_TOKEN_SUCCESS = 'FETCH_TOKEN_SUCCESS';\nexport const FETCH_TOKEN_FAILURE = 'FETCH_TOKEN_FAILURE';\nexport const SET_IS_AUTH = 'SET_IS_AUTH';\nexport const authActions = {\n  fetchTokenBegin: () => ({\n    type: FETCH_TOKEN_BEGIN\n  }),\n  fetchTokenSuccess: ({\n    isAuth,\n    isFetch\n  }) => ({\n    type: FETCH_TOKEN_SUCCESS,\n    payload: {\n      isAuth,\n      isFetch\n    }\n  }),\n  fetchTokenFailure: error => ({\n    type: FETCH_TOKEN_FAILURE,\n    payload: error\n  })\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/actions/authActions.ts"],"names":["FETCH_TOKEN","FETCH_TOKEN_BEGIN","FETCH_TOKEN_SUCCESS","FETCH_TOKEN_FAILURE","SET_IS_AUTH","authActions","fetchTokenBegin","type","fetchTokenSuccess","isAuth","isFetch","payload","fetchTokenFailure","error"],"mappings":"AAEA,OAAO,MAAMA,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AAEP,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,eAAe,EAAE,OAAO;AACpBC,IAAAA,IAAI,EAAEN;AADc,GAAP,CADM;AAIvBO,EAAAA,iBAAiB,EAAE,CAAC;AAACC,IAAAA,MAAD;AAASC,IAAAA;AAAT,GAAD,MAAmC;AAClDH,IAAAA,IAAI,EAAEL,mBAD4C;AAElDS,IAAAA,OAAO,EAAE;AAACF,MAAAA,MAAD;AAASC,MAAAA;AAAT;AAFyC,GAAnC,CAJI;AAQvBE,EAAAA,iBAAiB,EAAGC,KAAD,KAAY;AAC3BN,IAAAA,IAAI,EAAEJ,mBADqB;AAE3BQ,IAAAA,OAAO,EAAEE;AAFkB,GAAZ;AARI,CAApB","sourcesContent":["import {AuthTypes} from \"../reducers/authReducer\";\r\n\r\nexport const FETCH_TOKEN = 'FETCH_TOKEN'\r\nexport const FETCH_TOKEN_BEGIN = 'FETCH_TOKEN_BEGIN'\r\nexport const FETCH_TOKEN_SUCCESS = 'FETCH_TOKEN_SUCCESS'\r\nexport const FETCH_TOKEN_FAILURE = 'FETCH_TOKEN_FAILURE'\r\nexport const SET_IS_AUTH = 'SET_IS_AUTH'\r\n\r\nexport const authActions = {\r\n    fetchTokenBegin: () => ({\r\n        type: FETCH_TOKEN_BEGIN\r\n    }),\r\n    fetchTokenSuccess: ({isAuth, isFetch}: AuthTypes) => ({\r\n        type: FETCH_TOKEN_SUCCESS,\r\n        payload: {isAuth, isFetch}\r\n    }),\r\n    fetchTokenFailure: (error) => ({\r\n        type: FETCH_TOKEN_FAILURE,\r\n        payload: error\r\n    })\r\n};"]},"metadata":{},"sourceType":"module"}