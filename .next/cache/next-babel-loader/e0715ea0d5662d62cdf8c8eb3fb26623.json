{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(workerFetchSelfData),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchFetchSelfData),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { userApi } from '../api/api';\nimport { call, put, all, takeLatest } from \"redux-saga/effects\";\nimport { FETCH_SELF_DATA, selfDataActions } from \"./actions/selfDataActions\"; // Self data saga\n\nvar fetchSelfDataBegin = selfDataActions.fetchSelfDataBegin,\n    fetchSelfDataSuccess = selfDataActions.fetchSelfDataSuccess,\n    fetchSelfDataFailure = selfDataActions.fetchSelfDataFailure;\n\nfunction workerFetchSelfData(action) {\n  var data;\n  return _regeneratorRuntime.wrap(function workerFetchSelfData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log(action);\n          _context.prev = 1;\n          _context.next = 4;\n          return put(fetchSelfDataBegin());\n\n        case 4:\n          _context.next = 6;\n          return call(userApi.login, action.phone, action.password);\n\n        case 6:\n          data = _context.sent;\n          _context.next = 9;\n          return put(fetchSelfDataSuccess(data));\n\n        case 9:\n          _context.next = 15;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 15;\n          return put(fetchSelfDataFailure(_context.t0));\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 11]]);\n}\n\nfunction watchFetchSelfData() {\n  return _regeneratorRuntime.wrap(function watchFetchSelfData$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(FETCH_SELF_DATA, workerFetchSelfData);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // Root saga export\n\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([watchFetchSelfData()]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/sagas.ts"],"names":["workerFetchSelfData","watchFetchSelfData","rootSaga","userApi","call","put","all","takeLatest","FETCH_SELF_DATA","selfDataActions","fetchSelfDataBegin","fetchSelfDataSuccess","fetchSelfDataFailure","action","console","log","login","phone","password","data"],"mappings":";;oDAQUA,mB;qDAWAC,kB;qDAMeC,Q;;AAzBzB,SAAQC,OAAR,QAAsB,YAAtB;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,GAAnB,EAAwBC,UAAxB,QAAyC,oBAAzC;AACA,SAAQC,eAAR,EAAyBC,eAAzB,QAA+C,2BAA/C,C,CAGA;;IACOC,kB,GAAkED,e,CAAlEC,kB;IAAoBC,oB,GAA8CF,e,CAA9CE,oB;IAAsBC,oB,GAAwBH,e,CAAxBG,oB;;AAEjD,SAAUZ,mBAAV,CAA8Ba,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACIC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AADJ;AAAA;AAGQ,iBAAMR,GAAG,CAACK,kBAAkB,EAAnB,CAAT;;AAHR;AAAA;AAIqB,iBAAMN,IAAI,CAACD,OAAO,CAACa,KAAT,EAAgBH,MAAM,CAACI,KAAvB,EAA8BJ,MAAM,CAACK,QAArC,CAAV;;AAJrB;AAIcC,UAAAA,IAJd;AAAA;AAKQ,iBAAMd,GAAG,CAACM,oBAAoB,CAACQ,IAAD,CAArB,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOQ,iBAAMd,GAAG,CAACO,oBAAoB,aAArB,CAAT;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAAUX,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACC,eAAD,EAAkBR,mBAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAKA;;;AACA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMI,GAAG,CAAC,CACNL,kBAAkB,EADZ,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {userApi} from '../api/api'\r\nimport {call, put, all, takeLatest} from \"redux-saga/effects\"\r\nimport {FETCH_SELF_DATA, selfDataActions} from \"./actions/selfDataActions\"\r\n\r\n\r\n// Self data saga\r\nconst {fetchSelfDataBegin, fetchSelfDataSuccess, fetchSelfDataFailure} = selfDataActions;\r\n\r\nfunction* workerFetchSelfData(action) {\r\n    console.log(action)\r\n    try {\r\n        yield put(fetchSelfDataBegin());\r\n        const data = yield call(userApi.login, action.phone, action.password);\r\n        yield put(fetchSelfDataSuccess(data));\r\n    } catch (e) {\r\n        yield put(fetchSelfDataFailure(e));\r\n    }\r\n}\r\n\r\nfunction* watchFetchSelfData() {\r\n    yield takeLatest(FETCH_SELF_DATA, workerFetchSelfData);\r\n}\r\n\r\n\r\n// Root saga export\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        watchFetchSelfData()\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}