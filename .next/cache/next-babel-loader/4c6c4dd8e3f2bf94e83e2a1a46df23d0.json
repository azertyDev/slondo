{"ast":null,"code":"import { useMemo } from 'react';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nconst serverUrl = process.env.SERVER_URL;\nconst port = process.env.PORT;\nlet apolloClient;\n\nfunction createIsomorphLink() {\n  if (true) {\n    const {\n      SchemaLink\n    } = require('@apollo/client/link/schema');\n\n    const {\n      schema\n    } = require('./schema');\n\n    return new SchemaLink({\n      schema\n    });\n  } else {\n    const {\n      HttpLink\n    } = require('@apollo/client/link/http');\n\n    return new HttpLink({\n      uri: `${serverUrl}${port}/api/graphql`,\n      credentials: 'same-origin'\n    });\n  }\n}\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    link: createIsomorphLink(),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/apollo/client.js"],"names":["useMemo","ApolloClient","InMemoryCache","serverUrl","process","env","SERVER_URL","port","PORT","apolloClient","createIsomorphLink","SchemaLink","require","schema","HttpLink","uri","credentials","createApolloClient","ssrMode","link","cache","initializeApollo","initialState","_apolloClient","restore","useApollo","store"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,OAAtB;AACA,SAAQC,YAAR,EAAsBC,aAAtB,QAA0C,gBAA1C;AAEA,MAAMC,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAA9B;AACA,MAAMC,IAAI,GAAGH,OAAO,CAACC,GAAR,CAAYG,IAAzB;AACA,IAAIC,YAAJ;;AAEA,SAASC,kBAAT,GAA8B;AAC1B,YAAmC;AAC/B,UAAM;AAACC,MAAAA;AAAD,QAAeC,OAAO,CAAC,4BAAD,CAA5B;;AACA,UAAM;AAACC,MAAAA;AAAD,QAAWD,OAAO,CAAC,UAAD,CAAxB;;AACA,WAAO,IAAID,UAAJ,CAAe;AAACE,MAAAA;AAAD,KAAf,CAAP;AACH,GAJD,MAIO;AACH,UAAM;AAACC,MAAAA;AAAD,QAAaF,OAAO,CAAC,0BAAD,CAA1B;;AACA,WAAO,IAAIE,QAAJ,CAAa;AAChBC,MAAAA,GAAG,EAAG,GAAEZ,SAAU,GAAEI,IAAK,cADT;AAEhBS,MAAAA,WAAW,EAAE;AAFG,KAAb,CAAP;AAIH;AACJ;;AAED,SAASC,kBAAT,GAA8B;AAC1B,SAAO,IAAIhB,YAAJ,CAAiB;AACpBiB,IAAAA,OAAO,MADa;AAEpBC,IAAAA,IAAI,EAAET,kBAAkB,EAFJ;AAGpBU,IAAAA,KAAK,EAAE,IAAIlB,aAAJ;AAHa,GAAjB,CAAP;AAKH;;AAED,OAAO,SAASmB,gBAAT,CAA0BC,YAAY,GAAG,IAAzC,EAA+C;AAAA;;AAClD,QAAMC,aAAa,qBAAGd,YAAH,2DAAmBQ,kBAAkB,EAAxD,CADkD,CAGlD;AACA;;;AACA,MAAIK,YAAJ,EAAkB;AACdC,IAAAA,aAAa,CAACH,KAAd,CAAoBI,OAApB,CAA4BF,YAA5B;AACH,GAPiD,CAQlD;;;AACA,YAAmC,OAAOC,aAAP,CATe,CAUlD;;AACA,MAAI,CAACd,YAAL,EAAmBA,YAAY,GAAGc,aAAf;AAEnB,SAAOA,aAAP;AACH;AAED,OAAO,SAASE,SAAT,CAAmBH,YAAnB,EAAiC;AACpC,QAAMI,KAAK,GAAG1B,OAAO,CAAC,MAAMqB,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOI,KAAP;AACH","sourcesContent":["import {useMemo} from 'react'\r\nimport {ApolloClient, InMemoryCache} from '@apollo/client'\r\n\r\nconst serverUrl = process.env.SERVER_URL\r\nconst port = process.env.PORT\r\nlet apolloClient\r\n\r\nfunction createIsomorphLink() {\r\n    if (typeof window === 'undefined') {\r\n        const {SchemaLink} = require('@apollo/client/link/schema')\r\n        const {schema} = require('./schema')\r\n        return new SchemaLink({schema})\r\n    } else {\r\n        const {HttpLink} = require('@apollo/client/link/http')\r\n        return new HttpLink({\r\n            uri: `${serverUrl}${port}/api/graphql`,\r\n            credentials: 'same-origin',\r\n        })\r\n    }\r\n}\r\n\r\nfunction createApolloClient() {\r\n    return new ApolloClient({\r\n        ssrMode: typeof window === 'undefined',\r\n        link: createIsomorphLink(),\r\n        cache: new InMemoryCache(),\r\n    })\r\n}\r\n\r\nexport function initializeApollo(initialState = null) {\r\n    const _apolloClient = apolloClient ?? createApolloClient()\r\n    \r\n    // If your page has Next.js data fetching methods that use Apollo Client, the initial state\r\n    // gets hydrated here\r\n    if (initialState) {\r\n        _apolloClient.cache.restore(initialState)\r\n    }\r\n    // For SSG and SSR always create a new Apollo Client\r\n    if (typeof window === 'undefined') return _apolloClient\r\n    // Create the Apollo Client once in the client\r\n    if (!apolloClient) apolloClient = _apolloClient\r\n    \r\n    return _apolloClient\r\n}\r\n\r\nexport function useApollo(initialState) {\r\n    const store = useMemo(() => initializeApollo(initialState), [initialState])\r\n    return store\r\n}"]},"metadata":{},"sourceType":"module"}