{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { TextField } from \"@material-ui/core\";\n\nvar option = function option(_ref) {\n  var area = _ref.area,\n      city = _ref.city,\n      district = _ref.district;\n  return \"\".concat(district ? \"\".concat(district, \", \") : '').concat(city, \", \").concat(area);\n};\n\nvar formatData = function formatData(list) {\n  return list.reduce(function (acc, row) {\n    row.cities.forEach(function (city) {\n      if (city.district.length) {\n        city.district.forEach(function (dis) {\n          acc = [].concat(_toConsumableArray(acc), [{\n            area_id: row.id,\n            area: row.name,\n            city_id: city.id,\n            city: city.name,\n            district_id: dis.id,\n            district: dis.name\n          }]);\n        });\n      } else {\n        acc = [].concat(_toConsumableArray(acc), [{\n          area_id: row.id,\n          area: row.name,\n          city_id: city.id,\n          city: city.name\n        }]);\n      }\n    });\n    return acc;\n  }, []);\n};\n\nvar optionSelected = function optionSelected(_ref2, value) {\n  var district = _ref2.district,\n      city = _ref2.city;\n  console.log(value); // return value.district.id ? district.id === value.district.id : city.id === value.city.id;\n\n  return true;\n};\n\nexport var AddressAutocomplete = function AddressAutocomplete(_ref3) {\n  var setValues = _ref3.setValues,\n      props = _objectWithoutProperties(_ref3, [\"setValues\"]);\n\n  return __jsx(Autocomplete, {\n    noOptionsText: \"\\u0413\\u043E\\u0440\\u043E\\u0434 \\u0438\\u043B\\u0438 \\u0440\\u0435\\u0433\\u0438\\u043E\\u043D \\u0441 \\u0442\\u0430\\u043A\\u0438\\u043C \\u0438\\u043C\\u0435\\u043D\\u0435\\u043C \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\",\n    options: formatData(props.list),\n    getOptionSelected: optionSelected,\n    getOptionLabel: option,\n    renderInput: function renderInput(params) {\n      console.log(params);\n      return __jsx(TextField, _extends({\n        fullWidth: true,\n        focused: false,\n        variant: \"outlined\"\n      }, params, props));\n    }\n  });\n};\n_c = AddressAutocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddressAutocomplete\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/address_autocomplete/AddressAutocomplete.tsx"],"names":["React","Autocomplete","TextField","option","area","city","district","formatData","list","reduce","acc","row","cities","forEach","length","dis","area_id","id","name","city_id","district_id","optionSelected","value","console","log","AddressAutocomplete","setValues","props","params"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAwB,OAAxB;AACA,SAAQC,YAAR,QAA2B,kBAA3B;AACA,SAAQC,SAAR,QAAwB,mBAAxB;;AAIA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAA4B;AAAA,MAA1BC,IAA0B,QAA1BA,IAA0B;AAAA,MAApBC,IAAoB,QAApBA,IAAoB;AAAA,MAAdC,QAAc,QAAdA,QAAc;AACvC,mBAAUA,QAAQ,aAAMA,QAAN,UAAqB,EAAvC,SAA4CD,IAA5C,eAAqDD,IAArD;AACH,CAFD;;AAIA,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAU;AACzB,SAAOA,IAAI,CAACC,MAAL,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7BA,IAAAA,GAAG,CAACC,MAAJ,CAAWC,OAAX,CAAmB,UAACR,IAAD,EAAU;AACzB,UAAIA,IAAI,CAACC,QAAL,CAAcQ,MAAlB,EAA0B;AACtBT,QAAAA,IAAI,CAACC,QAAL,CAAcO,OAAd,CAAsB,UAACE,GAAD,EAAS;AAC3BL,UAAAA,GAAG,gCACIA,GADJ,IAEC;AACIM,YAAAA,OAAO,EAAEL,GAAG,CAACM,EADjB;AAEIb,YAAAA,IAAI,EAAEO,GAAG,CAACO,IAFd;AAGIC,YAAAA,OAAO,EAAEd,IAAI,CAACY,EAHlB;AAIIZ,YAAAA,IAAI,EAAEA,IAAI,CAACa,IAJf;AAKIE,YAAAA,WAAW,EAAEL,GAAG,CAACE,EALrB;AAMIX,YAAAA,QAAQ,EAAES,GAAG,CAACG;AANlB,WAFD,EAAH;AAWH,SAZD;AAaH,OAdD,MAcO;AACHR,QAAAA,GAAG,gCACIA,GADJ,IAEC;AACIM,UAAAA,OAAO,EAAEL,GAAG,CAACM,EADjB;AAEIb,UAAAA,IAAI,EAAEO,GAAG,CAACO,IAFd;AAGIC,UAAAA,OAAO,EAAEd,IAAI,CAACY,EAHlB;AAIIZ,UAAAA,IAAI,EAAEA,IAAI,CAACa;AAJf,SAFD,EAAH;AASH;AACJ,KA1BD;AA2BA,WAAOR,GAAP;AACH,GA7BM,EA6BJ,EA7BI,CAAP;AA8BH,CA/BD;;AAiCA,IAAMW,cAAc,GAAG,SAAjBA,cAAiB,QAAmBC,KAAnB,EAA6B;AAAA,MAA3BhB,QAA2B,SAA3BA,QAA2B;AAAA,MAAjBD,IAAiB,SAAjBA,IAAiB;AAChDkB,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EADgD,CAEhD;;AACA,SAAO,IAAP;AACH,CAJD;;AAMA,OAAO,IAAMG,mBAAiD,GAAG,SAApDA,mBAAoD,QAA2B;AAAA,MAAzBC,SAAyB,SAAzBA,SAAyB;AAAA,MAAXC,KAAW;;AACxF,SACI,MAAC,YAAD;AACI,IAAA,aAAa,EAAC,qNADlB;AAEI,IAAA,OAAO,EAAEpB,UAAU,CAACoB,KAAK,CAACnB,IAAP,CAFvB;AAGI,IAAA,iBAAiB,EAAEa,cAHvB;AAII,IAAA,cAAc,EAAElB,MAJpB;AAKI,IAAA,WAAW,EAAE,qBAACyB,MAAD,EAAY;AACrBL,MAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ;AACA,aAAO,MAAC,SAAD;AACH,QAAA,SAAS,MADN;AAEH,QAAA,OAAO,EAAE,KAFN;AAGH,QAAA,OAAO,EAAC;AAHL,SAICA,MAJD,EAKCD,KALD,EAAP;AAOH;AAdL,IADJ;AAkBH,CAnBM;KAAMF,mB","sourcesContent":["import React, {FC} from \"react\";\r\nimport {Autocomplete} from \"@material-ui/lab\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {AddressAutocompleteProps} from \"@root/interfaces/AddressAutocomplete\";\r\n\r\n\r\nconst option = ({area, city, district}) => {\r\n    return `${district ? `${district}, ` : ''}${city}, ${area}`;\r\n};\r\n\r\nconst formatData = (list) => {\r\n    return list.reduce((acc, row) => {\r\n        row.cities.forEach((city) => {\r\n            if (city.district.length) {\r\n                city.district.forEach((dis) => {\r\n                    acc = [\r\n                        ...acc,\r\n                        {\r\n                            area_id: row.id,\r\n                            area: row.name,\r\n                            city_id: city.id,\r\n                            city: city.name,\r\n                            district_id: dis.id,\r\n                            district: dis.name\r\n                        }\r\n                    ];\r\n                });\r\n            } else {\r\n                acc = [\r\n                    ...acc,\r\n                    {\r\n                        area_id: row.id,\r\n                        area: row.name,\r\n                        city_id: city.id,\r\n                        city: city.name\r\n                    }\r\n                ];\r\n            }\r\n        });\r\n        return acc;\r\n    }, []);\r\n};\r\n\r\nconst optionSelected = ({district, city}, value) => {\r\n    console.log(value)\r\n    // return value.district.id ? district.id === value.district.id : city.id === value.city.id;\r\n    return true\r\n};\r\n\r\nexport const AddressAutocomplete: FC<AddressAutocompleteProps> = ({setValues, ...props}) => {\r\n    return (\r\n        <Autocomplete\r\n            noOptionsText='Город или регион с таким именем не найден'\r\n            options={formatData(props.list)}\r\n            getOptionSelected={optionSelected}\r\n            getOptionLabel={option}\r\n            renderInput={(params) => {\r\n                console.log(params)\r\n                return <TextField\r\n                    fullWidth\r\n                    focused={false}\r\n                    variant='outlined'\r\n                    {...params}\r\n                    {...props}\r\n                />\r\n            }}\r\n        />\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}