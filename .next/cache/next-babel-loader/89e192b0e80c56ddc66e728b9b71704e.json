{"ast":null,"code":"export var FETCH_TOKEN = 'FETCH_TOKEN';\nexport var FETCH_TOKEN_BEGIN = 'FETCH_TOKEN_BEGIN';\nexport var FETCH_TOKEN_SUCCESS = 'FETCH_TOKEN_SUCCESS';\nexport var FETCH_TOKEN_FAILURE = 'FETCH_TOKEN_FAILURE';\nexport var authActions = {\n  fetchTokenBegin: function fetchTokenBegin() {\n    return {\n      type: FETCH_TOKEN_BEGIN\n    };\n  },\n  fetchTokenSuccess: function fetchTokenSuccess(_ref) {\n    var isAuth = _ref.isAuth,\n        isFetch = _ref.isFetch;\n    return {\n      type: FETCH_TOKEN_SUCCESS,\n      payload: {\n        isAuth: isAuth,\n        isFetch: isFetch\n      }\n    };\n  },\n  fetchTokenFailure: function fetchTokenFailure(error) {\n    return {\n      type: FETCH_TOKEN_FAILURE,\n      payload: error\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/actions/authActions.ts"],"names":["FETCH_TOKEN","FETCH_TOKEN_BEGIN","FETCH_TOKEN_SUCCESS","FETCH_TOKEN_FAILURE","authActions","fetchTokenBegin","type","fetchTokenSuccess","isAuth","isFetch","payload","fetchTokenFailure","error"],"mappings":"AAEA,OAAO,IAAMA,WAAW,GAAG,aAApB;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,WAAW,GAAG;AACvBC,EAAAA,eAAe,EAAE;AAAA,WAAO;AACpBC,MAAAA,IAAI,EAAEL;AADc,KAAP;AAAA,GADM;AAIvBM,EAAAA,iBAAiB,EAAE;AAAA,QAAEC,MAAF,QAAEA,MAAF;AAAA,QAAUC,OAAV,QAAUA,OAAV;AAAA,WAAmC;AAClDH,MAAAA,IAAI,EAAEJ,mBAD4C;AAElDQ,MAAAA,OAAO,EAAE;AAACF,QAAAA,MAAM,EAANA,MAAD;AAASC,QAAAA,OAAO,EAAPA;AAAT;AAFyC,KAAnC;AAAA,GAJI;AAQvBE,EAAAA,iBAAiB,EAAE,2BAACC,KAAD;AAAA,WAAY;AAC3BN,MAAAA,IAAI,EAAEH,mBADqB;AAE3BO,MAAAA,OAAO,EAAEE;AAFkB,KAAZ;AAAA;AARI,CAApB","sourcesContent":["import {AuthTypes} from \"../reducers/authReducer\";\r\n\r\nexport const FETCH_TOKEN = 'FETCH_TOKEN'\r\nexport const FETCH_TOKEN_BEGIN = 'FETCH_TOKEN_BEGIN'\r\nexport const FETCH_TOKEN_SUCCESS = 'FETCH_TOKEN_SUCCESS'\r\nexport const FETCH_TOKEN_FAILURE = 'FETCH_TOKEN_FAILURE'\r\n\r\nexport const authActions = {\r\n    fetchTokenBegin: () => ({\r\n        type: FETCH_TOKEN_BEGIN\r\n    }),\r\n    fetchTokenSuccess: ({isAuth, isFetch}: AuthTypes) => ({\r\n        type: FETCH_TOKEN_SUCCESS,\r\n        payload: {isAuth, isFetch}\r\n    }),\r\n    fetchTokenFailure: (error) => ({\r\n        type: FETCH_TOKEN_FAILURE,\r\n        payload: error\r\n    })\r\n};"]},"metadata":{},"sourceType":"module"}