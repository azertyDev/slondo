{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport { CustomSlider } from '../custom_slider/CustomSlider'; // styles\n\nimport { useStyles } from './useStyles';\nexport const SyncSliders = props => {\n  const {\n    0: slidersNav,\n    1: setSlidersNav\n  } = useState({\n    nav1: null,\n    nav2: null\n  });\n  const slider1 = useRef();\n  const slider2 = useRef();\n\n  const handleAfterChange = newIndex => {\n    props.setCurrentSlide(newIndex);\n  };\n\n  useEffect(() => {\n    setSlidersNav({\n      nav1: slider1.current,\n      nav2: slider2.current\n    });\n  }, []);\n  const classes = useStyles();\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", {\n    className: classes.firstSlider\n  }, __jsx(CustomSlider, {\n    ref: slider1,\n    asNavFor: slidersNav.nav2,\n    afterChange: handleAfterChange,\n    variableWidth: props.variableWidth,\n    initialSlide: props.currentSlide,\n    centerMode: props.centerMode\n  }, props.imgs.map(({\n    url,\n    alt\n  }, i) => __jsx(\"img\", {\n    key: i,\n    alt: alt,\n    src: url.default,\n    onClick: props.handleOpenModal\n  })))), __jsx(\"div\", {\n    className: classes.secondSlider\n  }, __jsx(CustomSlider, {\n    ref: slider2,\n    asNavFor: slidersNav.nav1,\n    slidesToShow: 4,\n    focusOnSelect: true,\n    arrows: props.arrows,\n    afterChange: handleAfterChange\n  }, props.imgs.map(({\n    url,\n    alt\n  }, i) => __jsx(\"img\", {\n    src: url.default,\n    alt: alt,\n    key: i\n  })))));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/sync_sliders/SyncSliders.tsx"],"names":["React","useEffect","useRef","useState","CustomSlider","useStyles","SyncSliders","props","slidersNav","setSlidersNav","nav1","nav2","slider1","slider2","handleAfterChange","newIndex","setCurrentSlide","current","classes","root","firstSlider","variableWidth","currentSlide","centerMode","imgs","map","url","alt","i","default","handleOpenModal","secondSlider","arrows"],"mappings":";AAAA,OAAOA,KAAP,IAAiCC,SAAjC,EAA4CC,MAA5C,EAAoDC,QAApD,QAAmE,OAAnE;AACA,SAAQC,YAAR,QAA2B,+BAA3B,C,CACA;;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAGA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAClC,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BN,QAAQ,CAAC;AAACO,IAAAA,IAAI,EAAE,IAAP;AAAaC,IAAAA,IAAI,EAAE;AAAnB,GAAD,CAA5C;AACA,QAAMC,OAAkC,GAAGV,MAAM,EAAjD;AACA,QAAMW,OAAkC,GAAGX,MAAM,EAAjD;;AAEA,QAAMY,iBAAiB,GAAIC,QAAD,IAAc;AACpCR,IAAAA,KAAK,CAACS,eAAN,CAAsBD,QAAtB;AACH,GAFD;;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,aAAa,CAAC;AACVC,MAAAA,IAAI,EAAEE,OAAO,CAACK,OADJ;AAEVN,MAAAA,IAAI,EAAEE,OAAO,CAACI;AAFJ,KAAD,CAAb;AAIH,GALQ,EAKN,EALM,CAAT;AAOA,QAAMC,OAAO,GAAGb,SAAS,EAAzB;AACA,SACI;AAAK,IAAA,SAAS,EAAEa,OAAO,CAACC;AAAxB,KACI;AAAK,IAAA,SAAS,EAAED,OAAO,CAACE;AAAxB,KACI,MAAC,YAAD;AACI,IAAA,GAAG,EAAER,OADT;AAEI,IAAA,QAAQ,EAAEJ,UAAU,CAACG,IAFzB;AAGI,IAAA,WAAW,EAAEG,iBAHjB;AAII,IAAA,aAAa,EAAEP,KAAK,CAACc,aAJzB;AAKI,IAAA,YAAY,EAAEd,KAAK,CAACe,YALxB;AAMI,IAAA,UAAU,EAAEf,KAAK,CAACgB;AANtB,KAQKhB,KAAK,CAACiB,IAAN,CAAWC,GAAX,CAAe,CAAC;AAACC,IAAAA,GAAD;AAAMC,IAAAA;AAAN,GAAD,EAAaC,CAAb,KACZ;AACI,IAAA,GAAG,EAAEA,CADT;AAEI,IAAA,GAAG,EAAED,GAFT;AAGI,IAAA,GAAG,EAAED,GAAG,CAACG,OAHb;AAII,IAAA,OAAO,EAAEtB,KAAK,CAACuB;AAJnB,IADH,CARL,CADJ,CADJ,EAoBI;AAAK,IAAA,SAAS,EAAEZ,OAAO,CAACa;AAAxB,KACI,MAAC,YAAD;AACI,IAAA,GAAG,EAAElB,OADT;AAEI,IAAA,QAAQ,EAAEL,UAAU,CAACE,IAFzB;AAGI,IAAA,YAAY,EAAE,CAHlB;AAII,IAAA,aAAa,EAAE,IAJnB;AAKI,IAAA,MAAM,EAAEH,KAAK,CAACyB,MALlB;AAMI,IAAA,WAAW,EAAElB;AANjB,KAQKP,KAAK,CAACiB,IAAN,CAAWC,GAAX,CAAe,CAAC;AAACC,IAAAA,GAAD;AAAMC,IAAAA;AAAN,GAAD,EAAaC,CAAb,KACZ;AAAK,IAAA,GAAG,EAAEF,GAAG,CAACG,OAAd;AAAuB,IAAA,GAAG,EAAEF,GAA5B;AAAiC,IAAA,GAAG,EAAEC;AAAtC,IADH,CARL,CADJ,CApBJ,CADJ;AAqCH,CAtDM","sourcesContent":["import React, {MutableRefObject, useEffect, useRef, useState} from 'react';\r\nimport {CustomSlider} from '../custom_slider/CustomSlider';\r\n// styles\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const SyncSliders = (props) => {\r\n    const [slidersNav, setSlidersNav] = useState({nav1: null, nav2: null});\r\n    const slider1: MutableRefObject<unknown> = useRef();\r\n    const slider2: MutableRefObject<unknown> = useRef();\r\n\r\n    const handleAfterChange = (newIndex) => {\r\n        props.setCurrentSlide(newIndex);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setSlidersNav({\r\n            nav1: slider1.current,\r\n            nav2: slider2.current,\r\n        });\r\n    }, []);\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.firstSlider}>\r\n                <CustomSlider\r\n                    ref={slider1}\r\n                    asNavFor={slidersNav.nav2}\r\n                    afterChange={handleAfterChange}\r\n                    variableWidth={props.variableWidth}\r\n                    initialSlide={props.currentSlide}\r\n                    centerMode={props.centerMode}\r\n                >\r\n                    {props.imgs.map(({url, alt}, i) => (\r\n                        <img\r\n                            key={i}\r\n                            alt={alt}\r\n                            src={url.default}\r\n                            onClick={props.handleOpenModal}\r\n                        />\r\n                    ))}\r\n                </CustomSlider>\r\n            </div>\r\n            <div className={classes.secondSlider}>\r\n                <CustomSlider\r\n                    ref={slider2}\r\n                    asNavFor={slidersNav.nav1}\r\n                    slidesToShow={4}\r\n                    focusOnSelect={true}\r\n                    arrows={props.arrows}\r\n                    afterChange={handleAfterChange}\r\n                >\r\n                    {props.imgs.map(({url, alt}, i) => (\r\n                        <img src={url.default} alt={alt} key={i}/>\r\n                    ))}\r\n                </CustomSlider>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}