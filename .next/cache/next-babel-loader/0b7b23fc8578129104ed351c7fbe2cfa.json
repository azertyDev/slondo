{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from \"@src/api/api\";\nconst initialState = {\n  isFetch: false,\n  error: null,\n  data: {}\n};\nexport const fetchAd = createAsyncThunk('createAdvrt/fetchAd', async ({\n  ctgryID,\n  subCtgryID,\n  lang\n}, {\n  rejectWithValue\n}) => {\n  try {\n    return await userAPI.getAdDataForCreate(ctgryID, subCtgryID, lang);\n  } catch (e) {\n    return rejectWithValue(e.message);\n  }\n});\nconst createAdvrtSlice = createSlice({\n  name: 'createAdvrt',\n  initialState,\n  reducers: {\n    setAdvrtCtgryAction: (state, action) => {\n      state.adType = action.payload.adType;\n      state.adCategory = action.payload.adCategory;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAd.pending, state => {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchAd.fulfilled, (state, action) => {\n      state.isFetch = false;\n      state.adType = action.payload;\n    });\n    builder.addCase(fetchAd.rejected, (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  setAdvrtCtgryAction\n} = createAdvrtSlice.actions;\nexport const createAdvrtReducer = createAdvrtSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/createAdvrtSlice.ts"],"names":["createAsyncThunk","createSlice","userAPI","initialState","isFetch","error","data","fetchAd","ctgryID","subCtgryID","lang","rejectWithValue","getAdDataForCreate","e","message","createAdvrtSlice","name","reducers","setAdvrtCtgryAction","state","action","adType","payload","adCategory","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","createAdvrtReducer","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAAQC,OAAR,QAAsB,cAAtB;AAKA,MAAMC,YAA2B,GAAG;AAChCC,EAAAA,OAAO,EAAE,KADuB;AAEhCC,EAAAA,KAAK,EAAE,IAFyB;AAGhCC,EAAAA,IAAI,EAAC;AAH2B,CAApC;AAMA,OAAO,MAAMC,OAAO,GAAGP,gBAAgB,CACnC,qBADmC,EAEnC,OAAO;AAACQ,EAAAA,OAAD;AAAUC,EAAAA,UAAV;AAAsBC,EAAAA;AAAtB,CAAP,EAAoC;AAACC,EAAAA;AAAD,CAApC,KAA0D;AACtD,MAAI;AACA,WAAO,MAAMT,OAAO,CAACU,kBAAR,CAA2BJ,OAA3B,EAAoCC,UAApC,EAAgDC,IAAhD,CAAb;AACH,GAFD,CAEE,OAAOG,CAAP,EAAU;AACR,WAAOF,eAAe,CAACE,CAAC,CAACC,OAAH,CAAtB;AACH;AACJ,CARkC,CAAhC;AAWP,MAAMC,gBAAgB,GAAGd,WAAW,CAAC;AACjCe,EAAAA,IAAI,EAAE,aAD2B;AAEjCb,EAAAA,YAFiC;AAGjCc,EAAAA,QAAQ,EAAE;AACNC,IAAAA,mBAAmB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpCD,MAAAA,KAAK,CAACE,MAAN,GAAeD,MAAM,CAACE,OAAP,CAAeD,MAA9B;AACAF,MAAAA,KAAK,CAACI,UAAN,GAAmBH,MAAM,CAACE,OAAP,CAAeC,UAAlC;AACH;AAJK,GAHuB;AASjCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,OAAO,CAACoB,OAAxB,EAAkCR,KAAD,IAAW;AACxCA,MAAAA,KAAK,CAACf,OAAN,GAAgB,IAAhB;AACAe,MAAAA,KAAK,CAACd,KAAN,GAAc,IAAd;AACH,KAHD;AAIAoB,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,OAAO,CAACqB,SAAxB,EAAmC,CAACT,KAAD,EAAQC,MAAR,KAAmB;AAClDD,MAAAA,KAAK,CAACf,OAAN,GAAgB,KAAhB;AACAe,MAAAA,KAAK,CAACE,MAAN,GAAeD,MAAM,CAACE,OAAtB;AACH,KAHD;AAIAG,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,OAAO,CAACsB,QAAxB,EAAkC,CAACV,KAAD,EAAQC,MAAR,KAAmB;AACjDD,MAAAA,KAAK,CAACf,OAAN,GAAgB,KAAhB;AACAe,MAAAA,KAAK,CAACd,KAAN,GAAce,MAAM,CAACE,OAArB;AACH,KAHD;AAIH;AAtBgC,CAAD,CAApC;AAyBA,OAAO,MAAM;AAACJ,EAAAA;AAAD,IAAwBH,gBAAgB,CAACe,OAA/C;AACP,OAAO,MAAMC,kBAAkB,GAAGhB,gBAAgB,CAACiB,OAA5C","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {userAPI} from \"@src/api/api\";\r\nimport {CreateAdState} from '@root/interfaces/Advertisement';\r\nimport {CategoryIDs} from \"@root/interfaces/Categories\";\r\n\r\n\r\nconst initialState: CreateAdState = {\r\n    isFetch: false,\r\n    error: null,\r\n    data:{}\r\n};\r\n\r\nexport const fetchAd = createAsyncThunk<any, CategoryIDs>(\r\n    'createAdvrt/fetchAd',\r\n    async ({ctgryID, subCtgryID, lang}, {rejectWithValue}) => {\r\n        try {\r\n            return await userAPI.getAdDataForCreate(ctgryID, subCtgryID, lang);\r\n        } catch (e) {\r\n            return rejectWithValue(e.message);\r\n        }\r\n    }\r\n);\r\n\r\nconst createAdvrtSlice = createSlice({\r\n    name: 'createAdvrt',\r\n    initialState,\r\n    reducers: {\r\n        setAdvrtCtgryAction: (state, action) => {\r\n            state.adType = action.payload.adType;\r\n            state.adCategory = action.payload.adCategory;\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchAd.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        })\r\n        builder.addCase(fetchAd.fulfilled, (state, action) => {\r\n            state.isFetch = false;\r\n            state.adType = action.payload;\r\n        })\r\n        builder.addCase(fetchAd.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport const {setAdvrtCtgryAction} = createAdvrtSlice.actions;\r\nexport const createAdvrtReducer = createAdvrtSlice.reducer;"]},"metadata":{},"sourceType":"module"}