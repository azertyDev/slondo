{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { setErrorMsgAction } from \"@src/redux/slices/errorSlice\";\n\nconst resolver = async data => {\n  if (typeof data.then === 'function') {\n    return await data;\n  } else if (typeof data === 'object') {}\n};\n\nexport const setFetchedData = async (state, setState, dispatch, fetchedData) => {\n  try {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      isFetch: true\n    }));\n\n    for (const key in fetchedData) {\n      if (typeof fetchedData[key].then === 'function') {\n        fetchedData[key] = await fetchedData[key];\n      }\n    }\n\n    setState(_objectSpread(_objectSpread(_objectSpread({}, state), fetchedData), {}, {\n      isFetch: false\n    }));\n  } catch (e) {\n    dispatch(setErrorMsgAction(e.message));\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      isFetch: false\n    }));\n  }\n};\nexport const categoryDataNormalization = categoryList => categoryList.map(category => {\n  const childs = category.childs.map(child => _objectSpread(_objectSpread({}, child), {}, {\n    parent: category\n  }));\n  return _objectSpread(_objectSpread({}, category), {}, {\n    childs\n  });\n});\nexport const categorySearchHelper = (text, categoryList) => {\n  const searchRegExp = RegExp(text, 'i');\n  return categoryList.reduce((list, category) => {\n    category.childs.forEach(sub_ctgr => {\n      if (searchRegExp.test(sub_ctgr.name)) {\n        list.push(sub_ctgr);\n      }\n    });\n    return list;\n  }, []);\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/helpers.ts"],"names":["setErrorMsgAction","resolver","data","then","setFetchedData","state","setState","dispatch","fetchedData","isFetch","key","e","message","categoryDataNormalization","categoryList","map","category","childs","child","parent","categorySearchHelper","text","searchRegExp","RegExp","reduce","list","forEach","sub_ctgr","test","name","push"],"mappings":";;;;;;AAAA,SAAQA,iBAAR,QAAgC,8BAAhC;;AAeA,MAAMC,QAAQ,GAAG,MAAOC,IAAP,IAAgB;AAC7B,MAAI,OAAOA,IAAI,CAACC,IAAZ,KAAqB,UAAzB,EAAqC;AACjC,WAAO,MAAMD,IAAb;AACH,GAFD,MAEO,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B,CAEpC;AACJ,CAND;;AAQA,OAAO,MAAME,cAA2B,GAAG,OAAOC,KAAP,EAAcC,QAAd,EAAwBC,QAAxB,EAAkCC,WAAlC,KAAkD;AACzF,MAAI;AACAF,IAAAA,QAAQ,iCAAKD,KAAL;AAAYI,MAAAA,OAAO,EAAE;AAArB,OAAR;;AACA,SAAK,MAAMC,GAAX,IAAkBF,WAAlB,EAA+B;AAC3B,UAAI,OAAOA,WAAW,CAACE,GAAD,CAAX,CAAiBP,IAAxB,KAAiC,UAArC,EAAiD;AAC7CK,QAAAA,WAAW,CAACE,GAAD,CAAX,GAAmB,MAAMF,WAAW,CAACE,GAAD,CAApC;AACH;AACJ;;AACDJ,IAAAA,QAAQ,+CAAKD,KAAL,GAAeG,WAAf;AAA4BC,MAAAA,OAAO,EAAE;AAArC,OAAR;AACH,GARD,CAQE,OAAOE,CAAP,EAAU;AACRJ,IAAAA,QAAQ,CAACP,iBAAiB,CAACW,CAAC,CAACC,OAAH,CAAlB,CAAR;AACAN,IAAAA,QAAQ,iCAAKD,KAAL;AAAYI,MAAAA,OAAO,EAAE;AAArB,OAAR;AACH;AACJ,CAbM;AAeP,OAAO,MAAMI,yBAAyB,GAAIC,YAAD,IACrCA,YAAY,CAACC,GAAb,CAAiBC,QAAQ,IAAI;AACzB,QAAMC,MAAM,GAAGD,QAAQ,CAACC,MAAT,CAAgBF,GAAhB,CAAoBG,KAAK,oCAASA,KAAT;AAAgBC,IAAAA,MAAM,EAAEH;AAAxB,IAAzB,CAAf;AACA,yCAAWA,QAAX;AAAqBC,IAAAA;AAArB;AACH,CAHD,CADG;AAOP,OAAO,MAAMG,oBAAoB,GAAG,CAACC,IAAD,EAAeP,YAAf,KAA4D;AAC5F,QAAMQ,YAAY,GAAGC,MAAM,CAACF,IAAD,EAAO,GAAP,CAA3B;AACA,SAAOP,YAAY,CACdU,MADE,CACK,CAACC,IAAD,EAAOT,QAAP,KAAoB;AACxBA,IAAAA,QAAQ,CAACC,MAAT,CAAgBS,OAAhB,CAAwBC,QAAQ,IAAI;AAChC,UAAIL,YAAY,CAACM,IAAb,CAAkBD,QAAQ,CAACE,IAA3B,CAAJ,EAAsC;AAClCJ,QAAAA,IAAI,CAACK,IAAL,CAAUH,QAAV;AACH;AACJ,KAJD;AAKA,WAAOF,IAAP;AACH,GARE,EAQA,EARA,CAAP;AASH,CAXM","sourcesContent":["import {setErrorMsgAction} from \"@src/redux/slices/errorSlice\";\r\nimport {CategoryType} from \"@root/interfaces/Categories\";\r\nimport {Dispatch, SetStateAction} from \"react\";\r\nimport {IdNameType} from \"@root/interfaces/Announcement\";\r\n\r\n\r\ntype StateHelper = (\r\n    state: any,\r\n    setState: Dispatch<SetStateAction<any>>,\r\n    dispatch: Dispatch<any>,\r\n    fetchedData: any,\r\n) => Promise<void>;\r\n\r\ntype SearchType = (IdNameType & { parent: any, icons: [], image: { url: string } })[];\r\n\r\nconst resolver = async (data) => {\r\n    if (typeof data.then === 'function') {\r\n        return await data\r\n    } else if (typeof data === 'object') {\r\n\r\n    }\r\n};\r\n\r\nexport const setFetchedData: StateHelper = async (state, setState, dispatch, fetchedData) => {\r\n    try {\r\n        setState({...state, isFetch: true});\r\n        for (const key in fetchedData) {\r\n            if (typeof fetchedData[key].then === 'function') {\r\n                fetchedData[key] = await fetchedData[key];\r\n            }\r\n        }\r\n        setState({...state, ...fetchedData, isFetch: false});\r\n    } catch (e) {\r\n        dispatch(setErrorMsgAction(e.message));\r\n        setState({...state, isFetch: false});\r\n    }\r\n};\r\n\r\nexport const categoryDataNormalization = (categoryList: CategoryType[]): CategoryType[] => (\r\n    categoryList.map(category => {\r\n        const childs = category.childs.map(child => ({...child, parent: category}));\r\n        return {...category, childs};\r\n    })\r\n);\r\n\r\nexport const categorySearchHelper = (text: string, categoryList: CategoryType[]): SearchType => {\r\n    const searchRegExp = RegExp(text, 'i');\r\n    return categoryList\r\n        .reduce((list, category) => {\r\n            category.childs.forEach(sub_ctgr => {\r\n                if (searchRegExp.test(sub_ctgr.name)) {\r\n                    list.push(sub_ctgr);\r\n                }\r\n            })\r\n            return list;\r\n        }, []);\r\n};"]},"metadata":{},"sourceType":"module"}