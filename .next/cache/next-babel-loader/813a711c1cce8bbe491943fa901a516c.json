{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { userAPI } from '@src/api/api';\nimport { i18n } from '@root/i18n';\nimport { useRouter } from 'next/router';\nimport { ShowAdLot } from '@src/components/advertisement/show_advertisement/ShowAdLot';\nconst initValues = {\n  id: null,\n  name: ''\n};\nconst initialAdData = {\n  isFetch: false,\n  error: null,\n  data: {\n    id: null,\n    title: '',\n    currency: initValues,\n    condition: initValues,\n    created_at: null,\n    expiration_at: null,\n    number_of_views: null,\n    images: [],\n    description: '',\n    region: initValues,\n    city: initValues,\n    district: initValues,\n    ads_type: initValues,\n    parent: {\n      id: null,\n      name: '',\n      mark: ''\n    }\n  }\n};\nexport const ShowAdLotContainer = ({\n  t\n}) => {\n  const {\n    0: adData,\n    1: setAdData\n  } = useState(initialAdData);\n  const {\n    0: parameters,\n    1: setParameters\n  } = useState({});\n  const adsId = useRouter().query.id;\n  const lang = i18n.language;\n\n  const fetchAdData = async () => {\n    try {\n      setAdData(_objectSpread(_objectSpread({}, adData), {}, {\n        isFetch: true\n      }));\n\n      const _await$userAPI$getAdd = await userAPI.getAddById(adsId, lang),\n            {\n        title,\n        currency,\n        condition,\n        images,\n        description,\n        region,\n        city,\n        district\n      } = _await$userAPI$getAdd,\n            otherData = _objectWithoutProperties(_await$userAPI$getAdd, [\"title\", \"currency\", \"condition\", \"images\", \"description\", \"region\", \"city\", \"district\"]);\n\n      setAdData(_objectSpread(_objectSpread({}, adData), {}, {\n        isFetch: false\n      }));\n      setParameters(_objectSpread({}, otherData[otherData.parent.mark]));\n      setAdData(_objectSpread(_objectSpread({}, adData), {}, {\n        data: _objectSpread({\n          title,\n          images,\n          description,\n          currency: currency !== null && currency !== void 0 ? currency : initValues,\n          condition: condition !== null && condition !== void 0 ? condition : initValues,\n          region: region !== null && region !== void 0 ? region : initValues,\n          city: city !== null && city !== void 0 ? city : initValues,\n          district: district !== null && district !== void 0 ? district : initValues\n        }, otherData)\n      }));\n    } catch (e) {\n      setAdData(_objectSpread(_objectSpread({}, adData), {}, {\n        error: e.message\n      }));\n    }\n  };\n\n  useEffect(() => {\n    fetchAdData();\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(ShowAdLot, {\n    adData: adData,\n    t: t,\n    parameters: parameters\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}