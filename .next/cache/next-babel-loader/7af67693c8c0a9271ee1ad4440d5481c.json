{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Grid } from \"@material-ui/core\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { ButtonComponent } from \"@src/components/elements/button/Button\";\nimport React from \"react\";\nexport const CustomDroppable = props => {\n  const {\n    droppableId,\n    files,\n    isPreview,\n    removeFile\n  } = props;\n  return __jsx(Droppable, {\n    isCombineEnabled: true,\n    droppableId: droppableId,\n    direction: \"horizontal\"\n  }, provided => __jsx(Grid, _extends({\n    container: true,\n    className: \"images-wrapper\"\n  }, provided.droppableProps, {\n    ref: provided.innerRef\n  }), files.map(({\n    url,\n    file\n  }, index) => {\n    const isUrl = typeof url === 'string';\n\n    if (droppableId === 'firstRow' && index <= 3 || droppableId === 'secondRow' && index > 3) {\n      return isUrl ? __jsx(Draggable, {\n        key: file.name,\n        index: index,\n        draggableId: index.toString(),\n        isDragDisabled: isPreview || !isUrl\n      }, provided => __jsx(Grid, _extends({\n        item: true,\n        xs: 4,\n        md: 3,\n        ref: provided.innerRef\n      }, provided.draggableProps, provided.dragHandleProps), __jsx(\"img\", {\n        src: url,\n        style: {\n          width: '160px',\n          height: '120px',\n          objectFit: 'cover'\n        },\n        alt: file.name\n      }), __jsx(ButtonComponent, {\n        disabled: isPreview,\n        onClick: removeFile(url)\n      }, \"X\"))) : url;\n    }\n  }), provided.placeholder));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/preview_photos/CustomDroppable.tsx"],"names":["Grid","Draggable","Droppable","ButtonComponent","React","CustomDroppable","props","droppableId","files","isPreview","removeFile","provided","droppableProps","innerRef","map","url","file","index","isUrl","name","toString","draggableProps","dragHandleProps","width","height","objectFit","placeholder"],"mappings":";;;;AAAA,SAAQA,IAAR,QAAmB,mBAAnB;AACA,SAAQC,SAAR,EAAmBC,SAAnB,QAAmC,qBAAnC;AACA,SAAQC,eAAR,QAA8B,wCAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAO,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACtC,QAAM;AAACC,IAAAA,WAAD;AAAcC,IAAAA,KAAd;AAAqBC,IAAAA,SAArB;AAAgCC,IAAAA;AAAhC,MAA8CJ,KAApD;AAEA,SACI,MAAC,SAAD;AACI,IAAA,gBAAgB,EAAE,IADtB;AAEI,IAAA,WAAW,EAAEC,WAFjB;AAGI,IAAA,SAAS,EAAC;AAHd,KAKKI,QAAQ,IACL,MAAC,IAAD;AACI,IAAA,SAAS,MADb;AAEI,IAAA,SAAS,EAAC;AAFd,KAGQA,QAAQ,CAACC,cAHjB;AAII,IAAA,GAAG,EAAED,QAAQ,CAACE;AAJlB,MAOQL,KAAK,CAACM,GAAN,CAAU,CAAC;AAACC,IAAAA,GAAD;AAAMC,IAAAA;AAAN,GAAD,EAAcC,KAAd,KAAwB;AAC1B,UAAMC,KAAK,GAAG,OAAOH,GAAP,KAAe,QAA7B;;AACA,QACKR,WAAW,KAAK,UAAhB,IAA8BU,KAAK,IAAI,CAAxC,IAECV,WAAW,KAAK,WAAhB,IAA+BU,KAAK,GAAG,CAH5C,EAIE;AACE,aACIC,KAAK,GACC,MAAC,SAAD;AACE,QAAA,GAAG,EAAEF,IAAI,CAACG,IADZ;AAEE,QAAA,KAAK,EAAEF,KAFT;AAGE,QAAA,WAAW,EAAEA,KAAK,CAACG,QAAN,EAHf;AAIE,QAAA,cAAc,EAAEX,SAAS,IAAI,CAACS;AAJhC,SAMGP,QAAQ,IACL,MAAC,IAAD;AACI,QAAA,IAAI,MADR;AAEI,QAAA,EAAE,EAAE,CAFR;AAGI,QAAA,EAAE,EAAE,CAHR;AAII,QAAA,GAAG,EAAEA,QAAQ,CAACE;AAJlB,SAKQF,QAAQ,CAACU,cALjB,EAMQV,QAAQ,CAACW,eANjB,GAQI;AACI,QAAA,GAAG,EAAEP,GADT;AAEI,QAAA,KAAK,EAAE;AACHQ,UAAAA,KAAK,EAAE,OADJ;AAEHC,UAAAA,MAAM,EAAE,OAFL;AAGHC,UAAAA,SAAS,EAAE;AAHR,SAFX;AAOI,QAAA,GAAG,EAAET,IAAI,CAACG;AAPd,QARJ,EAiBI,MAAC,eAAD;AACI,QAAA,QAAQ,EAAEV,SADd;AAEI,QAAA,OAAO,EAAEC,UAAU,CAACK,GAAD;AAFvB,aAjBJ,CAPN,CADD,GAgCCA,GAjCV;AAmCH;AACJ,GA3CL,CAPR,EAoDKJ,QAAQ,CAACe,WApDd,CANR,CADJ;AAgEH,CAnEM","sourcesContent":["import {Grid} from \"@material-ui/core\";\r\nimport {Draggable, Droppable} from \"react-beautiful-dnd\";\r\nimport {ButtonComponent} from \"@src/components/elements/button/Button\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const CustomDroppable = (props) => {\r\n    const {droppableId, files, isPreview, removeFile} = props;\r\n\r\n    return (\r\n        <Droppable\r\n            isCombineEnabled={true}\r\n            droppableId={droppableId}\r\n            direction=\"horizontal\"\r\n        >\r\n            {provided => (\r\n                <Grid\r\n                    container\r\n                    className=\"images-wrapper\"\r\n                    {...provided.droppableProps}\r\n                    ref={provided.innerRef}\r\n                >\r\n                    {\r\n                        files.map(({url, file}, index) => {\r\n                                const isUrl = typeof url === 'string';\r\n                                if (\r\n                                    (droppableId === 'firstRow' && index <= 3)\r\n                                    ||\r\n                                    (droppableId === 'secondRow' && index > 3)\r\n                                ) {\r\n                                    return (\r\n                                        isUrl\r\n                                            ? <Draggable\r\n                                                key={file.name}\r\n                                                index={index}\r\n                                                draggableId={index.toString()}\r\n                                                isDragDisabled={isPreview || !isUrl}\r\n                                            >\r\n                                                {provided => (\r\n                                                    <Grid\r\n                                                        item\r\n                                                        xs={4}\r\n                                                        md={3}\r\n                                                        ref={provided.innerRef}\r\n                                                        {...provided.draggableProps}\r\n                                                        {...provided.dragHandleProps}\r\n                                                    >\r\n                                                        <img\r\n                                                            src={url}\r\n                                                            style={{\r\n                                                                width: '160px',\r\n                                                                height: '120px',\r\n                                                                objectFit: 'cover'\r\n                                                            }}\r\n                                                            alt={file.name}\r\n                                                        />\r\n                                                        <ButtonComponent\r\n                                                            disabled={isPreview}\r\n                                                            onClick={removeFile(url)}\r\n                                                        >X</ButtonComponent>\r\n                                                    </Grid>\r\n                                                )}\r\n                                            </Draggable>\r\n                                            : url\r\n                                    )\r\n                                }\r\n                            }\r\n                        )}\r\n                    {provided.placeholder}\r\n                </Grid>\r\n            )}\r\n        </Droppable>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}