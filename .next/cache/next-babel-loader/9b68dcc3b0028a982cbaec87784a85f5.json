{"ast":null,"code":"var __jsx = React.createElement;\nimport { isRequired } from \"@root/validation_schemas/createAdvrtSchema\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CustomCheckbox } from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport React from \"react\";\nimport { useStyles } from \"./useStyles\";\nexport const AdvrtParams = props => {\n  const {\n    list,\n    errors,\n    touched,\n    isPreview,\n    onBlur,\n    values,\n    handleMenuItem,\n    handleListItem,\n    handleParamsCheckbox\n  } = props;\n  const {\n    key\n  } = list;\n  const {\n    adParams\n  } = values;\n  const isExcludedRows = key !== 'adsParams';\n  const isOptions = key === 'safety' || key === 'multimedia' || key === 'assistant' || key === 'exterior';\n  const isSpecialRows = key === 'body' || key === 'colors' || isOptions;\n\n  let fields = __jsx(React.Fragment, null);\n\n  const classes = useStyles({\n    isPreview\n  });\n\n  if (isExcludedRows && list.data) {\n    if (isSpecialRows && list.data.length) {\n      fields = __jsx(React.Fragment, null, __jsx(Typography, {\n        variant: \"subtitle1\"\n      }, key, isRequired(key) && __jsx(\"span\", {\n        className: \"error-text\"\n      }, \"*\")), __jsx(\"div\", {\n        className: \"row-list\"\n      }, list.data.map(item => __jsx(\"div\", {\n        key: item.id\n      }, key === 'body' ? __jsx(\"div\", {\n        onClick: !isPreview ? handleListItem(key, item) : null,\n        className: adParams[key] && adParams[key].id === item.id ? classes.selected : ''\n      }, __jsx(\"img\", {\n        src: item.icon.url,\n        alt: item.name\n      }), __jsx(Typography, null, item.name)) : __jsx(React.Fragment, null, key === 'colors' ? __jsx(\"div\", {\n        onClick: !isPreview ? handleListItem(key, item) : null,\n        className: adParams[key] && adParams[key].id === item.id ? classes.selected : '',\n        style: {\n          width: '50px',\n          height: '50px',\n          backgroundColor: `${item.hex_color_code}`\n        }\n      }) : __jsx(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        }\n      }, __jsx(CustomCheckbox, {\n        disabled: isPreview,\n        checked: adParams[key] && adParams[key].some(val => val.id === item.id),\n        onChange: handleParamsCheckbox(key, item)\n      }), __jsx(Typography, null, item.name)))))));\n    } else {\n      if (!Array.isArray(list.data)) {\n        fields = __jsx(React.Fragment, null, __jsx(Typography, {\n          variant: \"subtitle1\"\n        }, key, isRequired(key) && __jsx(\"span\", {\n          className: \"error-text\"\n        }, \"*\")), key === 'body' ? __jsx(Typography, null, list.data.name) : key === 'colors' ? __jsx(\"div\", {\n          style: {\n            width: '50px',\n            height: '50px',\n            backgroundColor: `${list.data.hex_color_code}`\n          }\n        }) : __jsx(Typography, null, list.data.name));\n      } else if (list.data.length) {\n        if (key !== 'condition') list.data = [{\n          id: null,\n          name: 'Не выбрано'\n        }, ...list.data];\n        fields = __jsx(React.Fragment, null, __jsx(Typography, {\n          variant: \"subtitle1\"\n        }, __jsx(\"strong\", null, key, isRequired(key) && __jsx(\"span\", {\n          className: \"error-text\"\n        }, \"*\")), errors.adParams && touched.adParams && errors.adParams[key] && touched.adParams[key] && touched.adParams[key].id && __jsx(\"span\", {\n          className: \"error-text\"\n        }, \" \", errors.adParams[key].id)), __jsx(CustomMenu, {\n          className: errors.adParams && touched.adParams && errors.adParams[key] && touched.adParams[key] ? 'error-border' : '',\n          name: key,\n          onBlur: onBlur,\n          items: list.data,\n          valueName: adParams[key] ? adParams[key].name : list.data[0].name,\n          onClick: handleMenuItem(key)\n        }));\n      }\n    }\n\n    fields = __jsx(Grid, {\n      item: true,\n      container: true,\n      className: classes.gridItem,\n      key: key,\n      xs: 12,\n      sm: isSpecialRows && !isPreview || isOptions ? 12 : 6\n    }, fields);\n  }\n\n  return fields;\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_params/AdvrtParams.tsx"],"names":["isRequired","Grid","Typography","CustomCheckbox","CustomMenu","React","useStyles","AdvrtParams","props","list","errors","touched","isPreview","onBlur","values","handleMenuItem","handleListItem","handleParamsCheckbox","key","adParams","isExcludedRows","isOptions","isSpecialRows","fields","classes","data","length","map","item","id","selected","icon","url","name","width","height","backgroundColor","hex_color_code","display","alignItems","some","val","Array","isArray","gridItem"],"mappings":";AAAA,SAAQA,UAAR,QAAyB,4CAAzB;AACA,SAAQC,IAAR,EAAcC,UAAd,QAA+B,mBAA/B;AACA,SAAQC,cAAR,QAA6B,yDAA7B;AACA,SAAQC,UAAR,QAAyB,iDAAzB;AACA,OAAOC,KAAP,MAAwB,OAAxB;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAGA,OAAO,MAAMC,WAAoB,GAAIC,KAAD,IAAW;AAC3C,QAAM;AACFC,IAAAA,IADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,OAHE;AAIFC,IAAAA,SAJE;AAKFC,IAAAA,MALE;AAMFC,IAAAA,MANE;AAOFC,IAAAA,cAPE;AAQFC,IAAAA,cARE;AASFC,IAAAA;AATE,MAUFT,KAVJ;AAYA,QAAM;AAACU,IAAAA;AAAD,MAAQT,IAAd;AACA,QAAM;AAACU,IAAAA;AAAD,MAAaL,MAAnB;AAEA,QAAMM,cAAc,GAAGF,GAAG,KAAK,WAA/B;AAEA,QAAMG,SAAS,GAAGH,GAAG,KAAK,QAAR,IACXA,GAAG,KAAK,YADG,IAEXA,GAAG,KAAK,WAFG,IAGXA,GAAG,KAAK,UAHf;AAKA,QAAMI,aAAa,GAAGJ,GAAG,KAAK,MAAR,IAAkBA,GAAG,KAAK,QAA1B,IAAsCG,SAA5D;;AAEA,MAAIE,MAAM,GAAG,2BAAb;;AAEA,QAAMC,OAAO,GAAGlB,SAAS,CAAC;AAACM,IAAAA;AAAD,GAAD,CAAzB;;AACA,MAAIQ,cAAc,IAAIX,IAAI,CAACgB,IAA3B,EAAiC;AAC7B,QAAIH,aAAa,IAAIb,IAAI,CAACgB,IAAL,CAAUC,MAA/B,EAAuC;AACnCH,MAAAA,MAAM,GACF,4BACI,MAAC,UAAD;AAAY,QAAA,OAAO,EAAC;AAApB,SACKL,GADL,EAGQlB,UAAU,CAACkB,GAAD,CAAV,IACG;AAAM,QAAA,SAAS,EAAC;AAAhB,aAJX,CADJ,EAQI;AAAK,QAAA,SAAS,EAAC;AAAf,SAEQT,IAAI,CAACgB,IAAL,CAAUE,GAAV,CAAcC,IAAI,IACd;AAAK,QAAA,GAAG,EAAEA,IAAI,CAACC;AAAf,SAEQX,GAAG,KAAK,MAAR,GACM;AACE,QAAA,OAAO,EAAE,CAACN,SAAD,GAAaI,cAAc,CAACE,GAAD,EAAMU,IAAN,CAA3B,GAAyC,IADpD;AAEE,QAAA,SAAS,EACLT,QAAQ,CAACD,GAAD,CAAR,IACGC,QAAQ,CAACD,GAAD,CAAR,CAAcW,EAAd,KAAqBD,IAAI,CAACC,EAD7B,GAEML,OAAO,CAACM,QAFd,GAEyB;AAL/B,SAQE;AAAK,QAAA,GAAG,EAAEF,IAAI,CAACG,IAAL,CAAUC,GAApB;AAAyB,QAAA,GAAG,EAAEJ,IAAI,CAACK;AAAnC,QARF,EASE,MAAC,UAAD,QAAaL,IAAI,CAACK,IAAlB,CATF,CADN,GAYM,4BAEMf,GAAG,KAAK,QAAR,GACM;AACE,QAAA,OAAO,EAAE,CAACN,SAAD,GAAaI,cAAc,CAACE,GAAD,EAAMU,IAAN,CAA3B,GAAyC,IADpD;AAEE,QAAA,SAAS,EAAET,QAAQ,CAACD,GAAD,CAAR,IAAiBC,QAAQ,CAACD,GAAD,CAAR,CAAcW,EAAd,KAAqBD,IAAI,CAACC,EAA3C,GAAgDL,OAAO,CAACM,QAAxD,GAAmE,EAFhF;AAGE,QAAA,KAAK,EAAE;AACHI,UAAAA,KAAK,EAAE,MADJ;AAEHC,UAAAA,MAAM,EAAE,MAFL;AAGHC,UAAAA,eAAe,EAAG,GAAER,IAAI,CAACS,cAAe;AAHrC;AAHT,QADN,GAUM;AAAK,QAAA,KAAK,EAAE;AAACC,UAAAA,OAAO,EAAE,MAAV;AAAkBC,UAAAA,UAAU,EAAE;AAA9B;AAAZ,SACE,MAAC,cAAD;AACI,QAAA,QAAQ,EAAE3B,SADd;AAEI,QAAA,OAAO,EACHO,QAAQ,CAACD,GAAD,CAAR,IAAiBC,QAAQ,CAACD,GAAD,CAAR,CAAcsB,IAAd,CAAmBC,GAAG,IAAIA,GAAG,CAACZ,EAAJ,KAAWD,IAAI,CAACC,EAA1C,CAHzB;AAKI,QAAA,QAAQ,EAAEZ,oBAAoB,CAACC,GAAD,EAAMU,IAAN;AALlC,QADF,EAQE,MAAC,UAAD,QAAaA,IAAI,CAACK,IAAlB,CARF,CAZZ,CAdd,CADJ,CAFR,CARJ,CADJ;AAyDH,KA1DD,MA0DO;AACH,UAAI,CAACS,KAAK,CAACC,OAAN,CAAclC,IAAI,CAACgB,IAAnB,CAAL,EAA+B;AAC3BF,QAAAA,MAAM,GACF,4BACI,MAAC,UAAD;AAAY,UAAA,OAAO,EAAC;AAApB,WACKL,GADL,EAGQlB,UAAU,CAACkB,GAAD,CAAV,IACG;AAAM,UAAA,SAAS,EAAC;AAAhB,eAJX,CADJ,EASQA,GAAG,KAAK,MAAR,GACM,MAAC,UAAD,QAAaT,IAAI,CAACgB,IAAL,CAAUQ,IAAvB,CADN,GAEMf,GAAG,KAAK,QAAR,GACA;AACE,UAAA,KAAK,EAAE;AACHgB,YAAAA,KAAK,EAAE,MADJ;AAEHC,YAAAA,MAAM,EAAE,MAFL;AAGHC,YAAAA,eAAe,EAAG,GAAE3B,IAAI,CAACgB,IAAL,CAAUY,cAAe;AAH1C;AADT,UADA,GAQA,MAAC,UAAD,QAAa5B,IAAI,CAACgB,IAAL,CAAUQ,IAAvB,CAnBd,CADJ;AAwBH,OAzBD,MAyBO,IAAIxB,IAAI,CAACgB,IAAL,CAAUC,MAAd,EAAsB;AACzB,YAAIR,GAAG,KAAK,WAAZ,EAAyBT,IAAI,CAACgB,IAAL,GAAY,CAAC;AAACI,UAAAA,EAAE,EAAE,IAAL;AAAWI,UAAAA,IAAI,EAAE;AAAjB,SAAD,EAAiC,GAAGxB,IAAI,CAACgB,IAAzC,CAAZ;AACzBF,QAAAA,MAAM,GACF,4BACI,MAAC,UAAD;AAAY,UAAA,OAAO,EAAC;AAApB,WACI,sBACKL,GADL,EAGQlB,UAAU,CAACkB,GAAD,CAAV,IACG;AAAM,UAAA,SAAS,EAAC;AAAhB,eAJX,CADJ,EASQR,MAAM,CAACS,QAAP,IACGR,OAAO,CAACQ,QADX,IAEGT,MAAM,CAACS,QAAP,CAAgBD,GAAhB,CAFH,IAGGP,OAAO,CAACQ,QAAR,CAAiBD,GAAjB,CAHH,IAIGP,OAAO,CAACQ,QAAR,CAAiBD,GAAjB,EAAsBW,EAJzB,IAKG;AAAM,UAAA,SAAS,EAAC;AAAhB,gBAA+BnB,MAAM,CAACS,QAAP,CAAgBD,GAAhB,EAAqBW,EAApD,CAdX,CADJ,EAkBI,MAAC,UAAD;AACI,UAAA,SAAS,EACLnB,MAAM,CAACS,QAAP,IACGR,OAAO,CAACQ,QADX,IAEGT,MAAM,CAACS,QAAP,CAAgBD,GAAhB,CAFH,IAGGP,OAAO,CAACQ,QAAR,CAAiBD,GAAjB,CAHH,GAG2B,cAH3B,GAG4C,EALpD;AAOI,UAAA,IAAI,EAAEA,GAPV;AAQI,UAAA,MAAM,EAAEL,MARZ;AASI,UAAA,KAAK,EAAEJ,IAAI,CAACgB,IAThB;AAUI,UAAA,SAAS,EAAEN,QAAQ,CAACD,GAAD,CAAR,GAAgBC,QAAQ,CAACD,GAAD,CAAR,CAAce,IAA9B,GAAqCxB,IAAI,CAACgB,IAAL,CAAU,CAAV,EAAaQ,IAVjE;AAWI,UAAA,OAAO,EAAElB,cAAc,CAACG,GAAD;AAX3B,UAlBJ,CADJ;AAkCH;AACJ;;AACDK,IAAAA,MAAM,GAAG,MAAC,IAAD;AACL,MAAA,IAAI,MADC;AAEL,MAAA,SAAS,MAFJ;AAGL,MAAA,SAAS,EAAEC,OAAO,CAACoB,QAHd;AAIL,MAAA,GAAG,EAAE1B,GAJA;AAKL,MAAA,EAAE,EAAE,EALC;AAML,MAAA,EAAE,EAAEI,aAAa,IAAI,CAACV,SAAlB,IAA+BS,SAA/B,GAA2C,EAA3C,GAAgD;AAN/C,OAQJE,MARI,CAAT;AAUH;;AAED,SAAOA,MAAP;AACH,CApKM","sourcesContent":["import {isRequired} from \"@root/validation_schemas/createAdvrtSchema\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {CustomCheckbox} from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport React, {FC} from \"react\";\r\nimport {useStyles} from \"./useStyles\";\r\n\r\n\r\nexport const AdvrtParams: FC<any> = (props) => {\r\n    const {\r\n        list,\r\n        errors,\r\n        touched,\r\n        isPreview,\r\n        onBlur,\r\n        values,\r\n        handleMenuItem,\r\n        handleListItem,\r\n        handleParamsCheckbox,\r\n    } = props;\r\n\r\n    const {key} = list;\r\n    const {adParams} = values;\r\n\r\n    const isExcludedRows = key !== 'adsParams';\r\n\r\n    const isOptions = key === 'safety'\r\n        || key === 'multimedia'\r\n        || key === 'assistant'\r\n        || key === 'exterior';\r\n\r\n    const isSpecialRows = key === 'body' || key === 'colors' || isOptions;\r\n\r\n    let fields = <></>;\r\n\r\n    const classes = useStyles({isPreview});\r\n    if (isExcludedRows && list.data) {\r\n        if (isSpecialRows && list.data.length) {\r\n            fields = (\r\n                <>\r\n                    <Typography variant=\"subtitle1\">\r\n                        {key}\r\n                        {\r\n                            isRequired(key)\r\n                            && <span className='error-text'>*</span>\r\n                        }\r\n                    </Typography>\r\n                    <div className='row-list'>\r\n                        {\r\n                            list.data.map(item => (\r\n                                <div key={item.id}>\r\n                                    {\r\n                                        key === 'body'\r\n                                            ? <div\r\n                                                onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                                className={\r\n                                                    adParams[key]\r\n                                                    && adParams[key].id === item.id\r\n                                                        ? classes.selected : ''\r\n                                                }\r\n                                            >\r\n                                                <img src={item.icon.url} alt={item.name}/>\r\n                                                <Typography>{item.name}</Typography>\r\n                                            </div>\r\n                                            : <>\r\n                                                {\r\n                                                    key === 'colors'\r\n                                                        ? <div\r\n                                                            onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                                            className={adParams[key] && adParams[key].id === item.id ? classes.selected : ''}\r\n                                                            style={{\r\n                                                                width: '50px',\r\n                                                                height: '50px',\r\n                                                                backgroundColor: `${item.hex_color_code}`,\r\n                                                            }}\r\n                                                        />\r\n                                                        : <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                            <CustomCheckbox\r\n                                                                disabled={isPreview}\r\n                                                                checked={\r\n                                                                    adParams[key] && adParams[key].some(val => val.id === item.id)\r\n                                                                }\r\n                                                                onChange={handleParamsCheckbox(key, item)}\r\n                                                            />\r\n                                                            <Typography>{item.name}</Typography>\r\n                                                        </div>\r\n                                                }\r\n                                            </>\r\n                                    }\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </>\r\n            );\r\n        } else {\r\n            if (!Array.isArray(list.data)) {\r\n                fields = (\r\n                    <>\r\n                        <Typography variant=\"subtitle1\">\r\n                            {key}\r\n                            {\r\n                                isRequired(key)\r\n                                && <span className='error-text'>*</span>\r\n                            }\r\n                        </Typography>\r\n                        {\r\n                            key === 'body'\r\n                                ? <Typography>{list.data.name}</Typography>\r\n                                : key === 'colors'\r\n                                ? <div\r\n                                    style={{\r\n                                        width: '50px',\r\n                                        height: '50px',\r\n                                        backgroundColor: `${list.data.hex_color_code}`\r\n                                    }}\r\n                                />\r\n                                : <Typography>{list.data.name}</Typography>\r\n                        }\r\n                    </>\r\n                );\r\n            } else if (list.data.length) {\r\n                if (key !== 'condition') list.data = [{id: null, name: 'Не выбрано'}, ...list.data];\r\n                fields = (\r\n                    <>\r\n                        <Typography variant=\"subtitle1\">\r\n                            <strong>\r\n                                {key}\r\n                                {\r\n                                    isRequired(key)\r\n                                    && <span className='error-text'>*</span>\r\n                                }\r\n                            </strong>\r\n                            {\r\n                                errors.adParams\r\n                                && touched.adParams\r\n                                && errors.adParams[key]\r\n                                && touched.adParams[key]\r\n                                && touched.adParams[key].id\r\n                                && <span className='error-text'> {errors.adParams[key].id}</span>\r\n                            }\r\n                        </Typography>\r\n                        <CustomMenu\r\n                            className={\r\n                                errors.adParams\r\n                                && touched.adParams\r\n                                && errors.adParams[key]\r\n                                && touched.adParams[key] ? 'error-border' : ''\r\n                            }\r\n                            name={key}\r\n                            onBlur={onBlur}\r\n                            items={list.data}\r\n                            valueName={adParams[key] ? adParams[key].name : list.data[0].name}\r\n                            onClick={handleMenuItem(key)}\r\n                        />\r\n                    </>\r\n                );\r\n            }\r\n        }\r\n        fields = <Grid\r\n            item\r\n            container\r\n            className={classes.gridItem}\r\n            key={key}\r\n            xs={12}\r\n            sm={isSpecialRows && !isPreview || isOptions ? 12 : 6}\r\n        >\r\n            {fields}\r\n        </Grid>\r\n    }\r\n\r\n    return fields;\r\n}"]},"metadata":{},"sourceType":"module"}