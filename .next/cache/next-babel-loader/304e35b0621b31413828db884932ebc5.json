{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { TextField } from \"@material-ui/core\";\n\nconst formatData = list => {\n  return list.reduce((acc, row) => {\n    row.cities.forEach(city => {\n      if (city.district.length) {\n        city.district.forEach(district => {\n          acc = [...acc, {\n            area_id: row.id,\n            area: row.name,\n            city_id: city.id,\n            city: city.name,\n            district_id: district.id,\n            district: district.name\n          }];\n        });\n      } else {\n        acc = [...acc, {\n          area_id: row.id,\n          area: row.name,\n          city_id: city.id,\n          city: city.name\n        }];\n      }\n    });\n    return acc;\n  }, []);\n};\n\nexport const AddressAutocomplete = (_ref) => {\n  let {\n    values,\n    setValues\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"values\", \"setValues\"]);\n\n  const optionSelected = ({\n    district_id,\n    city_id\n  }, value) => {\n    return value.district_id ? district_id === value.district_id : city_id === value.city_id;\n  };\n\n  const option = location => {\n    return location.district ? `${location.district}, ${location.city}, ${location.area}` : location.city_id ? `${location.city}, ${location.area}` : null;\n  };\n\n  const onChange = (_, val) => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      location: val\n    }));\n  };\n\n  return __jsx(Autocomplete, {\n    value: values.location,\n    onChange: onChange,\n    noOptionsText: \"\\u0413\\u043E\\u0440\\u043E\\u0434 \\u0438\\u043B\\u0438 \\u0440\\u0435\\u0433\\u0438\\u043E\\u043D \\u0441 \\u0442\\u0430\\u043A\\u0438\\u043C \\u0438\\u043C\\u0435\\u043D\\u0435\\u043C \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\",\n    options: formatData(props.list),\n    getOptionSelected: optionSelected,\n    getOptionLabel: option,\n    renderInput: params => {\n      return __jsx(TextField, _extends({\n        fullWidth: true,\n        focused: false,\n        variant: \"outlined\"\n      }, params, props));\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/address_autocomplete/AddressAutocomplete.tsx"],"names":["React","Autocomplete","TextField","formatData","list","reduce","acc","row","cities","forEach","city","district","length","area_id","id","area","name","city_id","district_id","AddressAutocomplete","values","setValues","props","optionSelected","value","option","location","onChange","_","val","params"],"mappings":"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","sourcesContent":["import React, {FC} from \"react\";\r\nimport {Autocomplete} from \"@material-ui/lab\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {AddressAutocompleteProps} from \"@root/interfaces/AddressAutocomplete\";\r\n\r\n\r\nconst formatData = (list) => {\r\n    return list.reduce((acc, row) => {\r\n        row.cities.forEach(city => {\r\n            if (city.district.length) {\r\n                city.district.forEach(district => {\r\n                    acc = [\r\n                        ...acc,\r\n                        {\r\n                            area_id: row.id,\r\n                            area: row.name,\r\n                            city_id: city.id,\r\n                            city: city.name,\r\n                            district_id: district.id,\r\n                            district: district.name\r\n                        }\r\n                    ];\r\n                });\r\n            } else {\r\n                acc = [\r\n                    ...acc,\r\n                    {\r\n                        area_id: row.id,\r\n                        area: row.name,\r\n                        city_id: city.id,\r\n                        city: city.name\r\n                    }\r\n                ];\r\n            }\r\n        });\r\n        return acc;\r\n    }, []);\r\n};\r\n\r\nexport const AddressAutocomplete: FC<AddressAutocompleteProps> = ({values, setValues, ...props}) => {\r\n    const optionSelected = ({district_id, city_id}, value) => {\r\n        return value.district_id\r\n            ? district_id === value.district_id\r\n            : city_id === value.city_id;\r\n    };\r\n\r\n    const option = (location) => {\r\n        return location.district\r\n            ? `${location.district}, ${location.city}, ${location.area}`\r\n            : location.city_id\r\n                ? `${location.city}, ${location.area}`\r\n                : null;\r\n    };\r\n\r\n    const onChange = (_, val) => {\r\n        setValues({...values, location: val})\r\n    };\r\n\r\n    return (\r\n        <Autocomplete\r\n            value={values.location}\r\n            onChange={onChange}\r\n            noOptionsText='Город или регион с таким именем не найден'\r\n            options={formatData(props.list)}\r\n            getOptionSelected={optionSelected}\r\n            getOptionLabel={option}\r\n            renderInput={(params) => {\r\n                return <TextField\r\n                    fullWidth\r\n                    focused={false}\r\n                    variant='outlined'\r\n                    {...params}\r\n                    {...props}\r\n                />\r\n            }}\r\n        />\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}