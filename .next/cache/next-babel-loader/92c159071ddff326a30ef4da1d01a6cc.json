{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { userAPI } from \"@src/api/api\";\nimport { i18n } from '@root/i18n';\nimport { useRouter } from 'next/router';\nimport { ShowAdLot } from \"@src/components/advertisement/show_advertisement/ShowAdLot\";\nvar initValues = {\n  id: null,\n  name: ''\n};\nvar initialAdData = {\n  isFetch: false,\n  error: null,\n  data: {\n    id: null,\n    title: '',\n    currency: initValues,\n    condition: initValues,\n    created_at: null,\n    expiration_at: null,\n    number_of_views: null,\n    images: [],\n    description: '',\n    region: initValues,\n    city: initValues,\n    district: initValues\n  }\n};\nexport var ShowAdLotContainer = function ShowAdLotContainer(_ref) {\n  _s();\n\n  var t = _ref.t;\n\n  var _useState = useState(initialAdData),\n      adData = _useState[0],\n      setAdData = _useState[1];\n\n  var adsId = useRouter().query.id;\n  var lang = i18n.language;\n\n  var fetchAdData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$userAPI$getAdd, title, currency, condition, images, description, region, city, district, otherData;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              setAdData(_objectSpread(_objectSpread({}, adData), {}, {\n                isFetch: true\n              }));\n              _context.next = 4;\n              return userAPI.getAddById(adsId, lang);\n\n            case 4:\n              _yield$userAPI$getAdd = _context.sent;\n              title = _yield$userAPI$getAdd.title;\n              currency = _yield$userAPI$getAdd.currency;\n              condition = _yield$userAPI$getAdd.condition;\n              images = _yield$userAPI$getAdd.images;\n              description = _yield$userAPI$getAdd.description;\n              region = _yield$userAPI$getAdd.region;\n              city = _yield$userAPI$getAdd.city;\n              district = _yield$userAPI$getAdd.district;\n              otherData = _objectWithoutProperties(_yield$userAPI$getAdd, [\"title\", \"currency\", \"condition\", \"images\", \"description\", \"region\", \"city\", \"district\"]);\n              setAdData(_objectSpread(_objectSpread({}, adData), {}, {\n                isFetch: false\n              }));\n              setAdData(_objectSpread(_objectSpread({}, adData), {}, {\n                data: _objectSpread({\n                  title: title,\n                  images: images,\n                  description: description,\n                  currency: currency !== null && currency !== void 0 ? currency : initValues,\n                  condition: condition !== null && condition !== void 0 ? condition : initValues,\n                  region: region !== null && region !== void 0 ? region : initValues,\n                  city: city !== null && city !== void 0 ? city : initValues,\n                  district: district !== null && district !== void 0 ? district : initValues\n                }, otherData)\n              }));\n              _context.next = 21;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](0);\n              setAdData(_objectSpread(_objectSpread({}, adData), {}, {\n                error: _context.t0.message\n              }));\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 18]]);\n    }));\n\n    return function fetchAdData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    fetchAdData();\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(ShowAdLot, {\n    adData: adData,\n    t: t\n  }));\n};\n\n_s(ShowAdLotContainer, \"72t1xslJSWFbvng2H5VcWfFxNeY=\", false, function () {\n  return [useRouter];\n});\n\n_c = ShowAdLotContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowAdLotContainer\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/show_advertisement/showAdLotContainer.tsx"],"names":["React","useEffect","useState","userAPI","i18n","useRouter","ShowAdLot","initValues","id","name","initialAdData","isFetch","error","data","title","currency","condition","created_at","expiration_at","number_of_views","images","description","region","city","district","ShowAdLotContainer","t","adData","setAdData","adsId","query","lang","language","fetchAdData","getAddById","otherData","message"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport {userAPI} from \"@src/api/api\";\r\nimport {i18n} from '@root/i18n';\r\nimport {useRouter} from 'next/router';\r\nimport {ShowAdLot} from \"@src/components/advertisement/show_advertisement/ShowAdLot\";\r\n\r\n\r\nconst initValues = {id: null, name: ''};\r\n\r\nconst initialAdData = {\r\n    isFetch: false,\r\n    error: null,\r\n    data: {\r\n        id: null,\r\n        title: '',\r\n        currency: initValues,\r\n        condition: initValues,\r\n        created_at: null,\r\n        expiration_at: null,\r\n        number_of_views: null,\r\n        images: [],\r\n        description: '',\r\n        region: initValues,\r\n        city: initValues,\r\n        district: initValues,\r\n    },\r\n};\r\n\r\nexport const ShowAdLotContainer = ({t}) => {\r\n    const [adData, setAdData] = useState(initialAdData);\r\n    const adsId = useRouter().query.id;\r\n    const lang = i18n.language;\r\n\r\n    const fetchAdData = async () => {\r\n        try {\r\n            setAdData({\r\n                ...adData,\r\n                isFetch: true\r\n            });\r\n\r\n            const {\r\n                title,\r\n                currency,\r\n                condition,\r\n                images,\r\n                description,\r\n                region,\r\n                city,\r\n                district,\r\n                ...otherData\r\n            } = await userAPI.getAddById(adsId, lang);\r\n\r\n            setAdData({\r\n                ...adData,\r\n                isFetch: false\r\n            });\r\n\r\n            setAdData({\r\n                ...adData,\r\n                data: {\r\n                    title,\r\n                    images,\r\n                    description,\r\n                    currency: currency ?? initValues,\r\n                    condition: condition ?? initValues,\r\n                    region: region ?? initValues,\r\n                    city: city ?? initValues,\r\n                    district: district ?? initValues,\r\n                    ...otherData\r\n                }\r\n            });\r\n\r\n        } catch (e) {\r\n            setAdData({\r\n                ...adData,\r\n                error: e.message\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchAdData()\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <ShowAdLot adData={adData} t={t}/>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}