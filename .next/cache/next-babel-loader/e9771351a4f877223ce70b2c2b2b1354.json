{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useRef, useState, useEffect } from 'react';\nimport { CustomSlider } from '../../../elements/custom_slider/CustomSlider';\nimport { useStyles } from './useStyles';\nexport const ModalSyncSliders = props => {\n  const {\n    imgs,\n    initialSlide,\n    setInitialSlide\n  } = props;\n  const {\n    0: slidersNav,\n    1: setSlidersNav\n  } = useState({\n    nav1: null,\n    nav2: null\n  });\n  const slider1 = useRef();\n  const slider2 = useRef();\n\n  const handleAfterChange = slide => {\n    setInitialSlide(slide);\n  };\n\n  useEffect(() => {\n    setSlidersNav({\n      nav1: slider1.current,\n      nav2: slider2.current\n    });\n  }, []);\n  const classes = useStyles();\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", {\n    className: classes.firstSlider\n  }, __jsx(CustomSlider, {\n    ref: slider1,\n    asNavFor: slidersNav.nav2,\n    centerMode: imgs.length === 1,\n    initialSlide: initialSlide,\n    afterChange: handleAfterChange\n  }, imgs.map((img, i) => __jsx(\"img\", {\n    key: i,\n    alt: img.alt,\n    src: img.url.default\n  })))), __jsx(\"div\", {\n    className: classes.secondSlider\n  }, __jsx(CustomSlider, {\n    ref: slider2,\n    asNavFor: slidersNav.nav1,\n    slidesToShow: 4,\n    slidesToScroll: 1,\n    focusOnSelect: true,\n    arrows: false,\n    initialSlide: initialSlide\n  }, imgs.map(({\n    url,\n    alt\n  }, i) => __jsx(\"img\", {\n    key: i,\n    alt: alt,\n    src: url.default\n  })))));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/show_advertisement/modal_sync_sliders/ModalSyncSliders.tsx"],"names":["React","useRef","useState","useEffect","CustomSlider","useStyles","ModalSyncSliders","props","imgs","initialSlide","setInitialSlide","slidersNav","setSlidersNav","nav1","nav2","slider1","slider2","handleAfterChange","slide","current","classes","root","firstSlider","length","map","img","i","alt","url","default","secondSlider"],"mappings":";AAAA,OAAOA,KAAP,IAKIC,MALJ,EAMIC,QANJ,EAOIC,SAPJ,QAQO,OARP;AASA,SAAQC,YAAR,QAA2B,8CAA3B;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAYA,OAAO,MAAMC,gBAAsC,GAAIC,KAAD,IAAW;AAC7D,QAAM;AACFC,IAAAA,IADE;AAEFC,IAAAA,YAFE;AAGFC,IAAAA;AAHE,MAIFH,KAJJ;AAMA,QAAM;AAAA,OAACI,UAAD;AAAA,OAAaC;AAAb,MAA8BV,QAAQ,CAAC;AAACW,IAAAA,IAAI,EAAE,IAAP;AAAaC,IAAAA,IAAI,EAAE;AAAnB,GAAD,CAA5C;AACA,QAAMC,OAAkC,GAAGd,MAAM,EAAjD;AACA,QAAMe,OAAkC,GAAGf,MAAM,EAAjD;;AAEA,QAAMgB,iBAAiB,GAAIC,KAAD,IAAW;AACjCR,IAAAA,eAAe,CAACQ,KAAD,CAAf;AACH,GAFD;;AAIAf,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,aAAa,CAAC;AACVC,MAAAA,IAAI,EAAEE,OAAO,CAACI,OADJ;AAEVL,MAAAA,IAAI,EAAEE,OAAO,CAACG;AAFJ,KAAD,CAAb;AAIH,GALQ,EAKN,EALM,CAAT;AAOA,QAAMC,OAAO,GAAGf,SAAS,EAAzB;AACA,SACI;AAAK,IAAA,SAAS,EAAEe,OAAO,CAACC;AAAxB,KACI;AAAK,IAAA,SAAS,EAAED,OAAO,CAACE;AAAxB,KACI,MAAC,YAAD;AACI,IAAA,GAAG,EAAEP,OADT;AAEI,IAAA,QAAQ,EAAEJ,UAAU,CAACG,IAFzB;AAGI,IAAA,UAAU,EAAEN,IAAI,CAACe,MAAL,KAAgB,CAHhC;AAII,IAAA,YAAY,EAAEd,YAJlB;AAKI,IAAA,WAAW,EAAEQ;AALjB,KAOKT,IAAI,CAACgB,GAAL,CAAS,CAACC,GAAD,EAAMC,CAAN,KACN;AACI,IAAA,GAAG,EAAEA,CADT;AAEI,IAAA,GAAG,EAAED,GAAG,CAACE,GAFb;AAGI,IAAA,GAAG,EAAEF,GAAG,CAACG,GAAJ,CAAQC;AAHjB,IADH,CAPL,CADJ,CADJ,EAkBI;AAAK,IAAA,SAAS,EAAET,OAAO,CAACU;AAAxB,KACI,MAAC,YAAD;AACI,IAAA,GAAG,EAAEd,OADT;AAEI,IAAA,QAAQ,EAAEL,UAAU,CAACE,IAFzB;AAGI,IAAA,YAAY,EAAE,CAHlB;AAII,IAAA,cAAc,EAAE,CAJpB;AAKI,IAAA,aAAa,EAAE,IALnB;AAMI,IAAA,MAAM,EAAE,KANZ;AAOI,IAAA,YAAY,EAAEJ;AAPlB,KASKD,IAAI,CAACgB,GAAL,CAAS,CAAC;AAACI,IAAAA,GAAD;AAAMD,IAAAA;AAAN,GAAD,EAAaD,CAAb,KACN;AACI,IAAA,GAAG,EAAEA,CADT;AAEI,IAAA,GAAG,EAAEC,GAFT;AAGI,IAAA,GAAG,EAAEC,GAAG,CAACC;AAHb,IADH,CATL,CADJ,CAlBJ,CADJ;AAwCH,CA/DM","sourcesContent":["import React, {\r\n    FC,\r\n    Dispatch,\r\n    SetStateAction,\r\n    MutableRefObject,\r\n    useRef,\r\n    useState,\r\n    useEffect,\r\n} from 'react';\r\nimport {CustomSlider} from '../../../elements/custom_slider/CustomSlider';\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\ntype SyncSlidersProps = {\r\n    initialSlide: number;\r\n    setInitialSlide: Dispatch<SetStateAction<number>>;\r\n    imgs: {\r\n        alt: string;\r\n        url: { default: string }\r\n    }[];\r\n};\r\n\r\nexport const ModalSyncSliders: FC<SyncSlidersProps> = (props) => {\r\n    const {\r\n        imgs,\r\n        initialSlide,\r\n        setInitialSlide,\r\n    } = props;\r\n\r\n    const [slidersNav, setSlidersNav] = useState({nav1: null, nav2: null});\r\n    const slider1: MutableRefObject<unknown> = useRef();\r\n    const slider2: MutableRefObject<unknown> = useRef();\r\n\r\n    const handleAfterChange = (slide) => {\r\n        setInitialSlide(slide);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setSlidersNav({\r\n            nav1: slider1.current,\r\n            nav2: slider2.current,\r\n        });\r\n    }, []);\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.firstSlider}>\r\n                <CustomSlider\r\n                    ref={slider1}\r\n                    asNavFor={slidersNav.nav2}\r\n                    centerMode={imgs.length === 1}\r\n                    initialSlide={initialSlide}\r\n                    afterChange={handleAfterChange}\r\n                >\r\n                    {imgs.map((img, i) => (\r\n                        <img\r\n                            key={i}\r\n                            alt={img.alt}\r\n                            src={img.url.default}\r\n                        />\r\n                    ))}\r\n                </CustomSlider>\r\n            </div>\r\n            <div className={classes.secondSlider}>\r\n                <CustomSlider\r\n                    ref={slider2}\r\n                    asNavFor={slidersNav.nav1}\r\n                    slidesToShow={4}\r\n                    slidesToScroll={1}\r\n                    focusOnSelect={true}\r\n                    arrows={false}\r\n                    initialSlide={initialSlide}\r\n                >\r\n                    {imgs.map(({url, alt}, i) => (\r\n                        <img\r\n                            key={i}\r\n                            alt={alt}\r\n                            src={url.default}\r\n                        />\r\n                    ))}\r\n                </CustomSlider>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}