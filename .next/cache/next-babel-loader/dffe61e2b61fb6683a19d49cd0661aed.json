{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { useStyles } from './useStyles';\nexport const AdvrtSettingsBlock = props => {\n  const {\n    isPreview,\n    createAdvrt,\n    adsParams,\n    onBlur,\n    handleMenuItem,\n    handleListItem\n  } = props;\n  const data = isPreview ? adsParams : createAdvrt.data;\n  const rows = Object.keys(data).map(key => {\n    return __jsx(React.Fragment, null, listGenerator(data[key], key), !isPreview && adsParams[key] && Object.keys(adsParams[key]).map(innerKey => {\n      if (Array.isArray(adsParams[key][innerKey]) && adsParams[key][innerKey].length) {\n        return listGenerator(adsParams[key][innerKey], innerKey);\n      }\n    }));\n  });\n  const classes = useStyles({\n    isPreview\n  });\n  return __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    className: classes.root\n  }, rows);\n\n  function listGenerator(data, key) {\n    let fields;\n\n    if (key !== 'adsParams' && key !== 'address' && key !== 'id' && key !== 'name') {\n      if ((key === 'body' || key === 'colors') && Array.isArray(data) && data.length) {\n        fields = __jsx(\"div\", {\n          className: \"colors-list\"\n        }, data.map(item => __jsx(\"div\", {\n          key: item.id,\n          onClick: handleListItem(key, item)\n        }, key === 'body' ? __jsx(\"div\", null, __jsx(\"img\", {\n          src: item.icon.url,\n          alt: item.name\n        }), __jsx(Typography, null, item.name)) : __jsx(\"div\", {\n          style: {\n            width: '50px',\n            height: '50px',\n            backgroundColor: `${item.hex_color_code}`\n          }\n        }))));\n      } else {\n        if (Array.isArray(data)) {\n          data = [{\n            id: null,\n            name: 'Не выбрано'\n          }, ...data];\n          fields = __jsx(CustomMenu, {\n            valueName: adsParams[key] ? adsParams[key].name : data[0].name,\n            items: data,\n            onBlur: onBlur,\n            onClick: handleMenuItem(key)\n          });\n        } else {\n          fields = key === 'body' ? __jsx(\"div\", null, __jsx(\"img\", {\n            src: data.icon.url,\n            alt: data.name\n          }), __jsx(Typography, null, data.name)) : key === 'colors' ? __jsx(\"div\", {\n            style: {\n              width: '50px',\n              height: '50px',\n              backgroundColor: `${data.hex_color_code}`\n            }\n          }) : __jsx(Typography, null, data.name);\n        }\n      }\n\n      return __jsx(Grid, {\n        item: true,\n        container: true,\n        key: key,\n        xs: 12,\n        className: classes.gridItem,\n        sm: (key === 'body' || key === 'colors') && !isPreview ? 12 : 6\n      }, __jsx(Typography, {\n        variant: \"subtitle1\"\n      }, key), fields);\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_settings_block/AdvrtSettingsBlock.tsx"],"names":["React","Grid","Typography","CustomMenu","useStyles","AdvrtSettingsBlock","props","isPreview","createAdvrt","adsParams","onBlur","handleMenuItem","handleListItem","data","rows","Object","keys","map","key","listGenerator","innerKey","Array","isArray","length","classes","root","fields","item","id","icon","url","name","width","height","backgroundColor","hex_color_code","gridItem"],"mappings":"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","sourcesContent":["import React, {FC} from \"react\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {ItemsType} from \"@root/interfaces/CustomMenuProps\";\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const AdvrtSettingsBlock: FC<any> = (props) => {\r\n    const {\r\n        isPreview,\r\n        createAdvrt,\r\n        adsParams,\r\n        onBlur,\r\n        handleMenuItem,\r\n        handleListItem\r\n    } = props;\r\n\r\n    const data = isPreview ? adsParams : createAdvrt.data;\r\n\r\n    const rows = Object.keys(data).map(key => {\r\n        return (\r\n            <>\r\n                {listGenerator(data[key], key)}\r\n                {\r\n                    !isPreview && adsParams[key] && Object.keys(adsParams[key]).map(innerKey => {\r\n                        if (Array.isArray(adsParams[key][innerKey]) && adsParams[key][innerKey].length) {\r\n                            return listGenerator(adsParams[key][innerKey], innerKey)\r\n                        }\r\n                    })\r\n                }\r\n            </>\r\n        );\r\n    });\r\n\r\n    const classes = useStyles({isPreview});\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={1}\r\n            className={classes.root}\r\n        >\r\n            {rows}\r\n        </Grid>\r\n    )\r\n\r\n    function listGenerator(data: ItemsType | ItemsType[], key: string) {\r\n        let fields;\r\n\r\n        if (key !== 'adsParams' && key !== 'address' && key !== 'id' && key !== 'name') {\r\n            if ((key === 'body' || key === 'colors') && Array.isArray(data) && data.length) {\r\n                fields =\r\n                    <div className='colors-list'>\r\n                        {\r\n                            data.map(item => (\r\n                                <div\r\n                                    key={item.id}\r\n                                    onClick={handleListItem(key, item)}\r\n                                >\r\n                                    {\r\n                                        key === 'body'\r\n                                            ? (\r\n                                                <div>\r\n                                                    <img src={item.icon.url} alt={item.name}/>\r\n                                                    <Typography>{item.name}</Typography>\r\n                                                </div>\r\n                                            )\r\n                                            : (\r\n                                                <div\r\n                                                    style={{\r\n                                                        width: '50px',\r\n                                                        height: '50px',\r\n                                                        backgroundColor: `${item.hex_color_code}`\r\n                                                    }}\r\n                                                />\r\n                                            )\r\n                                    }\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n            } else {\r\n                if (Array.isArray(data)) {\r\n                    data = [{id: null, name: 'Не выбрано'}, ...data];\r\n                    fields = <CustomMenu\r\n                        valueName={adsParams[key] ? adsParams[key].name : data[0].name}\r\n                        items={data}\r\n                        onBlur={onBlur}\r\n                        onClick={handleMenuItem(key)}\r\n                    />;\r\n                } else {\r\n                    fields = key === 'body'\r\n                        ? <div>\r\n                            <img src={data.icon.url} alt={data.name}/>\r\n                            <Typography>{data.name}</Typography>\r\n                        </div>\r\n                        : key === 'colors'\r\n                            ? <div\r\n                                style={{\r\n                                    width: '50px',\r\n                                    height: '50px',\r\n                                    backgroundColor: `${data.hex_color_code}`\r\n                                }}\r\n                            />\r\n                            : <Typography>{data.name}</Typography>\r\n                }\r\n            }\r\n            return (\r\n                <Grid\r\n                    item\r\n                    container\r\n                    key={key}\r\n                    xs={12}\r\n                    className={classes.gridItem}\r\n                    sm={(key === 'body' || key === 'colors') && !isPreview ? 12 : 6}\r\n                >\r\n                    <Typography variant=\"subtitle1\">{key}</Typography>\r\n                    {fields}\r\n                </Grid>\r\n            )\r\n        }\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}