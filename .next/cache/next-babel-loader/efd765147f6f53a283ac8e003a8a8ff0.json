{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { CustomFormikField } from \"@src/components/elements/custom_formik_field/CustomFormikField\";\n\nvar option = function option(_ref) {\n  var area = _ref.area,\n      city = _ref.city,\n      district = _ref.district;\n  return \"\".concat(district ? \"\".concat(district, \", \") : '').concat(city, \", \").concat(area);\n};\n\nvar formatData = function formatData(list) {\n  return list.reduce(function (acc, row) {\n    row.cities.forEach(function (city) {\n      if (city.district.length) {\n        city.district.forEach(function (dis) {\n          acc = [].concat(_toConsumableArray(acc), [{\n            area: row.name,\n            city: city.name,\n            district: dis.name\n          }]);\n        });\n      } else {\n        acc = [].concat(_toConsumableArray(acc), [{\n          area: row.name,\n          city: city.name\n        }]);\n      }\n    });\n    return acc;\n  }, []);\n};\n\nexport var AddressAutocomplete = function AddressAutocomplete(props) {\n  return __jsx(Autocomplete, {\n    options: formatData(props.list),\n    getOptionLabel: option,\n    renderInput: function renderInput(params) {\n      console.log(params);\n      return __jsx(CustomFormikField, _extends({}, params, props));\n    }\n  });\n};\n_c = AddressAutocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddressAutocomplete\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/address_autocomplete/AddressAutocomplete.tsx"],"names":["React","Autocomplete","CustomFormikField","option","area","city","district","formatData","list","reduce","acc","row","cities","forEach","length","dis","name","AddressAutocomplete","props","params","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAwB,OAAxB;AACA,SAAQC,YAAR,QAA2B,kBAA3B;AACA,SAAQC,iBAAR,QAAgC,gEAAhC;;AAGA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAA4B;AAAA,MAA1BC,IAA0B,QAA1BA,IAA0B;AAAA,MAApBC,IAAoB,QAApBA,IAAoB;AAAA,MAAdC,QAAc,QAAdA,QAAc;AACvC,mBAAUA,QAAQ,aAAMA,QAAN,UAAqB,EAAvC,SAA4CD,IAA5C,eAAqDD,IAArD;AACH,CAFD;;AAIA,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAU;AACzB,SAAOA,IAAI,CAACC,MAAL,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7BA,IAAAA,GAAG,CAACC,MAAJ,CAAWC,OAAX,CAAmB,UAACR,IAAD,EAAU;AACzB,UAAIA,IAAI,CAACC,QAAL,CAAcQ,MAAlB,EAA0B;AACtBT,QAAAA,IAAI,CAACC,QAAL,CAAcO,OAAd,CAAsB,UAACE,GAAD,EAAS;AAC3BL,UAAAA,GAAG,gCACIA,GADJ,IAEC;AACIN,YAAAA,IAAI,EAAEO,GAAG,CAACK,IADd;AAEIX,YAAAA,IAAI,EAAEA,IAAI,CAACW,IAFf;AAGIV,YAAAA,QAAQ,EAAES,GAAG,CAACC;AAHlB,WAFD,EAAH;AAQH,SATD;AAUH,OAXD,MAWO;AACHN,QAAAA,GAAG,gCACIA,GADJ,IAEC;AACIN,UAAAA,IAAI,EAAEO,GAAG,CAACK,IADd;AAEIX,UAAAA,IAAI,EAAEA,IAAI,CAACW;AAFf,SAFD,EAAH;AAOH;AACJ,KArBD;AAsBA,WAAON,GAAP;AACH,GAxBM,EAwBJ,EAxBI,CAAP;AAyBH,CA1BD;;AA4BA,OAAO,IAAMO,mBAA0F,GAAG,SAA7FA,mBAA6F,CAACC,KAAD,EAAW;AACjH,SACI,MAAC,YAAD;AACI,IAAA,OAAO,EAAEX,UAAU,CAACW,KAAK,CAACV,IAAP,CADvB;AAEI,IAAA,cAAc,EAAEL,MAFpB;AAGI,IAAA,WAAW,EAAE,qBAACgB,MAAD,EAAY;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,aAAO,MAAC,iBAAD,eAAuBA,MAAvB,EAAmCD,KAAnC,EAAP;AACH;AANL,IADJ;AAUH,CAXM;KAAMD,mB","sourcesContent":["import React, {FC} from \"react\";\r\nimport {Autocomplete} from \"@material-ui/lab\";\r\nimport {CustomFormikField} from \"@src/components/elements/custom_formik_field/CustomFormikField\";\r\n\r\n\r\nconst option = ({area, city, district}) => {\r\n    return `${district ? `${district}, ` : ''}${city}, ${area}`;\r\n};\r\n\r\nconst formatData = (list) => {\r\n    return list.reduce((acc, row) => {\r\n        row.cities.forEach((city) => {\r\n            if (city.district.length) {\r\n                city.district.forEach((dis) => {\r\n                    acc = [\r\n                        ...acc,\r\n                        {\r\n                            area: row.name,\r\n                            city: city.name,\r\n                            district: dis.name\r\n                        }\r\n                    ];\r\n                });\r\n            } else {\r\n                acc = [\r\n                    ...acc,\r\n                    {\r\n                        area: row.name,\r\n                        city: city.name\r\n                    }\r\n                ];\r\n            }\r\n        });\r\n        return acc;\r\n    }, []);\r\n}\r\n\r\nexport const AddressAutocomplete: FC<{ placeholder: string, name: string, value: string, list: any[] }> = (props) => {\r\n    return (\r\n        <Autocomplete\r\n            options={formatData(props.list)}\r\n            getOptionLabel={option}\r\n            renderInput={(params) => {\r\n                console.log(params)\r\n                return <CustomFormikField {...params} {...props} />\r\n            }}\r\n        />\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}