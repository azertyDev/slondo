{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { Grid, Hidden, Container, Typography } from '@material-ui/core';\nimport { AdvrtForm } from './advrtForm/AdvrtForm';\nimport { SuccessAdvrt } from './successAdvrt/SuccessAdvrt';\nimport { createAdvrtSchema } from \"@root/validation_schemas/createAdvrtSchema\";\nimport { useFormik, FormikProvider } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport { ButtonComponent } from \"@src/components/elements/button/Button\";\nimport { MainLayout } from \"@src/components/MainLayout\"; // styles\n\nimport { useStyles } from './useStyles';\nvar initFields = {\n  title: '',\n  safe_deal: false,\n  delivery: false,\n  exchange: false,\n  location: '',\n  files: [],\n  description: '',\n  phone: '',\n  adsParams: {}\n};\nexport var CreateAdvrt = function CreateAdvrt() {\n  _s();\n\n  var _useSelector = useSelector(function (store) {\n    return store;\n  }),\n      createAdvrt = _useSelector.createAdvrt;\n\n  var _useState = useState(false),\n      isPreview = _useState[0],\n      setIsPreview = _useState[1];\n\n  var _useState2 = useState(false),\n      isSuccess = _useState2[0],\n      setIsSuccess = _useState2[1];\n\n  var _useState3 = useState(initFields),\n      fields = _useState3[0],\n      setFields = _useState3[1];\n\n  var onSubmit = function onSubmit() {\n    isPreview ? console.log('submit') : setIsPreview(true);\n  };\n\n  var formik = useFormik({\n    initialValues: initFields,\n    validationSchema: createAdvrtSchema,\n    onSubmit: onSubmit\n  });\n  var setValues = formik.setValues,\n      values = formik.values,\n      errors = formik.errors,\n      touched = formik.touched,\n      handleBlur = formik.handleBlur;\n\n  var handleChange = function handleChange(e) {\n    setFields(_objectSpread(_objectSpread({}, fields), {}, _defineProperty({}, e.target.name, e.target.value)));\n    setValues(_objectSpread(_objectSpread({}, values), {}, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var handlePreview = function handlePreview(value) {\n    return function () {\n      setIsPreview(value);\n    };\n  };\n\n  var handleCheckboxChange = function handleCheckboxChange(valName) {\n    return function (_ref) {\n      var target = _ref.target;\n      setValues(_objectSpread(_objectSpread({}, values), {}, _defineProperty({}, valName, target.checked)));\n    };\n  };\n\n  var handleClickMenuItem = function handleClickMenuItem(valueName) {\n    return function (newValue, setAnchor) {\n      return function () {\n        setAnchor(null);\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          adsParams: _objectSpread(_objectSpread({}, values.adsParams), {}, _defineProperty({}, valueName, newValue))\n        })); // Reset sub props in values\n\n        Object.keys(newValue).map(function (key) {\n          if (values.adsParams[key]) {\n            var _objectSpread6;\n\n            setValues(_objectSpread(_objectSpread({}, values), {}, {\n              adsParams: _objectSpread(_objectSpread({}, values.adsParams), {}, (_objectSpread6 = {}, _defineProperty(_objectSpread6, valueName, newValue), _defineProperty(_objectSpread6, key, _objectSpread({\n                id: null,\n                name: 'Не выбрано'\n              }, newValue[key])), _objectSpread6))\n            }));\n          }\n        });\n      };\n    };\n  };\n\n  var resetValues = function resetValues() {\n    setValues(initFields);\n  };\n\n  var valid = createAdvrtSchema.isValidSync(values);\n  console.log(fields, valid);\n  var classes = useStyles();\n  return __jsx(MainLayout, null, __jsx(Container, {\n    maxWidth: \"lg\"\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 9\n  }, __jsx(FormikProvider, {\n    value: formik\n  }, __jsx(\"form\", {\n    onSubmit: formik.handleSubmit\n  }, isSuccess ? __jsx(SuccessAdvrt, null) : __jsx(AdvrtForm, {\n    isPreview: isPreview,\n    setIsPreview: setIsPreview,\n    createAdvrt: createAdvrt,\n    errors: errors,\n    touched: touched,\n    values: values,\n    handleBlur: handleBlur,\n    handleChange: handleChange,\n    resetValues: resetValues,\n    handleClickMenuItem: handleClickMenuItem,\n    handleCheckboxChange: handleCheckboxChange\n  }), __jsx(\"div\", {\n    className: classes.nextButtonBlock\n  }, isPreview && __jsx(ButtonComponent, {\n    className: classes.nextButton,\n    onClick: handlePreview(false)\n  }, __jsx(Typography, null, \"\\u041D\\u0430\\u0437\\u0430\\u0434\")), __jsx(ButtonComponent, {\n    type: \"submit\",\n    className: classes.nextButton\n  }, __jsx(Typography, null, isPreview ? 'Создать' : 'Далее')))))), __jsx(Hidden, {\n    smDown: true\n  }, __jsx(Grid, {\n    item: true,\n    md: 3,\n    container: true,\n    justify: \"flex-end\",\n    className: classes.adBanner\n  }, __jsx(Grid, {\n    item: true,\n    md: 12\n  }, __jsx(\"div\", {\n    className: \"right-banner\"\n  })))))));\n};\n\n_s(CreateAdvrt, \"GcV1XwemamCJG6kn8anOvPygfnM=\", false, function () {\n  return [useSelector, useFormik, useStyles];\n});\n\n_c = CreateAdvrt;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAdvrt\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/CreateAdvrt.tsx"],"names":["React","useState","Grid","Hidden","Container","Typography","AdvrtForm","SuccessAdvrt","createAdvrtSchema","useFormik","FormikProvider","useSelector","ButtonComponent","MainLayout","useStyles","initFields","title","safe_deal","delivery","exchange","location","files","description","phone","adsParams","CreateAdvrt","store","createAdvrt","isPreview","setIsPreview","isSuccess","setIsSuccess","fields","setFields","onSubmit","console","log","formik","initialValues","validationSchema","setValues","values","errors","touched","handleBlur","handleChange","e","target","name","value","handlePreview","handleCheckboxChange","valName","checked","handleClickMenuItem","valueName","newValue","setAnchor","Object","keys","map","key","id","resetValues","valid","isValidSync","classes","handleSubmit","nextButtonBlock","nextButton","adBanner"],"mappings":"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","sourcesContent":["import React, {FC, useState} from 'react';\r\nimport {Grid, Hidden, Container, Typography} from '@material-ui/core';\r\nimport {AdvrtForm} from './advrtForm/AdvrtForm';\r\nimport {SuccessAdvrt} from './successAdvrt/SuccessAdvrt';\r\nimport {AdvertisementProps} from \"@root/interfaces/Advertisement\";\r\nimport {createAdvrtSchema} from \"@root/validation_schemas/createAdvrtSchema\";\r\nimport {useFormik, FormikProvider} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"@src/redux/rootReducer\";\r\nimport {ButtonComponent} from \"@src/components/elements/button/Button\";\r\nimport {MainLayout} from \"@src/components/MainLayout\";\r\n// styles\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nconst initFields = {\r\n    title: '',\r\n    safe_deal: false,\r\n    delivery: false,\r\n    exchange: false,\r\n    location: '',\r\n    files: [],\r\n    description: '',\r\n    phone: '',\r\n    adsParams: {}\r\n};\r\n\r\nexport const CreateAdvrt: FC<AdvertisementProps> = () => {\r\n    const {createAdvrt} = useSelector((store: RootState) => store);\r\n\r\n    const [isPreview, setIsPreview] = useState(false);\r\n    const [isSuccess, setIsSuccess] = useState(false);\r\n    const [fields, setFields] = useState(initFields);\r\n\r\n\r\n    const onSubmit = () => {\r\n        isPreview\r\n            ? console.log('submit')\r\n            : setIsPreview(true)\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: initFields,\r\n        validationSchema: createAdvrtSchema,\r\n        onSubmit\r\n    });\r\n\r\n    const {\r\n        setValues,\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleBlur,\r\n    } = formik;\r\n\r\n    const handleChange = (e) => {\r\n        setFields({...fields, [e.target.name]: e.target.value});\r\n        setValues({...values, [e.target.name]: e.target.value});\r\n    };\r\n\r\n    const handlePreview = (value) => () => {\r\n        setIsPreview(value)\r\n    };\r\n\r\n    const handleCheckboxChange = (valName) => ({target}) => {\r\n        setValues({...values, [valName]: target.checked});\r\n    };\r\n\r\n    const handleClickMenuItem = (valueName) => (newValue, setAnchor) => () => {\r\n        setAnchor(null);\r\n\r\n        setValues({\r\n            ...values,\r\n            adsParams: {\r\n                ...values.adsParams,\r\n                [valueName]: newValue\r\n            }\r\n        });\r\n\r\n        // Reset sub props in values\r\n        Object.keys(newValue).map(key => {\r\n            if (values.adsParams[key]) {\r\n                setValues({\r\n                    ...values,\r\n                    adsParams: {\r\n                        ...values.adsParams,\r\n                        [valueName]: newValue,\r\n                        [key]: {id: null, name: 'Не выбрано', ...newValue[key]}\r\n                    }\r\n                })\r\n            }\r\n        });\r\n    };\r\n\r\n    const resetValues = () => {\r\n        setValues(initFields);\r\n    };\r\n    const valid = createAdvrtSchema.isValidSync(values);\r\n    console.log(fields, valid)\r\n    const classes = useStyles();\r\n    return (\r\n        <MainLayout>\r\n            <Container maxWidth=\"lg\">\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12} md={9}>\r\n                        <FormikProvider value={formik}>\r\n                            <form onSubmit={formik.handleSubmit}>\r\n                                {\r\n                                    isSuccess\r\n                                        ? <SuccessAdvrt/>\r\n                                        : (\r\n                                            <AdvrtForm\r\n                                                isPreview={isPreview}\r\n                                                setIsPreview={setIsPreview}\r\n                                                createAdvrt={createAdvrt}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                values={values}\r\n                                                handleBlur={handleBlur}\r\n                                                handleChange={handleChange}\r\n                                                resetValues={resetValues}\r\n                                                handleClickMenuItem={handleClickMenuItem}\r\n                                                handleCheckboxChange={handleCheckboxChange}\r\n                                            />\r\n                                        )\r\n                                }\r\n                                <div className={classes.nextButtonBlock}>\r\n                                    {\r\n                                        isPreview && (\r\n                                            <ButtonComponent\r\n                                                className={classes.nextButton}\r\n                                                onClick={handlePreview(false)}\r\n                                            >\r\n                                                <Typography>\r\n                                                    Назад\r\n                                                </Typography>\r\n                                            </ButtonComponent>\r\n                                        )\r\n                                    }\r\n                                    <ButtonComponent\r\n                                        type='submit'\r\n                                        className={classes.nextButton}\r\n                                    >\r\n                                        <Typography>\r\n                                            {\r\n                                                isPreview\r\n                                                    ? 'Создать'\r\n                                                    : 'Далее'\r\n                                            }\r\n                                        </Typography>\r\n                                    </ButtonComponent>\r\n                                </div>\r\n                            </form>\r\n                        </FormikProvider>\r\n                    </Grid>\r\n                    <Hidden smDown>\r\n                        <Grid\r\n                            item\r\n                            md={3}\r\n                            container\r\n                            justify=\"flex-end\"\r\n                            className={classes.adBanner}\r\n                        >\r\n                            <Grid item md={12}>\r\n                                <div className=\"right-banner\"/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Hidden>\r\n                </Grid>\r\n            </Container>\r\n        </MainLayout>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}