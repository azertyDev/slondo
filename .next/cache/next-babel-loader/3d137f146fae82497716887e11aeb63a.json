{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from \"@src/api/api\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\nconst initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null,\n  isAuthModalOpen: false\n}; // Async thunk\n\nexport const fetchToken = createAsyncThunk('authReg/fetchTokenByLogin', async ({\n  phone,\n  password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const token = await userAPI.login(phone, password);\n    cookies.set('token', token, {\n      maxAge: 2 * 3600\n    });\n  } catch (e) {\n    return rejectWithValue(e.message);\n  }\n}); // Slice\n\nconst authRegSlice = createSlice({\n  name: 'authReg',\n  initialState,\n  reducers: {\n    setIsAuthAction: (state, action) => {\n      state.isAuth = action.payload;\n    },\n    setIsAuthModalOpen: (state, action) => {\n      state.isAuthModalOpen = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchToken.pending, state => {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchToken.fulfilled, state => {\n      state.isFetch = false;\n      state.error = null;\n      state.isAuth = true;\n    });\n    builder.addCase(fetchToken.rejected, (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  setIsAuthAction,\n  setIsAuthModalOpen\n} = authRegSlice.actions;\nexport const authReducer = authRegSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/authRegSlice.ts"],"names":["createAsyncThunk","createSlice","userAPI","Cookies","cookies","initialState","isFetch","isAuth","error","isAuthModalOpen","fetchToken","phone","password","rejectWithValue","token","login","set","maxAge","e","message","authRegSlice","name","reducers","setIsAuthAction","state","action","payload","setIsAuthModalOpen","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","authReducer","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAAQC,OAAR,QAAsB,cAAtB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAIA,MAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;AAEA,MAAME,YAAqB,GAAG;AAC1BC,EAAAA,OAAO,EAAE,KADiB;AAE1BC,EAAAA,MAAM,EAAE,KAFkB;AAG1BC,EAAAA,KAAK,EAAE,IAHmB;AAI1BC,EAAAA,eAAe,EAAE;AAJS,CAA9B,C,CAOA;;AACA,OAAO,MAAMC,UAAU,GAAGV,gBAAgB,CACtC,2BADsC,EAEtC,OAAO;AAACW,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAP,EAA0B;AAACC,EAAAA;AAAD,CAA1B,KAAgD;AAC5C,MAAI;AACA,UAAMC,KAAK,GAAG,MAAMZ,OAAO,CAACa,KAAR,CAAcJ,KAAd,EAAqBC,QAArB,CAApB;AACAR,IAAAA,OAAO,CAACY,GAAR,CAAY,OAAZ,EAAqBF,KAArB,EAA4B;AAACG,MAAAA,MAAM,EAAE,IAAI;AAAb,KAA5B;AACH,GAHD,CAGE,OAAOC,CAAP,EAAU;AACR,WAAOL,eAAe,CAACK,CAAC,CAACC,OAAH,CAAtB;AACH;AACJ,CATqC,CAAnC,C,CAYP;;AACA,MAAMC,YAAY,GAAGnB,WAAW,CAAC;AAC7BoB,EAAAA,IAAI,EAAE,SADuB;AAE7BhB,EAAAA,YAF6B;AAG7BiB,EAAAA,QAAQ,EAAE;AACNC,IAAAA,eAAe,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChCD,MAAAA,KAAK,CAACjB,MAAN,GAAekB,MAAM,CAACC,OAAtB;AACH,KAHK;AAINC,IAAAA,kBAAkB,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AACnCD,MAAAA,KAAK,CAACf,eAAN,GAAwBgB,MAAM,CAACC,OAA/B;AACH;AANK,GAHmB;AAW7BE,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBpB,UAAU,CAACqB,OAA3B,EAAqCP,KAAD,IAAW;AAC3CA,MAAAA,KAAK,CAAClB,OAAN,GAAgB,IAAhB;AACAkB,MAAAA,KAAK,CAAChB,KAAN,GAAc,IAAd;AACH,KAHD;AAIAqB,IAAAA,OAAO,CAACC,OAAR,CAAgBpB,UAAU,CAACsB,SAA3B,EAAuCR,KAAD,IAAW;AAC7CA,MAAAA,KAAK,CAAClB,OAAN,GAAgB,KAAhB;AACAkB,MAAAA,KAAK,CAAChB,KAAN,GAAc,IAAd;AACAgB,MAAAA,KAAK,CAACjB,MAAN,GAAe,IAAf;AACH,KAJD;AAKAsB,IAAAA,OAAO,CAACC,OAAR,CAAgBpB,UAAU,CAACuB,QAA3B,EAAqC,CAACT,KAAD,EAAQC,MAAR,KAAmB;AACpDD,MAAAA,KAAK,CAAClB,OAAN,GAAgB,KAAhB;AACAkB,MAAAA,KAAK,CAAChB,KAAN,GAAciB,MAAM,CAACC,OAArB;AACH,KAHD;AAIH;AAzB4B,CAAD,CAAhC;AA4BA,OAAO,MAAM;AAACH,EAAAA,eAAD;AAAkBI,EAAAA;AAAlB,IAAwCP,YAAY,CAACc,OAA3D;AACP,OAAO,MAAMC,WAAW,GAAGf,YAAY,CAACgB,OAAjC","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {userAPI} from \"@src/api/api\";\r\nimport Cookies from \"universal-cookie\";\r\nimport {AuthInputs, AuthReg} from \"@root/interfaces/Auth\";\r\n\r\n\r\nconst cookies = new Cookies();\r\n\r\nconst initialState: AuthReg = {\r\n    isFetch: false,\r\n    isAuth: false,\r\n    error: null,\r\n    isAuthModalOpen: false\r\n};\r\n\r\n// Async thunk\r\nexport const fetchToken = createAsyncThunk<never, AuthInputs>(\r\n    'authReg/fetchTokenByLogin',\r\n    async ({phone, password}, {rejectWithValue}) => {\r\n        try {\r\n            const token = await userAPI.login(phone, password);\r\n            cookies.set('token', token, {maxAge: 2 * 3600});\r\n        } catch (e) {\r\n            return rejectWithValue(e.message);\r\n        }\r\n    }\r\n);\r\n\r\n// Slice\r\nconst authRegSlice = createSlice({\r\n    name: 'authReg',\r\n    initialState,\r\n    reducers: {\r\n        setIsAuthAction: (state, action) => {\r\n            state.isAuth = action.payload;\r\n        },\r\n        setIsAuthModalOpen: (state, action) => {\r\n            state.isAuthModalOpen = action.payload;\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchToken.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        })\r\n        builder.addCase(fetchToken.fulfilled, (state) => {\r\n            state.isFetch = false;\r\n            state.error = null;\r\n            state.isAuth = true;\r\n        })\r\n        builder.addCase(fetchToken.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport const {setIsAuthAction, setIsAuthModalOpen} = authRegSlice.actions;\r\nexport const authReducer = authRegSlice.reducer;"]},"metadata":{},"sourceType":"module"}