{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from \"@src/api/api\";\nvar initialState = {\n  isFetch: false,\n  error: null,\n  isLot: false,\n  category: {\n    id: null,\n    name: null,\n    childs: [{\n      id: null,\n      name: \"\",\n      image: {\n        id: null,\n        url: \"\"\n      },\n      icons: {\n        id: null,\n        url: \"\"\n      }\n    }]\n  }\n};\nexport var fetchAd = createAsyncThunk('adOrLot/fetchAd', /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref, _ref2) {\n    var ctgryID, subCtgryID, rejectWithValue;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ctgryID = _ref.ctgryID, subCtgryID = _ref.subCtgryID;\n            rejectWithValue = _ref2.rejectWithValue;\n            _context.prev = 2;\n            _context.next = 5;\n            return userAPI.getAdOrLot(ctgryID, subCtgryID, false);\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](2);\n            return _context.abrupt(\"return\", rejectWithValue(_context.t0.message));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 8]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nexport var fetchLot = createAsyncThunk('adOrLot/fetchLot', /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref4, _ref5) {\n    var ctgryID, subCtgryID, rejectWithValue;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            ctgryID = _ref4.ctgryID, subCtgryID = _ref4.subCtgryID;\n            rejectWithValue = _ref5.rejectWithValue;\n            _context2.prev = 2;\n            _context2.next = 5;\n            return userAPI.getAdOrLot(ctgryID, subCtgryID, true);\n\n          case 5:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](2);\n            return _context2.abrupt(\"return\", rejectWithValue(_context2.t0.message));\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[2, 8]]);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref6.apply(this, arguments);\n  };\n}());\nvar createAdOrLotSlice = createSlice({\n  name: 'adOrLot',\n  initialState: initialState,\n  reducers: {\n    setAdOrLotCtgryAction: function setAdOrLotCtgryAction(state, action) {\n      state.category = action.payload;\n    }\n  },\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchAd.pending, function (state) {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchAd.fulfilled, function (state, action) {\n      state.isFetch = false;\n      state.isLot = false;\n    });\n    builder.addCase(fetchAd.rejected, function (state, action) {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n    builder.addCase(fetchLot.pending, function (state) {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchLot.fulfilled, function (state, action) {\n      state.isFetch = false;\n      state.isLot = true;\n    });\n    builder.addCase(fetchLot.rejected, function (state, action) {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nvar setAdOrLotCtgryAction = createAdOrLotSlice.actions.setAdOrLotCtgryAction;\nexport { setAdOrLotCtgryAction };\nexport var createAdOrLotReducer = createAdOrLotSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/createAdOrLotSlice.ts"],"names":["createAsyncThunk","createSlice","userAPI","initialState","isFetch","error","isLot","category","id","name","childs","image","url","icons","fetchAd","ctgryID","subCtgryID","rejectWithValue","getAdOrLot","message","fetchLot","createAdOrLotSlice","reducers","setAdOrLotCtgryAction","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","createAdOrLotReducer","reducer"],"mappings":"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","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {IAdOrLot} from '@root/interfaces/IAdOrLot';\r\nimport {userAPI} from \"@src/api/api\";\r\nimport {CategoryIDsTypes} from \"@root/types/CategoryTypes\";\r\n\r\n\r\nconst initialState: IAdOrLot = {\r\n    isFetch: false,\r\n    error: null,\r\n    isLot: false,\r\n    category: {\r\n        id: null,\r\n        name: null,\r\n        childs: [{\r\n            id: null,\r\n            name: \"\",\r\n            image: {\r\n                id: null,\r\n                url: \"\"\r\n            },\r\n            icons: {\r\n                id: null,\r\n                url: \"\"\r\n            }\r\n        }]\r\n    }\r\n};\r\n\r\nexport const fetchAd = createAsyncThunk<any, CategoryIDsTypes>(\r\n    'adOrLot/fetchAd',\r\n    async ({ctgryID, subCtgryID}, {rejectWithValue}) => {\r\n        try {\r\n            return await userAPI.getAdOrLot(ctgryID, subCtgryID, false);\r\n        } catch (e) {\r\n            return rejectWithValue(e.message);\r\n        }\r\n    }\r\n);\r\n\r\nexport const fetchLot = createAsyncThunk<any, CategoryIDsTypes>(\r\n    'adOrLot/fetchLot',\r\n    async ({ctgryID, subCtgryID}, {rejectWithValue}) => {\r\n        try {\r\n            return await userAPI.getAdOrLot(ctgryID, subCtgryID, true);\r\n        } catch (e) {\r\n            return rejectWithValue(e.message);\r\n        }\r\n    }\r\n);\r\n\r\nconst createAdOrLotSlice = createSlice({\r\n    name: 'adOrLot',\r\n    initialState,\r\n    reducers: {\r\n        setAdOrLotCtgryAction: (state, action) => {\r\n            state.category = action.payload;\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchAd.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        })\r\n        builder.addCase(fetchAd.fulfilled, (state, action) => {\r\n            state.isFetch = false;\r\n            state.isLot = false;\r\n        })\r\n        builder.addCase(fetchAd.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        })\r\n        builder.addCase(fetchLot.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        })\r\n        builder.addCase(fetchLot.fulfilled, (state, action) => {\r\n            state.isFetch = false;\r\n            state.isLot = true;\r\n        })\r\n        builder.addCase(fetchLot.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport const {setAdOrLotCtgryAction} = createAdOrLotSlice.actions;\r\nexport const createAdOrLotReducer = createAdOrLotSlice.reducer;"]},"metadata":{},"sourceType":"module"}