{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { TOTAL_FILES_LIMIT, TOTAL_FILES_SIZE_LIMIT } from '@src/constants';\nimport React from 'react';\nimport { DragDropContext, resetServerContext } from 'react-beautiful-dnd';\nimport { useStyles } from './useStyles';\nimport { CustomDroppable } from \"@src/components/advertisement/create_advrt/preview_photos/CustomDroppable\";\nexport var PreviewPhotos = function PreviewPhotos(props) {\n  _s();\n\n  resetServerContext();\n  var values = props.values,\n      setValues = props.setValues,\n      isPreview = props.isPreview;\n  var files = values.files;\n\n  var handleOnDragEnd = function handleOnDragEnd(result) {\n    var source = result.source,\n        destination = result.destination; // dropped outside the list\n\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      var _items = reorder(getList(source.droppableId), source.index, destination.index);\n\n      var state = {\n        items: _items\n      };\n\n      if (source.droppableId === 'droppable2') {\n        state = {\n          selected: _items\n        };\n      }\n\n      setState(state);\n    } else {\n      var _result = move(getList(source.droppableId), getList(destination.droppableId), source, destination);\n\n      setState({\n        items: _result.firstRow,\n        selected: _result.secondRow\n      });\n    }\n\n    if (!result.destination) return;\n    var items = Array.from(files);\n\n    var _items$splice = items.splice(result.source.index, 1),\n        _items$splice2 = _slicedToArray(_items$splice, 1),\n        reorderedItem = _items$splice2[0];\n\n    items.splice(result.destination.index, 0, reorderedItem);\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      files: items\n    }));\n  };\n\n  var handleUploadFile = function handleUploadFile(_ref) {\n    var target = _ref.target;\n    var photos = Array.from(target.files);\n\n    if (photos.length + files.length <= TOTAL_FILES_LIMIT) {\n      var totalSize = files.reduce(function (total, item) {\n        return total + item.file.size;\n      }, 0);\n      console.log(photos);\n\n      if (totalSize + photos[0].size < TOTAL_FILES_SIZE_LIMIT) {\n        photos = photos.map(function (file) {\n          return {\n            file: file,\n            url: URL.createObjectURL(file)\n          };\n        });\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          files: [].concat(_toConsumableArray(photos), _toConsumableArray(files))\n        }));\n      }\n    }\n  };\n\n  var removeFile = function removeFile(url) {\n    return function () {\n      files.map(function (item, index) {\n        if (item.url === url) {\n          files.splice(index, 1);\n          setValues(_objectSpread(_objectSpread({}, values), {}, {\n            files: files\n          }));\n        }\n      });\n    };\n  };\n\n  console.log(files);\n  var classes = useStyles();\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    disabled: isPreview,\n    onChange: handleUploadFile,\n    multiple: true,\n    accept: \"image/png,image/jpeg\"\n  }), __jsx(DragDropContext, {\n    enableDefaultSensors: true,\n    onDragEnd: handleOnDragEnd\n  }, __jsx(CustomDroppable, {\n    droppableId: \"firstRow\",\n    files: files.slice(0, 4),\n    isPreview: isPreview,\n    removeFile: removeFile\n  }), __jsx(CustomDroppable, {\n    droppableId: \"secondRow\",\n    files: files.slice(4),\n    isPreview: isPreview,\n    removeFile: removeFile\n  })));\n};\n\n_s(PreviewPhotos, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = PreviewPhotos;\n\nvar _c;\n\n$RefreshReg$(_c, \"PreviewPhotos\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/preview_photos/PreviewPhotos.tsx"],"names":["TOTAL_FILES_LIMIT","TOTAL_FILES_SIZE_LIMIT","React","DragDropContext","resetServerContext","useStyles","CustomDroppable","PreviewPhotos","props","values","setValues","isPreview","files","handleOnDragEnd","result","source","destination","droppableId","items","reorder","getList","index","state","selected","setState","move","firstRow","secondRow","Array","from","splice","reorderedItem","handleUploadFile","target","photos","length","totalSize","reduce","total","item","file","size","console","log","map","url","URL","createObjectURL","removeFile","classes","slice"],"mappings":"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","sourcesContent":["import {TOTAL_FILES_LIMIT, TOTAL_FILES_SIZE_LIMIT} from '@src/constants';\r\nimport React, {Dispatch, FC} from 'react';\r\nimport {DragDropContext, Droppable, Draggable, resetServerContext} from 'react-beautiful-dnd';\r\nimport {ButtonComponent} from \"@src/components/elements/button/Button\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {CreateAdFields} from \"@root/interfaces/Advertisement\";\r\nimport {useStyles} from './useStyles';\r\nimport {CustomDroppable} from \"@src/components/advertisement/create_advrt/preview_photos/CustomDroppable\";\r\n\r\n\r\ninterface IPreviewPhotos {\r\n    values: CreateAdFields,\r\n    setValues: Dispatch<unknown>\r\n    isPreview: boolean\r\n}\r\n\r\nexport const PreviewPhotos: FC<IPreviewPhotos> = (props) => {\r\n    resetServerContext();\r\n\r\n    const {values, setValues, isPreview} = props;\r\n    const {files} = values;\r\n\r\n    const handleOnDragEnd = (result) => {\r\n        const { source, destination } = result;\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items = reorder(\r\n                getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            );\r\n\r\n            let state = { items };\r\n\r\n            if (source.droppableId === 'droppable2') {\r\n                state = { selected: items };\r\n            }\r\n\r\n            setState(state);\r\n        } else {\r\n            const result = move(\r\n                getList(source.droppableId),\r\n                getList(destination.droppableId),\r\n                source,\r\n                destination\r\n            );\r\n\r\n            setState({\r\n                items: result.firstRow,\r\n                selected: result.secondRow\r\n            });\r\n        }\r\n        if (!result.destination) return;\r\n\r\n        const items = Array.from(files);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        setValues({...values, files: items});\r\n    };\r\n\r\n    const handleUploadFile = ({target}) => {\r\n        let photos: any = Array.from(target.files);\r\n        if (photos.length + files.length <= TOTAL_FILES_LIMIT) {\r\n            const totalSize = files.reduce((\r\n                total,\r\n                item: {\r\n                    file: { size: number }\r\n                }) => total + item.file.size,\r\n                0\r\n            );\r\n            console.log(photos)\r\n            if ((totalSize + photos[0].size) < TOTAL_FILES_SIZE_LIMIT) {\r\n                photos = photos.map(file => ({\r\n                    file,\r\n                    url: URL.createObjectURL(file)\r\n                }));\r\n\r\n                setValues({\r\n                    ...values,\r\n                    files: [\r\n                        ...photos,\r\n                        ...files\r\n                    ]\r\n                })\r\n            }\r\n        }\r\n    };\r\n\r\n    const removeFile = (url) => () => {\r\n        files.map((item: { url: string }, index) => {\r\n            if (item.url === url) {\r\n                files.splice(index, 1);\r\n                setValues({...values, files});\r\n            }\r\n        });\r\n    };\r\n    console.log(files)\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n            <input\r\n                type='file'\r\n                disabled={isPreview}\r\n                onChange={handleUploadFile}\r\n                multiple={true}\r\n                accept=\"image/png,image/jpeg\"\r\n            />\r\n            <DragDropContext enableDefaultSensors={true} onDragEnd={handleOnDragEnd}>\r\n                <CustomDroppable\r\n                    droppableId='firstRow'\r\n                    files={files.slice(0, 4)}\r\n                    isPreview={isPreview}\r\n                    removeFile={removeFile}\r\n                />\r\n                <CustomDroppable\r\n                    droppableId='secondRow'\r\n                    files={files.slice(4)}\r\n                    isPreview={isPreview}\r\n                    removeFile={removeFile}\r\n                />\r\n            </DragDropContext>\r\n        </div>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}