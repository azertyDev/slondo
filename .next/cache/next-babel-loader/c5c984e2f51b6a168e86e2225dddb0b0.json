{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from \"@src/api/api\";\nconst initialState = {\n  isFetch: false,\n  error: null,\n  data: []\n};\nexport const fetchLocations = createAsyncThunk('locations/fetchLocations', async ({\n  ctgryID,\n  subCtgryID,\n  lang\n}, {\n  rejectWithValue\n}) => {\n  try {\n    return await userAPI.getAdDataForCreate(ctgryID, subCtgryID, lang);\n  } catch (e) {\n    return rejectWithValue(e.message);\n  }\n});\nconst locationsSlice = createSlice({\n  name: 'locations',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchLocations.pending, state => {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchLocations.fulfilled, (state, action) => {\n      state.isFetch = false;\n      state.error = null;\n      state.data = action.payload;\n    });\n    builder.addCase(fetchLocations.rejected, (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const locationsReducer = locationsSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/locationsSlice.ts"],"names":["createAsyncThunk","createSlice","userAPI","initialState","isFetch","error","data","fetchLocations","ctgryID","subCtgryID","lang","rejectWithValue","getAdDataForCreate","e","message","locationsSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","locationsReducer","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAAQC,OAAR,QAAsB,cAAtB;AAKA,MAAMC,YAAuB,GAAG;AAC5BC,EAAAA,OAAO,EAAE,KADmB;AAE5BC,EAAAA,KAAK,EAAE,IAFqB;AAG5BC,EAAAA,IAAI,EAAE;AAHsB,CAAhC;AAMA,OAAO,MAAMC,cAAc,GAAGP,gBAAgB,CAC1C,0BAD0C,EAE1C,OAAO;AAACQ,EAAAA,OAAD;AAAUC,EAAAA,UAAV;AAAsBC,EAAAA;AAAtB,CAAP,EAAoC;AAACC,EAAAA;AAAD,CAApC,KAA0D;AACtD,MAAI;AACA,WAAO,MAAMT,OAAO,CAACU,kBAAR,CAA2BJ,OAA3B,EAAoCC,UAApC,EAAgDC,IAAhD,CAAb;AACH,GAFD,CAEE,OAAOG,CAAP,EAAU;AACR,WAAOF,eAAe,CAACE,CAAC,CAACC,OAAH,CAAtB;AACH;AACJ,CARyC,CAAvC;AAWP,MAAMC,cAAc,GAAGd,WAAW,CAAC;AAC/Be,EAAAA,IAAI,EAAE,WADyB;AAE/Bb,EAAAA,YAF+B;AAG/Bc,EAAAA,QAAQ,EAAE,EAHqB;AAI/BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBb,cAAc,CAACc,OAA/B,EAAyCC,KAAD,IAAW;AAC/CA,MAAAA,KAAK,CAAClB,OAAN,GAAgB,IAAhB;AACAkB,MAAAA,KAAK,CAACjB,KAAN,GAAc,IAAd;AACH,KAHD;AAIAc,IAAAA,OAAO,CAACC,OAAR,CAAgBb,cAAc,CAACgB,SAA/B,EAA0C,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACzDF,MAAAA,KAAK,CAAClB,OAAN,GAAgB,KAAhB;AACAkB,MAAAA,KAAK,CAACjB,KAAN,GAAc,IAAd;AACAiB,MAAAA,KAAK,CAAChB,IAAN,GAAakB,MAAM,CAACC,OAApB;AACH,KAJD;AAKAN,IAAAA,OAAO,CAACC,OAAR,CAAgBb,cAAc,CAACmB,QAA/B,EAAyC,CAACJ,KAAD,EAAQE,MAAR,KAAmB;AACxDF,MAAAA,KAAK,CAAClB,OAAN,GAAgB,KAAhB;AACAkB,MAAAA,KAAK,CAACjB,KAAN,GAAcmB,MAAM,CAACC,OAArB;AACH,KAHD;AAIH;AAlB8B,CAAD,CAAlC;AAqBA,OAAO,MAAME,gBAAgB,GAAGZ,cAAc,CAACa,OAAxC","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {userAPI} from \"@src/api/api\";\r\nimport {Locations} from '@root/interfaces/Locations';\r\nimport {CategoryIDs} from \"@root/interfaces/Categories\";\r\n\r\n\r\nconst initialState: Locations = {\r\n    isFetch: false,\r\n    error: null,\r\n    data: []\r\n};\r\n\r\nexport const fetchLocations = createAsyncThunk<any, CategoryIDs>(\r\n    'locations/fetchLocations',\r\n    async ({ctgryID, subCtgryID, lang}, {rejectWithValue}) => {\r\n        try {\r\n            return await userAPI.getAdDataForCreate(ctgryID, subCtgryID, lang);\r\n        } catch (e) {\r\n            return rejectWithValue(e.message);\r\n        }\r\n    }\r\n);\r\n\r\nconst locationsSlice = createSlice({\r\n    name: 'locations',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchLocations.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        })\r\n        builder.addCase(fetchLocations.fulfilled, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = null;\r\n            state.data = action.payload;\r\n        })\r\n        builder.addCase(fetchLocations.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport const locationsReducer = locationsSlice.reducer;"]},"metadata":{},"sourceType":"module"}