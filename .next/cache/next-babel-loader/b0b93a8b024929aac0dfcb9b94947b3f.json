{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { isRequired } from \"@root/validation_schemas/createAdvrtSchema\";\nimport { CustomCheckbox } from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { CustomFormikField } from \"@src/components/elements/custom_formik_field/CustomFormikField\";\nimport { useStyles } from \"./useStyles\";\nexport var AdvrtParams = function AdvrtParams(props) {\n  _s();\n\n  var list = props.list,\n      errors = props.errors,\n      onBlur = props.onBlur,\n      values = props.values,\n      touched = props.touched,\n      isPreview = props.isPreview,\n      handleMenuItem = props.handleMenuItem,\n      handleListItem = props.handleListItem,\n      handleParamsInput = props.handleParamsInput,\n      handleParamsCheckbox = props.handleParamsCheckbox; // eslint-disable-next-line prefer-const\n\n  var key = list.key,\n      data = list.data;\n  var adParams = values.adParams;\n\n  if (key === 'condition' && data.length) {\n    // key = 'condition';\n    data = data[0][key];\n  } // const isExcludedRows = key !== 'year' && key !== 'mileage';\n\n\n  var isOptions = key === 'safety' || key === 'multimedia' || key === 'assistant' || key === 'exterior' || key === 'car_climate' || key === 'airbags';\n  var isSpecialRows = key === 'body' || key === 'colors' || isOptions;\n  var fields = null;\n  var classes = useStyles({\n    isPreview: isPreview\n  });\n\n  if (isSpecialRows && data.length) {\n    fields = __jsx(React.Fragment, null, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, __jsx(\"strong\", null, key), isRequired(key) && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\"), errors.adParams && errors.adParams[key] && touched.adParams && touched.adParams[key] && touched.adParams[key].id && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \" \", errors.adParams[key].id)), __jsx(\"div\", {\n      className: \"row-list\"\n    }, data.map(function (item) {\n      return __jsx(\"div\", {\n        key: item.id\n      }, key === 'body' ? __jsx(\"div\", {\n        onClick: !isPreview ? handleListItem(key, item) : null,\n        className: adParams[key] && adParams[key].id === item.id ? classes.selected : ''\n      }, __jsx(Typography, null, item.name)) : __jsx(React.Fragment, null, key === 'colors' ? __jsx(\"div\", {\n        onClick: !isPreview ? handleListItem(key, item) : null,\n        className: adParams[key] && adParams[key].id === item.id ? classes.selected : '',\n        style: {\n          width: '50px',\n          height: '50px',\n          backgroundColor: \"\".concat(item.hex_color_code)\n        }\n      }) : __jsx(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        }\n      }, __jsx(CustomCheckbox, {\n        disabled: isPreview,\n        checked: adParams[key] && adParams[key].some(function (val) {\n          return val.id === item.id;\n        }),\n        onChange: handleParamsCheckbox(key, item)\n      }), __jsx(Typography, null, item.name))));\n    })));\n  } else if (Array.isArray(data)) {\n    if (key !== 'condition') data = [{\n      id: null,\n      name: 'Не выбрано'\n    }].concat(_toConsumableArray(data));\n    fields = __jsx(React.Fragment, null, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, __jsx(\"strong\", null, key, isRequired(key) && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\")), errors.adParams && touched.adParams && errors.adParams[key] && touched.adParams[key] && touched.adParams[key].id && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \" \", errors.adParams[key].id)), __jsx(CustomMenu, {\n      className: errors.adParams && touched.adParams && errors.adParams[key] && touched.adParams[key] ? 'error-border' : '',\n      name: key,\n      onBlur: onBlur,\n      items: data,\n      onClick: handleMenuItem(key),\n      valueName: adParams[key] ? adParams[key].name : data[0].name\n    }));\n  } else {\n    var _adParams$key;\n\n    fields = __jsx(React.Fragment, null, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, key, isRequired(key) && !isPreview && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\"), errors.adParams && errors.adParams[key] && touched.adParams && touched.adParams[key] && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \" \", errors.adParams[key])), isPreview ? __jsx(Typography, null, adParams[key]) : __jsx(CustomFormikField, {\n      name: key,\n      value: (_adParams$key = adParams[key]) !== null && _adParams$key !== void 0 ? _adParams$key : '',\n      onChange: handleParamsInput(key),\n      className: errors.adParams[key] && touched.adParams[key] ? 'error-border' : ''\n    }));\n  }\n\n  fields = fields ? __jsx(Grid, {\n    item: true,\n    container: true,\n    xs: 12,\n    className: classes.gridItem,\n    sm: isSpecialRows && !isPreview || isOptions ? 12 : 6\n  }, fields) : __jsx(React.Fragment, null);\n  return fields;\n};\n\n_s(AdvrtParams, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = AdvrtParams;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdvrtParams\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_params/AdvrtParams.tsx"],"names":["React","Grid","Typography","isRequired","CustomCheckbox","CustomMenu","CustomFormikField","useStyles","AdvrtParams","props","list","errors","onBlur","values","touched","isPreview","handleMenuItem","handleListItem","handleParamsInput","handleParamsCheckbox","key","data","adParams","length","isOptions","isSpecialRows","fields","classes","id","map","item","selected","name","width","height","backgroundColor","hex_color_code","display","alignItems","some","val","Array","isArray","gridItem"],"mappings":"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","sourcesContent":["import React, {FC} from \"react\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {isRequired} from \"@root/validation_schemas/createAdvrtSchema\";\r\nimport {CustomCheckbox} from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {CustomFormikField} from \"@src/components/elements/custom_formik_field/CustomFormikField\";\r\nimport {useStyles} from \"./useStyles\";\r\n\r\n\r\nexport const AdvrtParams: FC<any> = (props) => {\r\n    const {\r\n        list,\r\n        errors,\r\n        onBlur,\r\n        values,\r\n        touched,\r\n        isPreview,\r\n        handleMenuItem,\r\n        handleListItem,\r\n        handleParamsInput,\r\n        handleParamsCheckbox,\r\n    } = props;\r\n\r\n    // eslint-disable-next-line prefer-const\r\n    let {key, data} = list;\r\n    const {adParams} = values;\r\n\r\n    if (key === 'condition' && data.length) {\r\n        // key = 'condition';\r\n        data = data[0][key];\r\n    }\r\n\r\n    // const isExcludedRows = key !== 'year' && key !== 'mileage';\r\n\r\n    const isOptions = key === 'safety'\r\n        || key === 'multimedia'\r\n        || key === 'assistant'\r\n        || key === 'exterior'\r\n        || key === 'car_climate'\r\n        || key === 'airbags';\r\n\r\n    const isSpecialRows = key === 'body' || key === 'colors' || isOptions;\r\n\r\n    let fields = null;\r\n\r\n    const classes = useStyles({isPreview});\r\n    if (isSpecialRows && data.length) {\r\n        fields = <>\r\n            <Typography variant=\"subtitle1\">\r\n                <strong>\r\n                    {key}\r\n                </strong>\r\n                {\r\n                    isRequired(key)\r\n                    && <span className='error-text'>*</span>\r\n                }\r\n                {\r\n                    errors.adParams\r\n                    && errors.adParams[key]\r\n                    && touched.adParams\r\n                    && touched.adParams[key]\r\n                    && touched.adParams[key].id\r\n                    && <span className='error-text'> {errors.adParams[key].id}</span>\r\n                }\r\n            </Typography>\r\n            <div className='row-list'>\r\n                {data.map(item => (\r\n                    <div key={item.id}>\r\n                        {\r\n                            key === 'body'\r\n                                ? <div\r\n                                    onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                    className={\r\n                                        adParams[key]\r\n                                        && adParams[key].id === item.id ? classes.selected : ''\r\n                                    }\r\n                                >\r\n                                    {/*<img src={item.icon.url} alt={item.name}/>*/}\r\n                                    <Typography>{item.name}</Typography>\r\n                                </div>\r\n                                : <>\r\n                                    {key === 'colors'\r\n                                        ? <div\r\n                                            onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                            className={adParams[key] && adParams[key].id === item.id ? classes.selected : ''}\r\n                                            style={{\r\n                                                width: '50px',\r\n                                                height: '50px',\r\n                                                backgroundColor: `${item.hex_color_code}`,\r\n                                            }}\r\n                                        />\r\n                                        : <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                            <CustomCheckbox\r\n                                                disabled={isPreview}\r\n                                                checked={\r\n                                                    adParams[key] && adParams[key].some(val => val.id === item.id)\r\n                                                }\r\n                                                onChange={handleParamsCheckbox(key, item)}\r\n                                            />\r\n                                            <Typography>{item.name}</Typography>\r\n                                        </div>}\r\n                                </>\r\n                        }\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </>;\r\n    } else if (Array.isArray(data)) {\r\n        if (key !== 'condition') data = [{id: null, name: 'Не выбрано'}, ...data];\r\n        fields = <>\r\n            <Typography variant=\"subtitle1\">\r\n                <strong>\r\n                    {key}\r\n                    {\r\n                        isRequired(key)\r\n                        && <span className='error-text'>*</span>\r\n                    }\r\n                </strong>\r\n                {\r\n                    errors.adParams\r\n                    && touched.adParams\r\n                    && errors.adParams[key]\r\n                    && touched.adParams[key]\r\n                    && touched.adParams[key].id\r\n                    && <span className='error-text'> {errors.adParams[key].id}</span>\r\n                }\r\n            </Typography>\r\n            <CustomMenu\r\n                className={\r\n                    errors.adParams\r\n                    && touched.adParams\r\n                    && errors.adParams[key]\r\n                    && touched.adParams[key] ? 'error-border' : ''\r\n                }\r\n                name={key}\r\n                onBlur={onBlur}\r\n                items={data}\r\n                onClick={handleMenuItem(key)}\r\n                valueName={adParams[key] ? adParams[key].name : data[0].name}\r\n            />\r\n        </>;\r\n    } else {\r\n        fields = <>\r\n            <Typography variant=\"subtitle1\">\r\n                {key}\r\n                {\r\n                    isRequired(key)\r\n                    && !isPreview\r\n                    && <span className='error-text'>*</span>\r\n                }\r\n                {\r\n                    errors.adParams\r\n                    && errors.adParams[key]\r\n                    && touched.adParams\r\n                    && touched.adParams[key]\r\n                    && <span className='error-text'> {errors.adParams[key]}</span>\r\n                }\r\n            </Typography>\r\n            {isPreview\r\n                ? <Typography>{adParams[key]}</Typography>\r\n                : <CustomFormikField\r\n                    name={key}\r\n                    value={adParams[key] ?? ''}\r\n                    onChange={handleParamsInput(key)}\r\n                    className={errors.adParams[key] && touched.adParams[key] ? 'error-border' : ''}\r\n                />}\r\n        </>\r\n    }\r\n    fields = fields\r\n        ? <Grid\r\n            item\r\n            container\r\n            xs={12}\r\n            className={classes.gridItem}\r\n            sm={isSpecialRows && !isPreview || isOptions ? 12 : 6}\r\n        >\r\n            {fields}\r\n        </Grid>\r\n        : <></>\r\n\r\n    return fields;\r\n}"]},"metadata":{},"sourceType":"module"}