{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Grid, Hidden, Container, Typography } from '@material-ui/core';\nimport { AdvrtForm } from './advrt_form/AdvrtForm';\nimport { SuccessAdvrt } from './success_advrt/SuccessAdvrt';\nimport { createAdvrtSchema } from \"@root/validation_schemas/createAdvrtSchema\";\nimport { useFormik, FormikProvider } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport { ButtonComponent } from \"@src/components/elements/button/Button\";\nimport { MainLayout } from \"@src/components/MainLayout\"; // styles\n\nimport { useStyles } from './useStyles';\nvar initFields = {\n  adType: {\n    id: null,\n    name: ''\n  },\n  category: {\n    id: null,\n    name: ''\n  },\n  title: '',\n  safe_deal: false,\n  delivery: false,\n  exchange: false,\n  location: null,\n  files: [],\n  description: '',\n  phone: '',\n  adsParams: {}\n};\nexport var CreateAdvrt = function CreateAdvrt() {\n  _s();\n\n  var _useSelector = useSelector(function (store) {\n    return store;\n  }),\n      createAdvrt = _useSelector.createAdvrt;\n\n  var _useState = useState(false),\n      isPreview = _useState[0],\n      setIsPreview = _useState[1];\n\n  var _useState2 = useState(false),\n      isSuccess = _useState2[0],\n      setIsSuccess = _useState2[1];\n\n  var onSubmit = function onSubmit() {\n    isPreview ? console.log('submit') : setIsPreview(true);\n  };\n\n  var formik = useFormik({\n    initialValues: initFields,\n    validationSchema: createAdvrtSchema,\n    onSubmit: onSubmit\n  });\n  var setValues = formik.setValues,\n      values = formik.values,\n      errors = formik.errors,\n      setErrors = formik.setErrors,\n      touched = formik.touched,\n      handleBlur = formik.handleBlur;\n\n  var handlePreview = function handlePreview(value) {\n    return function () {\n      setIsPreview(value);\n    };\n  };\n\n  var handleCheckboxChange = function handleCheckboxChange(valName) {\n    return function (_ref) {\n      var target = _ref.target;\n      setValues(_objectSpread(_objectSpread({}, values), {}, _defineProperty({}, valName, target.checked)));\n    };\n  };\n\n  var handleParamsCheckbox = function handleParamsCheckbox(valueName, value) {\n    return function () {\n      var adsParams = values.adsParams;\n\n      if (adsParams[valueName]) {\n        if (adsParams[valueName].some(function (val) {\n          return val.id === value.id;\n        })) {\n          adsParams[valueName].map(function (val, index) {\n            if (val.id === value.id) {\n              adsParams[valueName].splice(index, 1);\n            }\n          });\n          setValues(_objectSpread(_objectSpread({}, values), {}, {\n            adsParams: _objectSpread({}, adsParams)\n          }));\n        } else {\n          setValues(_objectSpread(_objectSpread({}, values), {}, {\n            adsParams: _objectSpread(_objectSpread({}, adsParams), {}, _defineProperty({}, valueName, [].concat(_toConsumableArray(adsParams[valueName]), [value])))\n          }));\n        }\n      } else {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          adsParams: _objectSpread(_objectSpread({}, adsParams), {}, _defineProperty({}, valueName, [value]))\n        }));\n      }\n    };\n  };\n\n  var handleMenuItem = function handleMenuItem(valueName) {\n    return function (newValue, setAnchor) {\n      return function () {\n        setAnchor(null);\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          adsParams: _objectSpread(_objectSpread({}, values.adsParams), {}, _defineProperty({}, valueName, newValue))\n        })); // Reset sub props in values\n\n        Object.keys(newValue).map(function (key) {\n          if (values.adsParams[key]) {\n            var _objectSpread6;\n\n            setValues(_objectSpread(_objectSpread({}, values), {}, {\n              adsParams: _objectSpread(_objectSpread({}, values.adsParams), {}, (_objectSpread6 = {}, _defineProperty(_objectSpread6, valueName, newValue), _defineProperty(_objectSpread6, key, _objectSpread({\n                id: null,\n                name: 'Не выбрано'\n              }, newValue[key])), _objectSpread6))\n            }));\n          }\n        });\n      };\n    };\n  };\n\n  var handleListItem = function handleListItem(valueName, value) {\n    return function () {\n      if (values.adsParams[valueName].id === value.id) {\n        delete values.adsParams[valueName];\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          adsParams: _objectSpread({}, values.adsParams)\n        }));\n      } else {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          adsParams: _objectSpread(_objectSpread({}, values.adsParams), {}, _defineProperty({}, valueName, value))\n        }));\n      }\n    };\n  };\n\n  useEffect(function () {\n    setErrors({});\n    isPreview && setIsPreview(false);\n    setValues(_objectSpread(_objectSpread({}, initFields), {}, {\n      adType: createAdvrt.adType,\n      category: createAdvrt.data\n    }));\n  }, [createAdvrt.category.id, createAdvrt.data.id, createAdvrt.data.name]);\n  console.log(values);\n  var classes = useStyles();\n  return __jsx(MainLayout, null, __jsx(Container, {\n    maxWidth: \"lg\"\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 9\n  }, __jsx(FormikProvider, {\n    value: formik\n  }, __jsx(\"form\", {\n    onSubmit: formik.handleSubmit\n  }, isSuccess ? __jsx(SuccessAdvrt, null) : __jsx(AdvrtForm, {\n    isPreview: isPreview,\n    setIsPreview: setIsPreview,\n    createAdvrt: createAdvrt,\n    errors: errors,\n    touched: touched,\n    values: values,\n    setValues: setValues,\n    handleBlur: handleBlur,\n    handleMenuItem: handleMenuItem,\n    handleListItem: handleListItem,\n    handleParamsCheckbox: handleParamsCheckbox,\n    handleCheckboxChange: handleCheckboxChange\n  }), __jsx(\"div\", {\n    className: classes.nextButtonBlock\n  }, isPreview && __jsx(ButtonComponent, {\n    className: classes.nextButton,\n    onClick: handlePreview(false)\n  }, __jsx(Typography, null, \"\\u041D\\u0430\\u0437\\u0430\\u0434\")), __jsx(ButtonComponent, {\n    type: \"submit\",\n    className: classes.nextButton\n  }, __jsx(Typography, null, isPreview ? 'Создать' : 'Далее')))))), __jsx(Hidden, {\n    smDown: true\n  }, __jsx(Grid, {\n    item: true,\n    md: 3,\n    container: true,\n    justify: \"flex-end\",\n    className: classes.adBanner\n  }, __jsx(Grid, {\n    item: true,\n    md: 12\n  }, __jsx(\"div\", {\n    className: \"right-banner\"\n  })))))));\n};\n\n_s(CreateAdvrt, \"etNF0+5TVbqJRm4M8lfkSDuwWt4=\", false, function () {\n  return [useSelector, useFormik, useStyles];\n});\n\n_c = CreateAdvrt;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAdvrt\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/CreateAdvrt.tsx"],"names":["React","useEffect","useState","Grid","Hidden","Container","Typography","AdvrtForm","SuccessAdvrt","createAdvrtSchema","useFormik","FormikProvider","useSelector","ButtonComponent","MainLayout","useStyles","initFields","adType","id","name","category","title","safe_deal","delivery","exchange","location","files","description","phone","adsParams","CreateAdvrt","store","createAdvrt","isPreview","setIsPreview","isSuccess","setIsSuccess","onSubmit","console","log","formik","initialValues","validationSchema","setValues","values","errors","setErrors","touched","handleBlur","handlePreview","value","handleCheckboxChange","valName","target","checked","handleParamsCheckbox","valueName","some","val","map","index","splice","handleMenuItem","newValue","setAnchor","Object","keys","key","handleListItem","data","classes","handleSubmit","nextButtonBlock","nextButton","adBanner"],"mappings":"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","sourcesContent":["import React, {FC, useEffect, useState} from 'react';\r\nimport {Grid, Hidden, Container, Typography} from '@material-ui/core';\r\nimport {AdvrtForm} from './advrt_form/AdvrtForm';\r\nimport {SuccessAdvrt} from './success_advrt/SuccessAdvrt';\r\nimport {CreateAdFields} from \"@root/interfaces/Advertisement\";\r\nimport {createAdvrtSchema} from \"@root/validation_schemas/createAdvrtSchema\";\r\nimport {useFormik, FormikProvider} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"@src/redux/rootReducer\";\r\nimport {ButtonComponent} from \"@src/components/elements/button/Button\";\r\nimport {MainLayout} from \"@src/components/MainLayout\";\r\n// styles\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nconst initFields: CreateAdFields = {\r\n    adType: {\r\n        id: null,\r\n        name: ''\r\n    },\r\n    category: {\r\n        id: null,\r\n        name: ''\r\n    },\r\n    title: '',\r\n    safe_deal: false,\r\n    delivery: false,\r\n    exchange: false,\r\n    location: null,\r\n    files: [],\r\n    description: '',\r\n    phone: '',\r\n    adsParams: {}\r\n};\r\n\r\nexport const CreateAdvrt: FC = () => {\r\n    const {createAdvrt} = useSelector((store: RootState) => store);\r\n\r\n    const [isPreview, setIsPreview] = useState(false);\r\n    const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n    const onSubmit = () => {\r\n        isPreview\r\n            ? console.log('submit')\r\n            : setIsPreview(true)\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: initFields,\r\n        validationSchema: createAdvrtSchema,\r\n        onSubmit\r\n    });\r\n\r\n    const {\r\n        setValues,\r\n        values,\r\n        errors,\r\n        setErrors,\r\n        touched,\r\n        handleBlur,\r\n    } = formik;\r\n\r\n    const handlePreview = (value) => () => {\r\n        setIsPreview(value)\r\n    };\r\n\r\n    const handleCheckboxChange = (valName) => ({target}) => {\r\n        setValues({...values, [valName]: target.checked});\r\n    };\r\n\r\n    const handleParamsCheckbox = (valueName, value) => () => {\r\n        const {adsParams} = values;\r\n        if (adsParams[valueName]) {\r\n            if (adsParams[valueName].some(val => val.id === value.id)) {\r\n                adsParams[valueName].map((val, index) => {\r\n                    if (val.id === value.id) {\r\n                        adsParams[valueName].splice(index, 1)\r\n                    }\r\n                });\r\n                setValues({\r\n                        ...values,\r\n                        adsParams: {...adsParams}\r\n                    }\r\n                );\r\n            } else {\r\n                setValues({\r\n                        ...values,\r\n                        adsParams: {\r\n                            ...adsParams,\r\n                            [valueName]: [\r\n                                ...adsParams[valueName],\r\n                                value\r\n                            ]\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        } else {\r\n            setValues({\r\n                    ...values,\r\n                    adsParams: {\r\n                        ...adsParams,\r\n                        [valueName]: [value]\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    const handleMenuItem = (valueName) => (newValue, setAnchor) => () => {\r\n        setAnchor(null);\r\n\r\n        setValues({\r\n            ...values,\r\n            adsParams: {\r\n                ...values.adsParams,\r\n                [valueName]: newValue\r\n            }\r\n        });\r\n\r\n        // Reset sub props in values\r\n        Object.keys(newValue).map(key => {\r\n            if (values.adsParams[key]) {\r\n                setValues({\r\n                    ...values,\r\n                    adsParams: {\r\n                        ...values.adsParams,\r\n                        [valueName]: newValue,\r\n                        [key]: {id: null, name: 'Не выбрано', ...newValue[key]}\r\n                    }\r\n                })\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleListItem = (valueName, value) => () => {\r\n        if (values.adsParams[valueName].id === value.id) {\r\n            delete values.adsParams[valueName];\r\n\r\n            setValues({\r\n                ...values,\r\n                adsParams: {\r\n                    ...values.adsParams\r\n                }\r\n            });\r\n        } else {\r\n            setValues({\r\n                ...values,\r\n                adsParams: {\r\n                    ...values.adsParams,\r\n                    [valueName]: value\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setErrors({});\r\n        isPreview && setIsPreview(false);\r\n        setValues({...initFields, adType: createAdvrt.adType, category: createAdvrt.data});\r\n    }, [createAdvrt.category.id, createAdvrt.data.id, createAdvrt.data.name]);\r\n\r\n    console.log(values)\r\n    const classes = useStyles();\r\n    return (\r\n        <MainLayout>\r\n            <Container maxWidth=\"lg\">\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12} md={9}>\r\n                        <FormikProvider value={formik}>\r\n                            <form onSubmit={formik.handleSubmit}>\r\n                                {\r\n                                    isSuccess\r\n                                        ? <SuccessAdvrt/>\r\n                                        : (\r\n                                            <AdvrtForm\r\n                                                isPreview={isPreview}\r\n                                                setIsPreview={setIsPreview}\r\n                                                createAdvrt={createAdvrt}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                values={values}\r\n                                                setValues={setValues}\r\n                                                handleBlur={handleBlur}\r\n                                                handleMenuItem={handleMenuItem}\r\n                                                handleListItem={handleListItem}\r\n                                                handleParamsCheckbox={handleParamsCheckbox}\r\n                                                handleCheckboxChange={handleCheckboxChange}\r\n                                            />\r\n                                        )\r\n                                }\r\n                                <div className={classes.nextButtonBlock}>\r\n                                    {\r\n                                        isPreview && (\r\n                                            <ButtonComponent\r\n                                                className={classes.nextButton}\r\n                                                onClick={handlePreview(false)}\r\n                                            >\r\n                                                <Typography>\r\n                                                    Назад\r\n                                                </Typography>\r\n                                            </ButtonComponent>\r\n                                        )\r\n                                    }\r\n                                    <ButtonComponent\r\n                                        type='submit'\r\n                                        className={classes.nextButton}\r\n                                    >\r\n                                        <Typography>\r\n                                            {\r\n                                                isPreview\r\n                                                    ? 'Создать'\r\n                                                    : 'Далее'\r\n                                            }\r\n                                        </Typography>\r\n                                    </ButtonComponent>\r\n                                </div>\r\n                            </form>\r\n                        </FormikProvider>\r\n                    </Grid>\r\n                    <Hidden smDown>\r\n                        <Grid\r\n                            item\r\n                            md={3}\r\n                            container\r\n                            justify=\"flex-end\"\r\n                            className={classes.adBanner}\r\n                        >\r\n                            <Grid item md={12}>\r\n                                <div className=\"right-banner\"/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Hidden>\r\n                </Grid>\r\n            </Container>\r\n        </MainLayout>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}