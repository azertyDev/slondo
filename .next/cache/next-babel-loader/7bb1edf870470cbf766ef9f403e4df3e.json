{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as yup from \"yup\";\nexport var requiredFields = {\n  mileage: true,\n  body: true,\n  year: true,\n  car_engine_type: true\n};\nvar requiredMsg = 'Обязательное поле!';\n\nvar test = function test(obj) {\n  return Object.entries(obj).reduce(function (a, _ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        key = _ref2[0];\n\n    if (requiredFields[key]) {\n      a[key] = yup.object({\n        id: yup.number().required(requiredMsg)\n      });\n      return a;\n    }\n  }, {});\n};\n\nvar schema = yup.lazy(function (value) {\n  return yup.object(test(value));\n});\nconsole.log(schema);\nexport var createAdvrtSchema = yup.object().shape({\n  // adType: yup.object({\n  //     id: yup.number().nullable().required(requiredMsg)\n  // }),\n  // category: yup.object({\n  //     id: yup.number().nullable().required(requiredMsg)\n  // }),\n  // title: yup.string().required(requiredMsg),\n  // location: yup.object({\n  //     city_id: yup.number().required(requiredMsg),\n  // }).nullable().required(requiredMsg),\n  // files: yup.array().required(requiredMsg),\n  // description: yup.string().required(requiredMsg),\n  // phone: yup.string().required(requiredMsg),\n  adParams: schema\n});","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/validation_schemas/createAdvrtSchema.ts"],"names":["yup","requiredFields","mileage","body","year","car_engine_type","requiredMsg","test","obj","Object","entries","reduce","a","key","object","id","number","required","schema","lazy","value","console","log","createAdvrtSchema","shape","adParams"],"mappings":";AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAIA,OAAO,IAAMC,cAAc,GAAG;AAC1BC,EAAAA,OAAO,EAAE,IADiB;AAE1BC,EAAAA,IAAI,EAAE,IAFoB;AAG1BC,EAAAA,IAAI,EAAE,IAHoB;AAI1BC,EAAAA,eAAe,EAAE;AAJS,CAAvB;AAOP,IAAMC,WAAW,GAAG,oBAApB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,GAAD,EAAS;AAClB,SAAOC,MAAM,CAACC,OAAP,CAAeF,GAAf,EACFG,MADE,CAEC,UAACC,CAAD,QAAc;AAAA;AAAA,QAATC,GAAS;;AACV,QAAIZ,cAAc,CAACY,GAAD,CAAlB,EAAyB;AACrBD,MAAAA,CAAC,CAACC,GAAD,CAAD,GAASb,GAAG,CAACc,MAAJ,CAAW;AAChBC,QAAAA,EAAE,EAAEf,GAAG,CAACgB,MAAJ,GAAaC,QAAb,CAAsBX,WAAtB;AADY,OAAX,CAAT;AAGA,aAAOM,CAAP;AACH;AACJ,GATF,EASI,EATJ,CAAP;AAWH,CAZD;;AAeA,IAAMM,MAAM,GAAGlB,GAAG,CAACmB,IAAJ,CAAS,UAACC,KAAD;AAAA,SAAWpB,GAAG,CAACc,MAAJ,CAC/BP,IAAI,CAACa,KAAD,CAD2B,CAAX;AAAA,CAAT,CAAf;AAGAC,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AAEA,OAAO,IAAMK,iBAAiB,GAAGvB,GAAG,CAACc,MAAJ,GAAaU,KAAb,CAAmB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,QAAQ,EAAEP;AAdsC,CAAnB,CAA1B","sourcesContent":["import * as yup from \"yup\";\r\nimport {sheets} from \"jss\";\r\n\r\n\r\nexport const requiredFields = {\r\n    mileage: true,\r\n    body: true,\r\n    year: true,\r\n    car_engine_type: true,\r\n};\r\n\r\nconst requiredMsg = 'Обязательное поле!';\r\n\r\nconst test = (obj) => {\r\n    return Object.entries(obj)\r\n        .reduce(\r\n            (a, [key]) => {\r\n                if (requiredFields[key]) {\r\n                    a[key] = yup.object({\r\n                        id: yup.number().required(requiredMsg)\r\n                    });\r\n                    return a;\r\n                }\r\n            }, {}\r\n        )\r\n}\r\n\r\n\r\nconst schema = yup.lazy((value) => yup.object(\r\n    test(value)\r\n));\r\nconsole.log(schema)\r\n\r\nexport const createAdvrtSchema = yup.object().shape({\r\n    // adType: yup.object({\r\n    //     id: yup.number().nullable().required(requiredMsg)\r\n    // }),\r\n    // category: yup.object({\r\n    //     id: yup.number().nullable().required(requiredMsg)\r\n    // }),\r\n    // title: yup.string().required(requiredMsg),\r\n    // location: yup.object({\r\n    //     city_id: yup.number().required(requiredMsg),\r\n    // }).nullable().required(requiredMsg),\r\n    // files: yup.array().required(requiredMsg),\r\n    // description: yup.string().required(requiredMsg),\r\n    // phone: yup.string().required(requiredMsg),\r\n    adParams: schema\r\n});"]},"metadata":{},"sourceType":"module"}