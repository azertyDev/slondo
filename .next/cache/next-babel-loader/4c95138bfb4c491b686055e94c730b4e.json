{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from \"@src/api/api\";\nvar initialState = {\n  isFetch: false,\n  error: null,\n  data: []\n};\nexport var fetchAdDataForCreate = createAsyncThunk('createAdvrt/fetchAdDataForCreate', /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref, _ref2) {\n    var ctgryID, subCtgryID, lang, rejectWithValue;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ctgryID = _ref.ctgryID, subCtgryID = _ref.subCtgryID, lang = _ref.lang;\n            rejectWithValue = _ref2.rejectWithValue;\n            _context.prev = 2;\n            _context.next = 5;\n            return userAPI.getAdDataForCreate(ctgryID, subCtgryID, lang);\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](2);\n            return _context.abrupt(\"return\", rejectWithValue(_context.t0.message));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 8]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref3.apply(this, arguments);\n  };\n}());\nvar createAdvrtSlice = createSlice({\n  name: 'createAdvrt',\n  initialState: initialState,\n  reducers: {\n    adTypeAction: function adTypeAction(state, payload) {},\n    resetCreateAdvrtDataAction: function resetCreateAdvrtDataAction(state) {\n      state.data = [];\n    }\n  },\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchAdDataForCreate.pending, function (state) {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchAdDataForCreate.fulfilled, function (state, action) {\n      state.isFetch = false;\n      state.data = action.payload;\n    });\n    builder.addCase(fetchAdDataForCreate.rejected, function (state, action) {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nvar resetCreateAdvrtDataAction = createAdvrtSlice.actions.resetCreateAdvrtDataAction;\nexport { resetCreateAdvrtDataAction };\nexport var createAdvrtReducer = createAdvrtSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/createAdvrtSlice.ts"],"names":["createAsyncThunk","createSlice","userAPI","initialState","isFetch","error","data","fetchAdDataForCreate","ctgryID","subCtgryID","lang","rejectWithValue","getAdDataForCreate","message","createAdvrtSlice","name","reducers","adTypeAction","state","payload","resetCreateAdvrtDataAction","extraReducers","builder","addCase","pending","fulfilled","action","rejected","actions","createAdvrtReducer","reducer"],"mappings":";;AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAAQC,OAAR,QAAsB,cAAtB;AAKA,IAAMC,YAA2B,GAAG;AAChCC,EAAAA,OAAO,EAAE,KADuB;AAEhCC,EAAAA,KAAK,EAAE,IAFyB;AAGhCC,EAAAA,IAAI,EAAE;AAH0B,CAApC;AAMA,OAAO,IAAMC,oBAAoB,GAAGP,gBAAgB,CAChD,kCADgD;AAAA,uEAEhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQQ,YAAAA,OAAR,QAAQA,OAAR,EAAiBC,UAAjB,QAAiBA,UAAjB,EAA6BC,IAA7B,QAA6BA,IAA7B;AAAqCC,YAAAA,eAArC,SAAqCA,eAArC;AAAA;AAAA;AAAA,mBAEqBT,OAAO,CAACU,kBAAR,CAA2BJ,OAA3B,EAAoCC,UAApC,EAAgDC,IAAhD,CAFrB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAIeC,eAAe,CAAC,YAAEE,OAAH,CAJ9B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFgD;;AAAA;AAAA;AAAA;AAAA,IAA7C;AAWP,IAAMC,gBAAgB,GAAGb,WAAW,CAAC;AACjCc,EAAAA,IAAI,EAAE,aAD2B;AAEjCZ,EAAAA,YAAY,EAAZA,YAFiC;AAGjCa,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,EAAE,sBAACC,KAAD,EAAQC,OAAR,EAAoB,CAEjC,CAHK;AAINC,IAAAA,0BAA0B,EAAE,oCAACF,KAAD,EAAW;AACnCA,MAAAA,KAAK,CAACZ,IAAN,GAAa,EAAb;AACH;AANK,GAHuB;AAWjCe,EAAAA,aAAa,EAAE,uBAACC,OAAD,EAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBhB,oBAAoB,CAACiB,OAArC,EAA8C,UAACN,KAAD,EAAW;AACrDA,MAAAA,KAAK,CAACd,OAAN,GAAgB,IAAhB;AACAc,MAAAA,KAAK,CAACb,KAAN,GAAc,IAAd;AACH,KAHD;AAIAiB,IAAAA,OAAO,CAACC,OAAR,CAAgBhB,oBAAoB,CAACkB,SAArC,EAAgD,UAACP,KAAD,EAAQQ,MAAR,EAAmB;AAC/DR,MAAAA,KAAK,CAACd,OAAN,GAAgB,KAAhB;AACAc,MAAAA,KAAK,CAACZ,IAAN,GAAaoB,MAAM,CAACP,OAApB;AACH,KAHD;AAIAG,IAAAA,OAAO,CAACC,OAAR,CAAgBhB,oBAAoB,CAACoB,QAArC,EAA+C,UAACT,KAAD,EAAQQ,MAAR,EAAmB;AAC9DR,MAAAA,KAAK,CAACd,OAAN,GAAgB,KAAhB;AACAc,MAAAA,KAAK,CAACb,KAAN,GAAcqB,MAAM,CAACP,OAArB;AACH,KAHD;AAIH;AAxBgC,CAAD,CAApC;IA2BcC,0B,GAA8BN,gBAAgB,CAACc,O,CAA/CR,0B;;AACd,OAAO,IAAMS,kBAAkB,GAAGf,gBAAgB,CAACgB,OAA5C","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {userAPI} from \"@src/api/api\";\r\nimport {CreateAdState} from '@root/interfaces/Advertisement';\r\nimport {CategoryIDs} from \"@root/interfaces/Categories\";\r\n\r\n\r\nconst initialState: CreateAdState = {\r\n    isFetch: false,\r\n    error: null,\r\n    data: []\r\n};\r\n\r\nexport const fetchAdDataForCreate = createAsyncThunk<any, CategoryIDs>(\r\n    'createAdvrt/fetchAdDataForCreate',\r\n    async ({ctgryID, subCtgryID, lang}, {rejectWithValue}) => {\r\n        try {\r\n            return await userAPI.getAdDataForCreate(ctgryID, subCtgryID, lang);\r\n        } catch (e) {\r\n            return rejectWithValue(e.message);\r\n        }\r\n    }\r\n);\r\n\r\nconst createAdvrtSlice = createSlice({\r\n    name: 'createAdvrt',\r\n    initialState,\r\n    reducers: {\r\n        adTypeAction: (state, payload) => {\r\n\r\n        },\r\n        resetCreateAdvrtDataAction: (state) => {\r\n            state.data = [];\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchAdDataForCreate.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        })\r\n        builder.addCase(fetchAdDataForCreate.fulfilled, (state, action) => {\r\n            state.isFetch = false;\r\n            state.data = action.payload;\r\n        })\r\n        builder.addCase(fetchAdDataForCreate.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport const {resetCreateAdvrtDataAction} = createAdvrtSlice.actions;\r\nexport const createAdvrtReducer = createAdvrtSlice.reducer;"]},"metadata":{},"sourceType":"module"}