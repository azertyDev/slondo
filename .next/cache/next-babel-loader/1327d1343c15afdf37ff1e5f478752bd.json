{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { DragDropContext, resetServerContext } from 'react-beautiful-dnd';\nimport { TOTAL_FILES_SIZE_LIMIT } from '@src/constants';\nimport { CustomDroppable } from \"../preview_photos/CustomDroppable\";\nexport var PreviewPhotos = function PreviewPhotos(props) {\n  resetServerContext();\n  var values = props.values,\n      setValues = props.setValues,\n      isPreview = props.isPreview;\n  var files = values.files;\n\n  var handleOnDragEnd = function handleOnDragEnd(_ref) {\n    var destination = _ref.destination,\n        source = _ref.source;\n    if (!destination) return;\n    var items = files;\n\n    var _items$splice = items.splice(source.index, 1),\n        _items$splice2 = _slicedToArray(_items$splice, 1),\n        reorderedItem = _items$splice2[0];\n\n    items.splice(destination.index, 0, reorderedItem);\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      files: items\n    }));\n  };\n\n  var handleUploadFile = function handleUploadFile(_ref2) {\n    var target = _ref2.target;\n    var photos = Array.from(target.files);\n    var totalSize = files.reduce(function (total, item) {\n      return total + item.file.size;\n    }, 0);\n    console.log(photos[0]);\n\n    if (totalSize + photos[0].size < TOTAL_FILES_SIZE_LIMIT) {\n      files.forEach(function (_, index) {\n        if (photos[index]) {\n          files.splice(index, 1, {\n            file: photos[index],\n            url: URL.createObjectURL(photos[index])\n          });\n        }\n      });\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        files: files\n      }));\n    }\n  };\n\n  var removeFile = function removeFile(url) {\n    return function () {\n      files.map(function (item, index) {\n        if (item.url === url) {\n          files.splice(index, 1);\n          setValues(_objectSpread(_objectSpread({}, values), {}, {\n            files: files\n          }));\n        }\n      });\n    };\n  };\n\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    disabled: isPreview,\n    onChange: handleUploadFile,\n    multiple: true,\n    accept: \"image/png,image/jpeg\"\n  }), __jsx(DragDropContext, {\n    enableDefaultSensors: true,\n    onDragEnd: handleOnDragEnd\n  }, __jsx(CustomDroppable, {\n    droppableId: \"firstRow\",\n    files: files.slice(0, 4),\n    isPreview: isPreview,\n    removeFile: removeFile\n  }), __jsx(CustomDroppable, {\n    droppableId: \"secondRow\",\n    files: files.slice(4),\n    isPreview: isPreview,\n    removeFile: removeFile\n  })));\n};\n_c = PreviewPhotos;\n\nvar _c;\n\n$RefreshReg$(_c, \"PreviewPhotos\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/preview_photos/PreviewPhotos.tsx"],"names":["React","DragDropContext","resetServerContext","TOTAL_FILES_SIZE_LIMIT","CustomDroppable","PreviewPhotos","props","values","setValues","isPreview","files","handleOnDragEnd","destination","source","items","splice","index","reorderedItem","handleUploadFile","target","photos","Array","from","totalSize","reduce","total","item","file","size","console","log","forEach","_","url","URL","createObjectURL","removeFile","map","slice"],"mappings":"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","sourcesContent":["import React, {Dispatch, FC} from 'react';\r\nimport {DragDropContext, resetServerContext, DropResult} from 'react-beautiful-dnd';\r\nimport {TOTAL_FILES_LIMIT, TOTAL_FILES_SIZE_LIMIT} from '@src/constants';\r\nimport {CreateAdFields, FileType} from \"@root/interfaces/Advertisement\";\r\nimport {CustomDroppable} from \"../preview_photos/CustomDroppable\";\r\n\r\n\r\ninterface IPreviewPhotos {\r\n    values: CreateAdFields,\r\n    setValues: Dispatch<unknown>\r\n    isPreview: boolean\r\n}\r\n\r\nexport const PreviewPhotos: FC<IPreviewPhotos> = (props) => {\r\n    resetServerContext();\r\n\r\n    const {values, setValues, isPreview} = props;\r\n    const {files} = values;\r\n\r\n    const handleOnDragEnd = ({destination, source}: DropResult): void => {\r\n        if (!destination) return;\r\n\r\n        const items = files;\r\n        const [reorderedItem] = items.splice(source.index, 1);\r\n        items.splice(destination.index, 0, reorderedItem);\r\n\r\n        setValues({...values, files: items});\r\n    };\r\n\r\n    const handleUploadFile = ({target}) => {\r\n        const photos: any = Array.from(target.files);\r\n\r\n        const totalSize = files.reduce(\r\n            (total, item: { file: any }) => total + item.file.size,\r\n            0\r\n        );\r\n        console.log(photos[0])\r\n        if ((totalSize + photos[0].size) < TOTAL_FILES_SIZE_LIMIT) {\r\n            files.forEach((_, index) => {\r\n                if (photos[index]) {\r\n                    files.splice(\r\n                        index,\r\n                        1,\r\n                        {\r\n                            file: photos[index],\r\n                            url: URL.createObjectURL(photos[index])\r\n                        }\r\n                    );\r\n                }\r\n            });\r\n\r\n\r\n            setValues({\r\n                ...values,\r\n                files\r\n            })\r\n        }\r\n    };\r\n\r\n    const removeFile = (url) => () => {\r\n        files.map((item: FileType, index) => {\r\n            if (item.url === url) {\r\n                files.splice(index, 1);\r\n                setValues({...values, files});\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                type='file'\r\n                disabled={isPreview}\r\n                onChange={handleUploadFile}\r\n                multiple={true}\r\n                accept=\"image/png,image/jpeg\"\r\n            />\r\n            <DragDropContext enableDefaultSensors={true} onDragEnd={handleOnDragEnd}>\r\n                <CustomDroppable\r\n                    droppableId='firstRow'\r\n                    files={files.slice(0, 4)}\r\n                    isPreview={isPreview}\r\n                    removeFile={removeFile}\r\n                />\r\n                <CustomDroppable\r\n                    droppableId='secondRow'\r\n                    files={files.slice(4)}\r\n                    isPreview={isPreview}\r\n                    removeFile={removeFile}\r\n                />\r\n            </DragDropContext>\r\n        </div>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}