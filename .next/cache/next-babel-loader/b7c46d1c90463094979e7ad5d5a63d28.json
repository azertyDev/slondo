{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { AncmntsTabs } from './AncmntsTabs';\nimport { ITEMS_PER_PAGE } from '@src/constants';\nimport { userAPI } from '@src/api/api';\nimport { i18n } from '@root/i18n';\nimport { initCards } from '../ancmnts_slider/AncmntsSliderContainer';\nimport { setErrorMsgAction } from \"@src/redux/slices/errorSlice\";\nimport { useDispatch } from \"react-redux\";\nconst initCardData = {\n  isFetch: false,\n  isShowMoreFetch: false,\n  error: null,\n  data: {\n    cards: initCards,\n    total: null\n  }\n};\nexport const AncmntsTabsContainer = props => {\n  const dispatch = useDispatch();\n  const lang = i18n.language;\n  const {\n    0: tabValue,\n    1: setTabValue\n  } = useState(0);\n  const {\n    0: ancmntCurrentPage,\n    1: setAncmntCurrentPage\n  } = useState(1);\n  const {\n    0: auctionCurrentPage,\n    1: setAuctionCurrentPage\n  } = useState(1);\n  const {\n    0: ancmntCardData,\n    1: setAncmntCardData\n  } = useState(initCardData);\n  const {\n    0: auctionCardData,\n    1: setAuctionCardData\n  } = useState(initCardData);\n\n  const setCardData = async (state, setState, currentPage, type, isShowMore = false) => {\n    try {\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        isFetch: !isShowMore,\n        isShowMoreFetch: true\n      }));\n      const newData = await userAPI.getCards(ITEMS_PER_PAGE, currentPage, type, lang);\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        isFetch: false,\n        isShowMoreFetch: false,\n        data: {\n          cards: isShowMore ? [...state.data.cards, ...newData.data] : newData.data,\n          total: newData.total\n        }\n      }));\n    } catch (e) {\n      dispatch(setErrorMsgAction(e.message));\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        error: e.message\n      }));\n    }\n  };\n\n  const handleTabChange = (_, newValue) => {\n    setTabValue(newValue);\n  };\n\n  const handleShowMore = () => {\n    if (tabValue === 0) {\n      const nextAncmntPage = ancmntCurrentPage + 1;\n      setAncmntCurrentPage(nextAncmntPage);\n      setCardData(ancmntCardData, setAncmntCardData, nextAncmntPage, 'ad', true);\n    } else {\n      const nextAuctionPage = auctionCurrentPage + 1;\n      setAuctionCurrentPage(nextAuctionPage);\n      setCardData(auctionCardData, setAuctionCardData, nextAuctionPage, 'lot', true);\n    }\n  };\n\n  useEffect(() => {\n    ancmntCurrentPage !== 1 && setAncmntCurrentPage(1);\n    auctionCurrentPage !== 1 && setAuctionCurrentPage(1);\n    setCardData(ancmntCardData, setAncmntCardData, 1, 'ad');\n    setCardData(auctionCardData, setAuctionCardData, 1, 'lot');\n  }, [lang]);\n  return __jsx(AncmntsTabs, {\n    t: props.t,\n    tabValue: tabValue,\n    ancmntCardData: ancmntCardData,\n    auctionCardData: auctionCardData,\n    handleTabChange: handleTabChange,\n    handleShowMore: handleShowMore\n  });\n};","map":null,"metadata":{},"sourceType":"module"}