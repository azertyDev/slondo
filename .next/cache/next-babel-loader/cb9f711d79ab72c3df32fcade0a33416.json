{"ast":null,"code":"import { rootReducer } from \"./reducers/rootReducer\";\nimport { configureStore } from '@reduxjs/toolkit'; // create a makeStore function\n\nvar makeStore = function makeStore() {\n  return configureStore({\n    reducer: rootReducer,\n    devTools: true\n  });\n}; // export an assembled wrapper\n\n\nexport default makeStore;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/store.ts"],"names":["rootReducer","configureStore","makeStore","reducer","devTools"],"mappings":"AACA,SAAQA,WAAR,QAA0B,wBAA1B;AACA,SAAQC,cAAR,QAA6B,kBAA7B,C,CAGA;;AACA,IAAMC,SAAoB,GAAG,SAAvBA,SAAuB,GAAM;AAC/B,SAAOD,cAAc,CAAC;AAClBE,IAAAA,OAAO,EAAEH,WADS;AAElBI,IAAAA,QAAQ;AAFU,GAAD,CAArB;AAIH,CALD,C,CAOA;;;AACA,eAAeF,SAAf","sourcesContent":["import {MakeStore} from 'next-redux-wrapper'\r\nimport {rootReducer} from \"./reducers/rootReducer\"\r\nimport {configureStore} from '@reduxjs/toolkit'\r\n\r\n\r\n// create a makeStore function\r\nconst makeStore: MakeStore = () => {\r\n    return configureStore({\r\n        reducer: rootReducer,\r\n        devTools: process.env.NODE_ENV !== 'production',\r\n    });\r\n};\r\n\r\n// export an assembled wrapper\r\nexport default makeStore;"]},"metadata":{},"sourceType":"module"}