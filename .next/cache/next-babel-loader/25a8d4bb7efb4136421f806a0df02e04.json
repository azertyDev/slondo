{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { FormikProvider } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport { AdvrtForm } from './AdvrtForm';\nexport var autoSelectKeys = ['condition', 'area'];\nexport var textFieldKeys = ['area'];\nvar numberRegEx = /^[0-9]*$/;\nexport var AdvrtFormContainer = function AdvrtFormContainer(props) {\n  var createAdvrt = props.createAdvrt,\n      isPreview = props.isPreview,\n      setIsPreview = props.setIsPreview,\n      formik = props.formik,\n      isSuccess = props.isSuccess,\n      handleBackBtn = props.handleBackBtn,\n      handleCreateNew = props.handleCreateNew;\n\n  var _useSelector = useSelector(function (store) {\n    return store;\n  }),\n      locations = _useSelector.locations;\n\n  var values = formik.values,\n      setValues = formik.setValues,\n      errors = formik.errors,\n      touched = formik.touched,\n      setTouched = formik.setTouched,\n      handleBlur = formik.handleBlur,\n      handleSubmit = formik.handleSubmit;\n  var adParams = values.adParams;\n\n  var handleCheckboxChange = function handleCheckboxChange(valName) {\n    return function (_ref) {\n      var target = _ref.target;\n      var isAuctionField = ['auto_renewal', 'display_phone', 'offer_the_price'].some(function (fieldName) {\n        return fieldName === valName;\n      });\n\n      if (isAuctionField) {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          auction: _objectSpread(_objectSpread({}, values.auction), {}, _defineProperty({}, valName, target.checked))\n        }));\n      } else if (valName === 'price_by_now') {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          auction: _objectSpread(_objectSpread({}, values.auction), {}, {\n            price_by_now: {\n              isActive: target.checked,\n              value: values.auction.price_by_now.value\n            }\n          })\n        }));\n      } else {\n        setValues(_objectSpread(_objectSpread({}, values), {}, _defineProperty({}, valName, target.checked)));\n      }\n    };\n  };\n\n  var handleParamsCheckbox = function handleParamsCheckbox(valueName, value) {\n    return function () {\n      if (adParams[valueName]) {\n        if (adParams[valueName].some(function (val) {\n          return val.id === value.id;\n        })) {\n          adParams[valueName].map(function (val, index) {\n            if (val.id === value.id) {\n              adParams[valueName].splice(index, 1);\n            }\n          });\n        } else {\n          adParams = _objectSpread(_objectSpread({}, adParams), {}, _defineProperty({}, valueName, [].concat(_toConsumableArray(adParams[valueName]), [value])));\n        }\n      } else {\n        adParams = _objectSpread(_objectSpread({}, adParams), {}, _defineProperty({}, valueName, [value]));\n      }\n\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        adParams: adParams\n      }));\n    };\n  };\n\n  var handleMenuItem = function handleMenuItem(valueName) {\n    return function (newValue, setAnchor) {\n      return function () {\n        setAnchor(null);\n\n        if (valueName === 'currency') {\n          setValues(_objectSpread(_objectSpread({}, values), {}, _defineProperty({}, valueName, newValue)));\n        } else if (valueName === 'duration') {\n          setValues(_objectSpread(_objectSpread({}, values), {}, {\n            auction: _objectSpread(_objectSpread({}, values.auction), {}, _defineProperty({}, valueName, newValue))\n          }));\n        } else {\n          // Reset sub props in values\n          Object.keys(newValue).map(function (key) {\n            if (adParams[key]) {\n              adParams = _objectSpread(_objectSpread({}, adParams), {}, _defineProperty({}, key, {\n                id: null,\n                name: 'Не выбрано'\n              }));\n            }\n\n            setValues(_objectSpread(_objectSpread({}, values), {}, {\n              adParams: _objectSpread(_objectSpread({}, adParams), {}, _defineProperty({}, valueName, newValue))\n            }));\n          });\n        }\n      };\n    };\n  };\n\n  var handleListItem = function handleListItem(valueName, value) {\n    return function () {\n      if (adParams[valueName] && adParams[valueName].id === value.id) {\n        adParams = _objectSpread(_objectSpread({}, adParams), {}, _defineProperty({}, valueName, {\n          id: null,\n          name: 'Не выбрано'\n        }));\n      } else {\n        adParams = _objectSpread(_objectSpread({}, adParams), {}, _defineProperty({}, valueName, value));\n      }\n\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        adParams: adParams\n      }));\n    };\n  };\n\n  var handleInput = function handleInput(valueName) {\n    return function (_ref2) {\n      var target = _ref2.target;\n\n      if (numberRegEx.test(target.value)) {\n        if (valueName === 'price') {\n          setValues(_objectSpread(_objectSpread({}, values), {}, _defineProperty({}, valueName, target.value)));\n        } else {\n          adParams = _objectSpread(_objectSpread({}, adParams), {}, _defineProperty({}, valueName, target.value));\n          setValues(_objectSpread(_objectSpread({}, values), {}, {\n            adParams: adParams\n          }));\n        }\n      }\n    };\n  };\n\n  var handleAuctionInput = function handleAuctionInput(valName) {\n    return function (_ref3) {\n      var target = _ref3.target;\n\n      if (numberRegEx.test(target.value)) {\n        if (valName === 'price_by_now') {\n          setValues(_objectSpread(_objectSpread({}, values), {}, {\n            auction: _objectSpread(_objectSpread({}, values.auction), {}, _defineProperty({}, valName, {\n              isActive: true,\n              value: target.value\n            }))\n          }));\n        } else {\n          setValues(_objectSpread(_objectSpread({}, values), {}, {\n            auction: _objectSpread(_objectSpread({}, values.auction), {}, _defineProperty({}, valName, target.value))\n          }));\n        }\n      }\n    };\n  };\n\n  var handleSwitch = function handleSwitch(_, value) {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      avalTime: _objectSpread(_objectSpread({}, values.avalTime), {}, {\n        isActive: value\n      })\n    }));\n  };\n\n  var handleWeekDay = function handleWeekDay(value) {\n    return function () {\n      if (values.avalTime.week.some(function (val) {\n        return val.id === value.id;\n      })) {\n        values.avalTime.week.map(function (val, index) {\n          if (val.id === value.id) {\n            values.avalTime.week.splice(index, 1);\n          }\n        });\n        setValues(_objectSpread({}, values));\n      } else {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          avalTime: _objectSpread(_objectSpread({}, values.avalTime), {}, {\n            week: [].concat(_toConsumableArray(values.avalTime.week), [value])\n          })\n        }));\n      }\n    };\n  };\n\n  var handleTime = function handleTime(_ref4) {\n    var target = _ref4.target;\n    var value = target.value;\n    var regEx = /^([0-1]?[0-9]|2[0-3])?:([0-5][0-9]?)?$/;\n    var isValid = regEx.test(value);\n\n    if (isValid) {\n      value = value.replace(/^:(.+)/, function (m) {\n        return \"00\".concat(m);\n      }).replace(/(.+):$/, function (m) {\n        return \"\".concat(m, \"00\");\n      });\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        avalTime: _objectSpread(_objectSpread({}, values.avalTime), {}, _defineProperty({}, target.name, value))\n      }));\n    }\n  };\n\n  console.log(errors);\n  return __jsx(FormikProvider, {\n    value: formik\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(AdvrtForm, {\n    isSuccess: isSuccess,\n    locations: locations,\n    isPreview: isPreview,\n    setIsPreview: setIsPreview,\n    createAdvrt: createAdvrt,\n    errors: errors,\n    touched: touched,\n    setTouched: setTouched,\n    values: values,\n    setValues: setValues,\n    handleBlur: handleBlur,\n    handleTime: handleTime,\n    handleInput: handleInput,\n    handleSwitch: handleSwitch,\n    handleWeekDay: handleWeekDay,\n    handleBackBtn: handleBackBtn,\n    handleListItem: handleListItem,\n    handleMenuItem: handleMenuItem,\n    handleCreateNew: handleCreateNew,\n    handleAuctionInput: handleAuctionInput,\n    handleParamsCheckbox: handleParamsCheckbox,\n    handleCheckboxChange: handleCheckboxChange\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}