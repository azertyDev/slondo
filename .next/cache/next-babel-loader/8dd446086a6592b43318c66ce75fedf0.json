{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Fragment, useEffect } from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { CustomCheckbox } from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\nimport { CustomFormikField } from \"@src/components/elements/custom_formik_field/CustomFormikField\";\nimport { requiredFields } from '@root/validation_schemas/createAdvrtSchema';\nimport { useStyles } from './useStyles';\nexport var AdvrtParamsBlock = function AdvrtParamsBlock(props) {\n  _s();\n\n  var isPreview = props.isPreview,\n      createAdvrt = props.createAdvrt,\n      values = props.values,\n      setValues = props.setValues,\n      errors = props.errors,\n      touched = props.touched,\n      onBlur = props.onBlur,\n      handleMenuItem = props.handleMenuItem,\n      handleListItem = props.handleListItem,\n      handleParamsInput = props.handleParamsInput,\n      handleParamsCheckbox = props.handleParamsCheckbox;\n  var initRequiredFields = {};\n  var subCategory = createAdvrt.subCategory;\n  var adParams = values.adParams;\n  var adParamsLen = Object.keys(adParams).length;\n  var data = isPreview ? adParams : subCategory.data;\n  var classes = useStyles({\n    isPreview: isPreview\n  });\n  var paramsBlock = result();\n  useEffect(function () {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      adParams: _objectSpread(_objectSpread({}, adParams), initRequiredFields)\n    }));\n  }, [adParamsLen]);\n  return __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    className: classes.root\n  }, paramsBlock);\n\n  function result() {\n    return Object.keys(data).map(function (key) {\n      var _adParams$year, _adParams$mileage;\n\n      return __jsx(Fragment, {\n        key: key\n      }, !isPreview && adParams[key] ? __jsx(React.Fragment, null, listGenerator(data[key], key), Object.keys(adParams[key]).map(function (innerKey) {\n        if (Array.isArray(adParams[key][innerKey]) && adParams[key][innerKey].length) {\n          return listGenerator(adParams[key][innerKey], innerKey);\n        }\n      })) : listGenerator(data[key], key), key === 'body' && __jsx(React.Fragment, null, __jsx(Grid, {\n        item: true,\n        container: true,\n        xs: 12,\n        sm: 6,\n        className: classes.gridItem\n      }, __jsx(Typography, {\n        variant: \"subtitle1\"\n      }, __jsx(\"strong\", null, \"year\", requiredFields[key] && __jsx(\"span\", {\n        className: \"error-text\"\n      }, \"*\")), errors.year && touched.year && __jsx(\"span\", {\n        className: \"error-text\"\n      }, \" \", errors.year)), isPreview ? __jsx(Typography, null, adParams.year) : __jsx(CustomFormikField, {\n        className: errors.year && touched.year ? 'error-border' : '',\n        name: \"year\",\n        placeholder: \"\\u0413\\u043E\\u0434 \\u0432\\u044B\\u043F\\u0443\\u0441\\u043A\\u0430\",\n        value: (_adParams$year = adParams.year) !== null && _adParams$year !== void 0 ? _adParams$year : '',\n        onChange: handleParamsInput('year')\n      })), __jsx(Grid, {\n        item: true,\n        container: true,\n        xs: 12,\n        sm: 6,\n        className: classes.gridItem\n      }, __jsx(Typography, {\n        variant: \"subtitle1\"\n      }, __jsx(\"strong\", null, \"mileage\", requiredFields[key] && __jsx(\"span\", {\n        className: \"error-text\"\n      }, \"*\")), errors.mileage && touched.mileage && __jsx(\"span\", {\n        className: \"error-text\"\n      }, \" \", errors.mileage)), isPreview ? __jsx(Typography, null, adParams.mileage) : __jsx(CustomFormikField, {\n        className: errors.mileage && touched.mileage ? 'error-border' : '',\n        name: \"mileage\",\n        placeholder: \"\\u041F\\u0440\\u043E\\u0431\\u0435\\u0433\",\n        value: (_adParams$mileage = adParams.mileage) !== null && _adParams$mileage !== void 0 ? _adParams$mileage : '',\n        onChange: handleParamsInput('mileage')\n      }))));\n    });\n  }\n\n  function listGenerator(data, key) {\n    var fields;\n\n    if (requiredFields[key] !== undefined || key === 'adsParams' && data[0].condition.length) {\n      if (key !== 'adsParams') {\n        initRequiredFields[key] = {\n          id: null,\n          name: 'Не выбрано'\n        };\n      } else {\n        key = 'condition';\n        data = data[0].condition;\n        initRequiredFields[key] = data[0];\n      }\n    }\n\n    var isExcludedRows = key !== 'id' && key !== 'name' && key !== 'adsParams';\n    var isOptions = key === 'safety' || key === 'multimedia' || key === 'assistant' || key === 'exterior';\n    var isSpecialRows = key === 'body' || key === 'colors' || isOptions;\n\n    if (isExcludedRows && data) {\n      if (isSpecialRows && data.length) {\n        fields = __jsx(React.Fragment, null, __jsx(Typography, {\n          variant: \"subtitle1\"\n        }, key, requiredFields[key] && __jsx(\"span\", {\n          className: \"error-text\"\n        }, \"*\")), __jsx(\"div\", {\n          className: \"row-list\"\n        }, data.map(function (item) {\n          return __jsx(\"div\", {\n            key: item.id\n          }, key === 'body' ? __jsx(\"div\", {\n            onClick: !isPreview ? handleListItem(key, item) : null,\n            className: adParams[key] && adParams[key].id === item.id ? classes.selected : ''\n          }, __jsx(\"img\", {\n            src: item.icon.url,\n            alt: item.name\n          }), __jsx(Typography, null, item.name)) : __jsx(React.Fragment, null, key === 'colors' ? __jsx(\"div\", {\n            onClick: !isPreview ? handleListItem(key, item) : null,\n            className: adParams[key] && adParams[key].id === item.id ? classes.selected : '',\n            style: {\n              width: '50px',\n              height: '50px',\n              backgroundColor: \"\".concat(item.hex_color_code)\n            }\n          }) : __jsx(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center'\n            }\n          }, __jsx(CustomCheckbox, {\n            disabled: isPreview,\n            checked: adParams[key] && adParams[key].some(function (val) {\n              return val.id === item.id;\n            }),\n            onChange: handleParamsCheckbox(key, item)\n          }), __jsx(Typography, null, item.name))));\n        })));\n      } else {\n        if (!Array.isArray(data)) {\n          fields = __jsx(React.Fragment, null, __jsx(Typography, {\n            variant: \"subtitle1\"\n          }, key, requiredFields[key] && __jsx(\"span\", {\n            className: \"error-text\"\n          }, \"*\")), key === 'body' ? __jsx(Typography, null, data.name) : key === 'colors' ? __jsx(\"div\", {\n            style: {\n              width: '50px',\n              height: '50px',\n              backgroundColor: \"\".concat(data.hex_color_code)\n            }\n          }) : __jsx(Typography, null, data.name));\n        } else if (data.length) {\n          if (key !== 'condition') data = [{\n            id: null,\n            name: 'Не выбрано'\n          }].concat(_toConsumableArray(data));\n          fields = __jsx(React.Fragment, null, __jsx(Typography, {\n            variant: \"subtitle1\"\n          }, __jsx(\"strong\", null, key, requiredFields[key] && __jsx(\"span\", {\n            className: \"error-text\"\n          }, \"*\"))), __jsx(CustomMenu, {\n            className: errors.year && touched.year ? 'error-border' : '',\n            name: key,\n            onBlur: onBlur,\n            items: data,\n            valueName: adParams[key] ? adParams[key].name : data[0].name,\n            onClick: handleMenuItem(key)\n          }));\n        }\n      }\n\n      return __jsx(Grid, {\n        item: true,\n        container: true,\n        className: classes.gridItem,\n        key: key,\n        xs: 12,\n        sm: isSpecialRows && !isPreview || isOptions ? 12 : 6\n      }, fields);\n    }\n  }\n};\n\n_s(AdvrtParamsBlock, \"OAQf9SHEQQsOOZKjohcuI3tGtQ0=\", false, function () {\n  return [useStyles];\n});\n\n_c = AdvrtParamsBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdvrtParamsBlock\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_params_block/AdvrtParamsBlock.tsx"],"names":["React","Fragment","useEffect","Grid","Typography","CustomMenu","CustomCheckbox","CustomFormikField","requiredFields","useStyles","AdvrtParamsBlock","props","isPreview","createAdvrt","values","setValues","errors","touched","onBlur","handleMenuItem","handleListItem","handleParamsInput","handleParamsCheckbox","initRequiredFields","subCategory","adParams","adParamsLen","Object","keys","length","data","classes","paramsBlock","result","root","map","key","listGenerator","innerKey","Array","isArray","gridItem","year","mileage","fields","undefined","condition","id","name","isExcludedRows","isOptions","isSpecialRows","item","selected","icon","url","width","height","backgroundColor","hex_color_code","display","alignItems","some","val"],"mappings":"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","sourcesContent":["import React, {FC, Fragment, useEffect} from \"react\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {CustomCheckbox} from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\r\nimport {CustomFormikField} from \"@src/components/elements/custom_formik_field/CustomFormikField\";\r\nimport {requiredFields} from '@root/validation_schemas/createAdvrtSchema';\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const AdvrtParamsBlock: FC<any> = (props) => {\r\n    const {\r\n        isPreview,\r\n        createAdvrt,\r\n        values,\r\n        setValues,\r\n        errors,\r\n        touched,\r\n        onBlur,\r\n        handleMenuItem,\r\n        handleListItem,\r\n        handleParamsInput,\r\n        handleParamsCheckbox\r\n    } = props;\r\n\r\n    const initRequiredFields = {};\r\n\r\n    const {subCategory} = createAdvrt;\r\n\r\n    const {adParams} = values;\r\n    const adParamsLen = Object.keys(adParams).length;\r\n\r\n    const data = isPreview ? adParams : subCategory.data;\r\n\r\n    const classes = useStyles({isPreview});\r\n    const paramsBlock = result();\r\n\r\n    useEffect(() => {\r\n        setValues({...values, adParams: {...adParams, ...initRequiredFields}});\r\n    }, [adParamsLen]);\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={1}\r\n            className={classes.root}\r\n        >\r\n            {paramsBlock}\r\n        </Grid>\r\n    )\r\n\r\n    function result() {\r\n        return Object.keys(data).map(key => {\r\n            return (\r\n                <Fragment key={key}>\r\n                    {\r\n                        !isPreview && adParams[key]\r\n                            ? (\r\n                                <>\r\n                                    {listGenerator(data[key], key)}\r\n                                    {\r\n                                        Object.keys(adParams[key]).map(innerKey => {\r\n                                            if (Array.isArray(adParams[key][innerKey]) && adParams[key][innerKey].length) {\r\n                                                return listGenerator(adParams[key][innerKey], innerKey)\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                </>\r\n                            )\r\n                            : listGenerator(data[key], key)\r\n                    }\r\n                    {\r\n                        key === 'body' && (\r\n                            <>\r\n                                <Grid\r\n                                    item\r\n                                    container\r\n                                    xs={12}\r\n                                    sm={6}\r\n                                    className={classes.gridItem}\r\n                                >\r\n                                    <Typography variant=\"subtitle1\">\r\n                                        <strong>\r\n                                            year\r\n                                            {\r\n                                                requiredFields[key]\r\n                                                && <span className='error-text'>*</span>\r\n                                            }\r\n                                        </strong>\r\n                                        {\r\n                                            errors.year\r\n                                            && touched.year\r\n                                            && <span className='error-text'> {errors.year}</span>\r\n                                        }\r\n                                    </Typography>\r\n                                    {\r\n                                        isPreview\r\n                                            ? <Typography>{adParams.year}</Typography>\r\n                                            : <CustomFormikField\r\n                                                className={\r\n                                                    errors.year && touched.year ? 'error-border' : ''\r\n                                                }\r\n                                                name='year'\r\n                                                placeholder='Год выпуска'\r\n                                                value={adParams.year ?? ''}\r\n                                                onChange={handleParamsInput('year')}\r\n                                            />\r\n                                    }\r\n                                </Grid>\r\n                                <Grid\r\n                                    item\r\n                                    container\r\n                                    xs={12}\r\n                                    sm={6}\r\n                                    className={classes.gridItem}\r\n                                >\r\n                                    <Typography variant=\"subtitle1\">\r\n                                        <strong>\r\n                                            mileage\r\n                                            {\r\n                                                requiredFields[key]\r\n                                                && <span className='error-text'>*</span>\r\n                                            }\r\n                                        </strong>\r\n                                        {\r\n                                            errors.mileage && touched.mileage\r\n                                            && <span className='error-text'> {errors.mileage}</span>\r\n                                        }\r\n                                    </Typography>\r\n                                    {\r\n                                        isPreview\r\n                                            ? <Typography>{adParams.mileage}</Typography>\r\n                                            : <CustomFormikField\r\n                                                className={\r\n                                                    errors.mileage && touched.mileage ? 'error-border' : ''\r\n                                                }\r\n                                                name='mileage'\r\n                                                placeholder='Пробег'\r\n                                                value={adParams.mileage ?? ''}\r\n                                                onChange={handleParamsInput('mileage')}\r\n                                            />\r\n                                    }\r\n                                </Grid>\r\n                            </>\r\n                        )\r\n                    }\r\n                </Fragment>\r\n            )\r\n        })\r\n    }\r\n\r\n    function listGenerator(data: any, key: string) {\r\n        let fields;\r\n\r\n        if (\r\n            requiredFields[key] !== undefined\r\n            ||\r\n            (key === 'adsParams' && data[0].condition.length)\r\n        ) {\r\n            if (key !== 'adsParams') {\r\n                initRequiredFields[key] = {id: null, name: 'Не выбрано'};\r\n            } else {\r\n                key = 'condition';\r\n                data = data[0].condition;\r\n                initRequiredFields[key] = data[0];\r\n            }\r\n        }\r\n\r\n        const isExcludedRows = key !== 'id' && key !== 'name' && key !== 'adsParams';\r\n\r\n        const isOptions = key === 'safety'\r\n            || key === 'multimedia'\r\n            || key === 'assistant'\r\n            || key === 'exterior';\r\n\r\n        const isSpecialRows = key === 'body' || key === 'colors' || isOptions;\r\n\r\n        if (isExcludedRows && data) {\r\n            if (isSpecialRows && data.length) {\r\n                fields = (\r\n                    <>\r\n                        <Typography variant=\"subtitle1\">\r\n                            {key}\r\n                            {\r\n                                requiredFields[key]\r\n                                && <span className='error-text'>*</span>\r\n                            }\r\n                        </Typography>\r\n                        <div className='row-list'>\r\n                            {\r\n                                data.map(item => (\r\n                                    <div key={item.id}>\r\n                                        {\r\n                                            key === 'body'\r\n                                                ? <div\r\n                                                    onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                                    className={\r\n                                                        adParams[key] && adParams[key].id === item.id\r\n                                                            ? classes.selected : ''\r\n                                                    }\r\n                                                >\r\n                                                    <img src={item.icon.url} alt={item.name}/>\r\n                                                    <Typography>{item.name}</Typography>\r\n                                                </div>\r\n                                                : <>\r\n                                                    {\r\n                                                        key === 'colors'\r\n                                                            ? <div\r\n                                                                onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                                                className={adParams[key] && adParams[key].id === item.id ? classes.selected : ''}\r\n                                                                style={{\r\n                                                                    width: '50px',\r\n                                                                    height: '50px',\r\n                                                                    backgroundColor: `${item.hex_color_code}`,\r\n                                                                }}\r\n                                                            />\r\n                                                            : <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                                <CustomCheckbox\r\n                                                                    disabled={isPreview}\r\n                                                                    checked={\r\n                                                                        adParams[key]\r\n                                                                        && adParams[key].some(val => val.id === item.id)\r\n                                                                    }\r\n                                                                    onChange={handleParamsCheckbox(key, item)}\r\n                                                                />\r\n                                                                <Typography>{item.name}</Typography>\r\n                                                            </div>\r\n                                                    }\r\n                                                </>\r\n                                        }\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </>\r\n                );\r\n            } else {\r\n                if (!Array.isArray(data)) {\r\n                    fields = (\r\n                        <>\r\n                            <Typography variant=\"subtitle1\">\r\n                                {key}\r\n                                {\r\n                                    requiredFields[key]\r\n                                    && <span className='error-text'>*</span>\r\n                                }\r\n                            </Typography>\r\n                            {\r\n                                key === 'body'\r\n                                    ? <Typography>{data.name}</Typography>\r\n                                    : key === 'colors'\r\n                                    ? <div\r\n                                        style={{\r\n                                            width: '50px',\r\n                                            height: '50px',\r\n                                            backgroundColor: `${data.hex_color_code}`\r\n                                        }}\r\n                                    />\r\n                                    : <Typography>{data.name}</Typography>\r\n                            }\r\n                        </>\r\n                    );\r\n                } else if (data.length) {\r\n                    if (key !== 'condition') data = [{id: null, name: 'Не выбрано'}, ...data];\r\n                    fields = (\r\n                        <>\r\n                            <Typography variant=\"subtitle1\">\r\n                                <strong>\r\n                                    {key}\r\n                                    {\r\n                                        requiredFields[key]\r\n                                        && <span className='error-text'>*</span>\r\n                                    }\r\n                                </strong>\r\n                            </Typography>\r\n                            <CustomMenu\r\n                                className={\r\n                                    errors.year && touched.year ? 'error-border' : ''\r\n                                }\r\n                                name={key}\r\n                                onBlur={onBlur}\r\n                                items={data}\r\n                                valueName={adParams[key] ? adParams[key].name : data[0].name}\r\n                                onClick={handleMenuItem(key)}\r\n                            />\r\n                        </>\r\n                    );\r\n                }\r\n            }\r\n            return (\r\n                <Grid\r\n                    item\r\n                    container\r\n                    className={classes.gridItem}\r\n                    key={key}\r\n                    xs={12}\r\n                    sm={isSpecialRows && !isPreview || isOptions ? 12 : 6}\r\n                >\r\n                    {fields}\r\n                </Grid>\r\n            )\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}