{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var rootReducer = function rootReducer(state, action) {\n  if (action.type === HYDRATE) {\n    var nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n    if (state.count.count) nextState.count.count = state.count.count; // preserve count value on client side navigation\n\n    return nextState;\n  } else {\n    return combinedReducer(state, action);\n  } // combineReducers({\n  //     auth: authReducer,\n  //     selfData: selfDataReducer,\n  // });\n\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/reducers/rootReducer.ts"],"names":["rootReducer","state","action","type","HYDRATE","nextState","payload","count","combinedReducer"],"mappings":";;;;;;AAIA,OAAO,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAC1C,MAAIA,MAAM,CAACC,IAAP,KAAgBC,OAApB,EAA6B;AACzB,QAAMC,SAAS,mCACRJ,KADQ,GAERC,MAAM,CAACI,OAFC,CAAf;;AAIA,QAAIL,KAAK,CAACM,KAAN,CAAYA,KAAhB,EAAuBF,SAAS,CAACE,KAAV,CAAgBA,KAAhB,GAAwBN,KAAK,CAACM,KAAN,CAAYA,KAApC,CALE,CAKwC;;AACjE,WAAOF,SAAP;AACH,GAPD,MAOO;AACH,WAAOG,eAAe,CAACP,KAAD,EAAQC,MAAR,CAAtB;AACH,GAVyC,CAW1C;AACA;AACA;AACA;;AACH,CAfM","sourcesContent":["import {combineReducers} from \"redux\";\r\nimport {authReducer} from \"./authReducer\";\r\nimport {selfDataReducer} from \"./selfDataReducer\";\r\n\r\nexport const rootReducer = (state, action) => {\r\n    if (action.type === HYDRATE) {\r\n        const nextState = {\r\n            ...state, // use previous state\r\n            ...action.payload, // apply delta from hydration\r\n        }\r\n        if (state.count.count) nextState.count.count = state.count.count // preserve count value on client side navigation\r\n        return nextState\r\n    } else {\r\n        return combinedReducer(state, action)\r\n    }\r\n    // combineReducers({\r\n    //     auth: authReducer,\r\n    //     selfData: selfDataReducer,\r\n    // });\r\n}\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>"]},"metadata":{},"sourceType":"module"}