{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from \"@src/api/api\";\nimport Cookies from \"universal-cookie\";\nvar cookies = new Cookies();\nvar initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null\n}; // Async thunk\n\nexport var fetchToken = createAsyncThunk('authReg/fetchTokenByLogin', /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref, _ref2) {\n    var phone, password, rejectWithValue, token;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            phone = _ref.phone, password = _ref.password;\n            rejectWithValue = _ref2.rejectWithValue;\n            _context.prev = 2;\n            _context.next = 5;\n            return userAPI.login(phone, password);\n\n          case 5:\n            token = _context.sent;\n            cookies.set('token', token, {\n              maxAge: 2 * 3600\n            });\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](2);\n            return _context.abrupt(\"return\", rejectWithValue(_context.t0.message));\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 9]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref3.apply(this, arguments);\n  };\n}()); // Slice\n\nvar authRegSlice = createSlice({\n  name: 'authReg',\n  initialState: initialState,\n  reducers: {\n    setIsAuthAction: function setIsAuthAction(state, action) {\n      state.isAuth = action.payload;\n    }\n  },\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchToken.pending, function (state) {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchToken.fulfilled, function (state) {\n      state.isFetch = false;\n      state.isAuth = true;\n    });\n    builder.addCase(fetchToken.rejected, function (state, action) {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nvar setIsAuthAction = authRegSlice.actions.setIsAuthAction;\nexport { setIsAuthAction };\nexport var authReducer = authRegSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/authRegSlice.ts"],"names":["createAsyncThunk","createSlice","userAPI","Cookies","cookies","initialState","isFetch","isAuth","error","fetchToken","phone","password","rejectWithValue","login","token","set","maxAge","message","authRegSlice","name","reducers","setIsAuthAction","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","authReducer","reducer"],"mappings":";;AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAAQC,OAAR,QAAsB,cAAtB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAIA,IAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;AAEA,IAAME,YAAqB,GAAG;AAC1BC,EAAAA,OAAO,EAAE,KADiB;AAE1BC,EAAAA,MAAM,EAAE,KAFkB;AAG1BC,EAAAA,KAAK,EAAE;AAHmB,CAA9B,C,CAMA;;AACA,OAAO,IAAMC,UAAU,GAAGT,gBAAgB,CACtC,2BADsC;AAAA,uEAEtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQU,YAAAA,KAAR,QAAQA,KAAR,EAAeC,QAAf,QAAeA,QAAf;AAA2BC,YAAAA,eAA3B,SAA2BA,eAA3B;AAAA;AAAA;AAAA,mBAE4BV,OAAO,CAACW,KAAR,CAAcH,KAAd,EAAqBC,QAArB,CAF5B;;AAAA;AAEcG,YAAAA,KAFd;AAGQV,YAAAA,OAAO,CAACW,GAAR,CAAY,OAAZ,EAAqBD,KAArB,EAA4B;AAACE,cAAAA,MAAM,EAAE,IAAI;AAAb,aAA5B;AAHR;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAKeJ,eAAe,CAAC,YAAEK,OAAH,CAL9B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFsC;;AAAA;AAAA;AAAA;AAAA,IAAnC,C,CAYP;;AACA,IAAMC,YAAY,GAAGjB,WAAW,CAAC;AAC7BkB,EAAAA,IAAI,EAAE,SADuB;AAE7Bd,EAAAA,YAAY,EAAZA,YAF6B;AAG7Be,EAAAA,QAAQ,EAAE;AACNC,IAAAA,eAAe,EAAE,yBAACC,KAAD,EAAQC,MAAR,EAAmB;AAChCD,MAAAA,KAAK,CAACf,MAAN,GAAegB,MAAM,CAACC,OAAtB;AACH;AAHK,GAHmB;AAQ7BC,EAAAA,aAAa,EAAE,uBAACC,OAAD,EAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBlB,UAAU,CAACmB,OAA3B,EAAoC,UAACN,KAAD,EAAW;AAC3CA,MAAAA,KAAK,CAAChB,OAAN,GAAgB,IAAhB;AACAgB,MAAAA,KAAK,CAACd,KAAN,GAAc,IAAd;AACH,KAHD;AAIAkB,IAAAA,OAAO,CAACC,OAAR,CAAgBlB,UAAU,CAACoB,SAA3B,EAAsC,UAACP,KAAD,EAAW;AAC7CA,MAAAA,KAAK,CAAChB,OAAN,GAAgB,KAAhB;AACAgB,MAAAA,KAAK,CAACf,MAAN,GAAe,IAAf;AACH,KAHD;AAIAmB,IAAAA,OAAO,CAACC,OAAR,CAAgBlB,UAAU,CAACqB,QAA3B,EAAqC,UAACR,KAAD,EAAQC,MAAR,EAAmB;AACpDD,MAAAA,KAAK,CAAChB,OAAN,GAAgB,KAAhB;AACAgB,MAAAA,KAAK,CAACd,KAAN,GAAce,MAAM,CAACC,OAArB;AACH,KAHD;AAIH;AArB4B,CAAD,CAAhC;IAwBcH,e,GAAmBH,YAAY,CAACa,O,CAAhCV,e;;AACd,OAAO,IAAMW,WAAW,GAAGd,YAAY,CAACe,OAAjC","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {userAPI} from \"@src/api/api\";\r\nimport Cookies from \"universal-cookie\";\r\nimport {AuthInputs, AuthReg} from \"@root/interfaces/Auth\";\r\n\r\n\r\nconst cookies = new Cookies();\r\n\r\nconst initialState: AuthReg = {\r\n    isFetch: false,\r\n    isAuth: false,\r\n    error: null\r\n};\r\n\r\n// Async thunk\r\nexport const fetchToken = createAsyncThunk<never, AuthInputs>(\r\n    'authReg/fetchTokenByLogin',\r\n    async ({phone, password}, {rejectWithValue}) => {\r\n        try {\r\n            const token = await userAPI.login(phone, password);\r\n            cookies.set('token', token, {maxAge: 2 * 3600});\r\n        } catch (e) {\r\n            return rejectWithValue(e.message);\r\n        }\r\n    }\r\n);\r\n\r\n// Slice\r\nconst authRegSlice = createSlice({\r\n    name: 'authReg',\r\n    initialState,\r\n    reducers: {\r\n        setIsAuthAction: (state, action) => {\r\n            state.isAuth = action.payload\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchToken.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        })\r\n        builder.addCase(fetchToken.fulfilled, (state) => {\r\n            state.isFetch = false;\r\n            state.isAuth = true;\r\n        })\r\n        builder.addCase(fetchToken.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport const {setIsAuthAction} = authRegSlice.actions;\r\nexport const authReducer = authRegSlice.reducer;"]},"metadata":{},"sourceType":"module"}