{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { TOTAL_FILES_LIMIT, TOTAL_FILES_SIZE_LIMIT } from '@src/constants';\nimport React from 'react';\nimport { DragDropContext, resetServerContext } from 'react-beautiful-dnd';\nimport { useStyles } from './useStyles';\nimport { CustomDroppable } from \"@src/components/advertisement/create_advrt/preview_photos/CustomDroppable\";\nexport const PreviewPhotos = props => {\n  resetServerContext();\n  const {\n    values,\n    setValues,\n    isPreview\n  } = props;\n  const {\n    files\n  } = values;\n\n  const handleOnDragEnd = result => {\n    if (!result.destination) return;\n    const items = Array.from(files);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      files: items\n    }));\n  };\n\n  const handleUploadFile = ({\n    target\n  }) => {\n    let photos = Array.from(target.files);\n\n    if (photos.length + files.length <= TOTAL_FILES_LIMIT) {\n      const totalSize = files.reduce((total, item) => total + item.file.size, 0);\n      console.log(photos);\n\n      if (totalSize + photos[0].size < TOTAL_FILES_SIZE_LIMIT) {\n        photos = photos.map(file => ({\n          file,\n          url: URL.createObjectURL(file)\n        }));\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          files: [...photos, ...files]\n        }));\n      }\n    }\n  };\n\n  const removeFile = url => () => {\n    files.map((item, index) => {\n      if (item.url === url) {\n        files.splice(index, 1);\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          files\n        }));\n      }\n    });\n  };\n\n  console.log(files);\n  const classes = useStyles();\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    disabled: isPreview,\n    onChange: handleUploadFile,\n    multiple: true,\n    accept: \"image/png,image/jpeg\"\n  }), __jsx(DragDropContext, {\n    enableDefaultSensors: true,\n    onDragEnd: handleOnDragEnd\n  }, __jsx(CustomDroppable, {\n    files: files,\n    isPreview: isPreview,\n    removeFile: removeFile\n  })));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/preview_photos/PreviewPhotos.tsx"],"names":["TOTAL_FILES_LIMIT","TOTAL_FILES_SIZE_LIMIT","React","DragDropContext","resetServerContext","useStyles","CustomDroppable","PreviewPhotos","props","values","setValues","isPreview","files","handleOnDragEnd","result","destination","items","Array","from","reorderedItem","splice","source","index","handleUploadFile","target","photos","length","totalSize","reduce","total","item","file","size","console","log","map","url","URL","createObjectURL","removeFile","classes"],"mappings":";;;;;;;;AAAA,SAAQA,iBAAR,EAA2BC,sBAA3B,QAAwD,gBAAxD;AACA,OAAOC,KAAP,MAAkC,OAAlC;AACA,SAAQC,eAAR,EAA+CC,kBAA/C,QAAwE,qBAAxE;AAIA,SAAQC,SAAR,QAAwB,aAAxB;AACA,SAAQC,eAAR,QAA8B,2EAA9B;AASA,OAAO,MAAMC,aAAiC,GAAIC,KAAD,IAAW;AACxDJ,EAAAA,kBAAkB;AAElB,QAAM;AAACK,IAAAA,MAAD;AAASC,IAAAA,SAAT;AAAoBC,IAAAA;AAApB,MAAiCH,KAAvC;AACA,QAAM;AAACI,IAAAA;AAAD,MAAUH,MAAhB;;AAEA,QAAMI,eAAe,GAAIC,MAAD,IAAY;AAChC,QAAI,CAACA,MAAM,CAACC,WAAZ,EAAyB;AAEzB,UAAMC,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAWN,KAAX,CAAd;AACA,UAAM,CAACO,aAAD,IAAkBH,KAAK,CAACI,MAAN,CAAaN,MAAM,CAACO,MAAP,CAAcC,KAA3B,EAAkC,CAAlC,CAAxB;AACAN,IAAAA,KAAK,CAACI,MAAN,CAAaN,MAAM,CAACC,WAAP,CAAmBO,KAAhC,EAAuC,CAAvC,EAA0CH,aAA1C;AAEAT,IAAAA,SAAS,iCAAKD,MAAL;AAAaG,MAAAA,KAAK,EAAEI;AAApB,OAAT;AACH,GARD;;AAUA,QAAMO,gBAAgB,GAAG,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAc;AACnC,QAAIC,MAAW,GAAGR,KAAK,CAACC,IAAN,CAAWM,MAAM,CAACZ,KAAlB,CAAlB;;AACA,QAAIa,MAAM,CAACC,MAAP,GAAgBd,KAAK,CAACc,MAAtB,IAAgC1B,iBAApC,EAAuD;AACnD,YAAM2B,SAAS,GAAGf,KAAK,CAACgB,MAAN,CAAa,CAC3BC,KAD2B,EAE3BC,IAF2B,KAIrBD,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUC,IAJV,EAKd,CALc,CAAlB;AAOAC,MAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;;AACA,UAAKE,SAAS,GAAGF,MAAM,CAAC,CAAD,CAAN,CAAUO,IAAvB,GAA+B/B,sBAAnC,EAA2D;AACvDwB,QAAAA,MAAM,GAAGA,MAAM,CAACU,GAAP,CAAWJ,IAAI,KAAK;AACzBA,UAAAA,IADyB;AAEzBK,UAAAA,GAAG,EAAEC,GAAG,CAACC,eAAJ,CAAoBP,IAApB;AAFoB,SAAL,CAAf,CAAT;AAKArB,QAAAA,SAAS,iCACFD,MADE;AAELG,UAAAA,KAAK,EAAE,CACH,GAAGa,MADA,EAEH,GAAGb,KAFA;AAFF,WAAT;AAOH;AACJ;AACJ,GA1BD;;AA4BA,QAAM2B,UAAU,GAAIH,GAAD,IAAS,MAAM;AAC9BxB,IAAAA,KAAK,CAACuB,GAAN,CAAU,CAACL,IAAD,EAAwBR,KAAxB,KAAkC;AACxC,UAAIQ,IAAI,CAACM,GAAL,KAAaA,GAAjB,EAAsB;AAClBxB,QAAAA,KAAK,CAACQ,MAAN,CAAaE,KAAb,EAAoB,CAApB;AACAZ,QAAAA,SAAS,iCAAKD,MAAL;AAAaG,UAAAA;AAAb,WAAT;AACH;AACJ,KALD;AAMH,GAPD;;AAQAqB,EAAAA,OAAO,CAACC,GAAR,CAAYtB,KAAZ;AACA,QAAM4B,OAAO,GAAGnC,SAAS,EAAzB;AACA,SACI,mBACI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,QAAQ,EAAEM,SAFd;AAGI,IAAA,QAAQ,EAAEY,gBAHd;AAII,IAAA,QAAQ,EAAE,IAJd;AAKI,IAAA,MAAM,EAAC;AALX,IADJ,EAQI,MAAC,eAAD;AAAiB,IAAA,oBAAoB,EAAE,IAAvC;AAA6C,IAAA,SAAS,EAAEV;AAAxD,KACI,MAAC,eAAD;AACI,IAAA,KAAK,EAAED,KADX;AAEI,IAAA,SAAS,EAAED,SAFf;AAGI,IAAA,UAAU,EAAE4B;AAHhB,IADJ,CARJ,CADJ;AAkBH,CAxEM","sourcesContent":["import {TOTAL_FILES_LIMIT, TOTAL_FILES_SIZE_LIMIT} from '@src/constants';\r\nimport React, {Dispatch, FC} from 'react';\r\nimport {DragDropContext, Droppable, Draggable, resetServerContext} from 'react-beautiful-dnd';\r\nimport {ButtonComponent} from \"@src/components/elements/button/Button\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {CreateAdFields} from \"@root/interfaces/Advertisement\";\r\nimport {useStyles} from './useStyles';\r\nimport {CustomDroppable} from \"@src/components/advertisement/create_advrt/preview_photos/CustomDroppable\";\r\n\r\n\r\ninterface IPreviewPhotos {\r\n    values: CreateAdFields,\r\n    setValues: Dispatch<unknown>\r\n    isPreview: boolean\r\n}\r\n\r\nexport const PreviewPhotos: FC<IPreviewPhotos> = (props) => {\r\n    resetServerContext();\r\n\r\n    const {values, setValues, isPreview} = props;\r\n    const {files} = values;\r\n\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n\r\n        const items = Array.from(files);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        setValues({...values, files: items});\r\n    };\r\n\r\n    const handleUploadFile = ({target}) => {\r\n        let photos: any = Array.from(target.files);\r\n        if (photos.length + files.length <= TOTAL_FILES_LIMIT) {\r\n            const totalSize = files.reduce((\r\n                total,\r\n                item: {\r\n                    file: { size: number }\r\n                }) => total + item.file.size,\r\n                0\r\n            );\r\n            console.log(photos)\r\n            if ((totalSize + photos[0].size) < TOTAL_FILES_SIZE_LIMIT) {\r\n                photos = photos.map(file => ({\r\n                    file,\r\n                    url: URL.createObjectURL(file)\r\n                }));\r\n\r\n                setValues({\r\n                    ...values,\r\n                    files: [\r\n                        ...photos,\r\n                        ...files\r\n                    ]\r\n                })\r\n            }\r\n        }\r\n    };\r\n\r\n    const removeFile = (url) => () => {\r\n        files.map((item: { url: string }, index) => {\r\n            if (item.url === url) {\r\n                files.splice(index, 1);\r\n                setValues({...values, files});\r\n            }\r\n        });\r\n    };\r\n    console.log(files)\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n            <input\r\n                type='file'\r\n                disabled={isPreview}\r\n                onChange={handleUploadFile}\r\n                multiple={true}\r\n                accept=\"image/png,image/jpeg\"\r\n            />\r\n            <DragDropContext enableDefaultSensors={true} onDragEnd={handleOnDragEnd}>\r\n                <CustomDroppable\r\n                    files={files}\r\n                    isPreview={isPreview}\r\n                    removeFile={removeFile}\r\n                />\r\n            </DragDropContext>\r\n        </div>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}