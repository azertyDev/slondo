{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { Grid, Hidden, Container, Typography } from '@material-ui/core';\nimport { AdvrtForm } from './advrtForm/AdvrtForm';\nimport { SuccessAdvrt } from './successAdvrt/SuccessAdvrt';\nimport { createAdvrtSchema } from \"@src/validationSchemas\";\nimport { Form, Formik } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport { ButtonComponent } from \"@src/components/elements/button/Button\";\nimport { PreviewAdvrt } from './previewAdvrt/PreviewAdvrt';\nimport { MainLayout } from \"@src/components/MainLayout\"; // styles\n\nimport { useStyles } from './useStyles';\nexport var CreateAdvrt = function CreateAdvrt() {\n  _s();\n\n  var _useSelector = useSelector(function (store) {\n    return store;\n  }),\n      createAdvrt = _useSelector.createAdvrt;\n\n  var _useState = useState(false),\n      isPreview = _useState[0],\n      setIsPreview = _useState[1];\n\n  var _useState2 = useState(false),\n      isSuccess = _useState2[0],\n      setIsSuccess = _useState2[1];\n\n  var handlePreview = function handlePreview(value) {\n    return function () {\n      setIsPreview(value);\n    };\n  };\n\n  var initVals = {\n    adSubCategory: {\n      id: null,\n      name: 'Выберите под категорию'\n    },\n    safeBuy: false,\n    haveDelivery: false,\n    haveExch: false,\n    location: null,\n    photos: [],\n    description: '',\n    phone: ''\n  };\n\n  var submit = function submit() {\n    isPreview ? console.log('submit') : setIsPreview(true);\n  };\n\n  var classes = useStyles();\n  return __jsx(MainLayout, null, __jsx(Container, {\n    maxWidth: \"lg\"\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 9\n  }, __jsx(Formik, {\n    initialValues: initVals,\n    enableReinitialize: true,\n    validationSchema: createAdvrtSchema,\n    onSubmit: submit\n  }, function (_ref) {\n    var errors = _ref.errors,\n        touched = _ref.touched,\n        values = _ref.values,\n        setValues = _ref.setValues,\n        handleBlur = _ref.handleBlur;\n\n    // console.log(values)\n    var handleCheckboxChange = function handleCheckboxChange() {\n      console.log('checkbox');\n    };\n\n    var handleClickMenuItem = function handleClickMenuItem(valueName) {\n      return function (newValue, setAnchor) {\n        return function () {\n          setAnchor(null);\n          setValues(_objectSpread(_objectSpread({}, values), {}, _defineProperty({}, valueName, newValue))); // Reset sub props in values\n\n          Object.keys(newValue).map(function (key) {\n            if (values[key]) {\n              var _objectSpread3;\n\n              setValues(_objectSpread(_objectSpread({}, values), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, valueName, newValue), _defineProperty(_objectSpread3, key, _objectSpread({\n                id: null,\n                name: 'Не выбрано'\n              }, newValue[key])), _objectSpread3)));\n            }\n          });\n        };\n      };\n    };\n\n    return __jsx(Form, null, isSuccess ? __jsx(SuccessAdvrt, null) : isPreview ? __jsx(PreviewAdvrt, null) : __jsx(AdvrtForm, {\n      createAdvrt: createAdvrt,\n      errors: errors,\n      touched: touched,\n      values: values,\n      handleBlur: handleBlur,\n      handleClickMenuItem: handleClickMenuItem,\n      handleCheckboxChange: handleCheckboxChange\n    }), __jsx(\"div\", {\n      className: classes.nextButtonBlock\n    }, isPreview && __jsx(ButtonComponent, {\n      className: classes.nextButton,\n      onClick: handlePreview(false)\n    }, __jsx(Typography, null, \"\\u041D\\u0430\\u0437\\u0430\\u0434\")), __jsx(ButtonComponent, {\n      type: \"submit\",\n      className: classes.nextButton\n    }, __jsx(Typography, null, isPreview ? 'Отпарвить на модерацию' : 'Далее'))));\n  })), __jsx(Hidden, {\n    smDown: true\n  }, __jsx(Grid, {\n    item: true,\n    md: 3,\n    container: true,\n    justify: \"flex-end\",\n    className: classes.adBanner\n  }, __jsx(Grid, {\n    item: true,\n    md: 12\n  }, __jsx(\"div\", {\n    className: \"right-banner\"\n  })))))));\n};\n\n_s(CreateAdvrt, \"ehYJemKIgJ/Iwy3ikAx11h6WbCs=\", false, function () {\n  return [useSelector, useStyles];\n});\n\n_c = CreateAdvrt;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAdvrt\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/CreateAdvrt.tsx"],"names":["React","useState","Grid","Hidden","Container","Typography","AdvrtForm","SuccessAdvrt","createAdvrtSchema","Form","Formik","useSelector","ButtonComponent","PreviewAdvrt","MainLayout","useStyles","CreateAdvrt","store","createAdvrt","isPreview","setIsPreview","isSuccess","setIsSuccess","handlePreview","value","initVals","adSubCategory","id","name","safeBuy","haveDelivery","haveExch","location","photos","description","phone","submit","console","log","classes","errors","touched","values","setValues","handleBlur","handleCheckboxChange","handleClickMenuItem","valueName","newValue","setAnchor","Object","keys","map","key","nextButtonBlock","nextButton","adBanner"],"mappings":"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","sourcesContent":["import React, {FC, useState} from 'react';\r\nimport {Grid, Hidden, Container, Typography} from '@material-ui/core';\r\nimport {AdvrtForm} from './advrtForm/AdvrtForm';\r\nimport {SuccessAdvrt} from './successAdvrt/SuccessAdvrt';\r\nimport {AdvertisementProps} from \"@root/interfaces/Advertisement\";\r\nimport {createAdvrtSchema} from \"@src/validationSchemas\";\r\nimport {Form, Formik} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"@src/redux/rootReducer\";\r\nimport {ButtonComponent} from \"@src/components/elements/button/Button\";\r\nimport {PreviewAdvrt} from './previewAdvrt/PreviewAdvrt';\r\nimport {MainLayout} from \"@src/components/MainLayout\";\r\n// styles\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const CreateAdvrt: FC<AdvertisementProps> = () => {\r\n    const {createAdvrt} = useSelector((store: RootState) => store);\r\n\r\n    const [isPreview, setIsPreview] = useState(false);\r\n    const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n\r\n    const handlePreview = (value) => () => {\r\n        setIsPreview(value)\r\n    };\r\n\r\n    const initVals = {\r\n        adSubCategory: {\r\n            id: null,\r\n            name: 'Выберите под категорию'\r\n        },\r\n        safeBuy: false,\r\n        haveDelivery: false,\r\n        haveExch: false,\r\n        location: null,\r\n        photos: [],\r\n        description: '',\r\n        phone: ''\r\n    };\r\n\r\n    const submit = () => {\r\n        isPreview\r\n            ? console.log('submit')\r\n            : setIsPreview(true)\r\n    };\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <MainLayout>\r\n            <Container maxWidth=\"lg\">\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12} md={9}>\r\n                        <Formik initialValues={initVals} enableReinitialize={true} validationSchema={createAdvrtSchema} onSubmit={submit}>\r\n                            {\r\n                                ({\r\n                                     errors,\r\n                                     touched,\r\n                                     values,\r\n                                     setValues,\r\n                                     handleBlur,\r\n                                 }) => {\r\n                                    // console.log(values)\r\n                                    const handleCheckboxChange = () => {\r\n                                        console.log('checkbox');\r\n                                    };\r\n\r\n                                    const handleClickMenuItem = (valueName) => (newValue, setAnchor) => () => {\r\n                                        setAnchor(null);\r\n\r\n                                        setValues({\r\n                                            ...values,\r\n                                            [valueName]: newValue\r\n                                        });\r\n\r\n                                        // Reset sub props in values\r\n                                        Object.keys(newValue).map(key => {\r\n                                            if (values[key]) {\r\n                                                setValues({\r\n                                                    ...values,\r\n                                                    [valueName]: newValue,\r\n                                                    [key]: {id: null, name: 'Не выбрано', ...newValue[key]}\r\n                                                })\r\n                                            }\r\n                                        });\r\n                                    };\r\n\r\n                                    return (\r\n                                        <Form>\r\n                                            {\r\n                                                isSuccess\r\n                                                    ? <SuccessAdvrt/>\r\n                                                    : (\r\n                                                        isPreview\r\n                                                            ? <PreviewAdvrt/>\r\n                                                            : <AdvrtForm\r\n                                                                createAdvrt={createAdvrt}\r\n                                                                errors={errors}\r\n                                                                touched={touched}\r\n                                                                values={values}\r\n                                                                handleBlur={handleBlur}\r\n                                                                handleClickMenuItem={handleClickMenuItem}\r\n                                                                handleCheckboxChange={handleCheckboxChange}\r\n                                                            />\r\n                                                    )\r\n                                            }\r\n                                            <div className={classes.nextButtonBlock}>\r\n                                                {\r\n                                                    isPreview && (\r\n                                                        <ButtonComponent\r\n                                                            className={classes.nextButton}\r\n                                                            onClick={handlePreview(false)}\r\n                                                        >\r\n                                                            <Typography>\r\n                                                                Назад\r\n                                                            </Typography>\r\n                                                        </ButtonComponent>\r\n                                                    )\r\n                                                }\r\n                                                <ButtonComponent\r\n                                                    type='submit'\r\n                                                    className={classes.nextButton}\r\n                                                >\r\n                                                    <Typography>\r\n                                                        {\r\n                                                            isPreview\r\n                                                                ? 'Отпарвить на модерацию'\r\n                                                                : 'Далее'\r\n                                                        }\r\n                                                    </Typography>\r\n                                                </ButtonComponent>\r\n                                            </div>\r\n                                        </Form>\r\n                                    )\r\n                                }\r\n                            }\r\n                        </Formik>\r\n                    </Grid>\r\n                    <Hidden smDown>\r\n                        <Grid\r\n                            item\r\n                            md={3}\r\n                            container\r\n                            justify=\"flex-end\"\r\n                            className={classes.adBanner}\r\n                        >\r\n                            <Grid item md={12}>\r\n                                <div className=\"right-banner\"/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Hidden>\r\n                </Grid>\r\n            </Container>\r\n        </MainLayout>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}