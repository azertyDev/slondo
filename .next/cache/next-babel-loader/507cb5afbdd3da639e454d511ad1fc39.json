{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { useStyles } from './useStyles';\nexport var AdvrtSettingsBlock = function AdvrtSettingsBlock(props) {\n  _s();\n\n  var isPreview = props.isPreview,\n      createAdvrt = props.createAdvrt,\n      adsParams = props.adsParams,\n      onBlur = props.onBlur,\n      handleMenuItem = props.handleMenuItem,\n      handleListItem = props.handleListItem;\n  var data = isPreview ? adsParams : createAdvrt.data;\n  var classes = useStyles();\n  return __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    className: classes.root\n  }, Object.keys(data).map(function (key) {\n    return __jsx(React.Fragment, null, listGenerator(data[key], key), adsParams[key] && Object.keys(adsParams[key]).map(function (innerKey) {\n      if (Array.isArray(adsParams[key][innerKey]) && adsParams[key][innerKey].length) {\n        return listGenerator(adsParams[key][innerKey], innerKey);\n      }\n    }));\n  }));\n\n  function listGenerator(data, key) {\n    var fields;\n    console.log(data[key]);\n\n    if (key !== 'adsParams' && key !== 'address') {\n      if (Array.isArray(data) && data.length) {\n        if (key === 'body' || key === 'colors') {\n          fields = data.map(function (item) {\n            return __jsx(\"div\", {\n              key: item.id,\n              onClick: handleListItem(key, item)\n            }, key === 'body' ? __jsx(React.Fragment, null, __jsx(\"img\", {\n              src: item.icon.url,\n              alt: item.name\n            }), __jsx(Typography, null, item.name)) : __jsx(\"div\", {\n              style: {\n                width: '50px',\n                height: '50px',\n                backgroundColor: \"\".concat(item.hex_color_code)\n              }\n            }));\n          });\n        } else {\n          data = [{\n            id: null,\n            name: 'Не выбрано'\n          }].concat(_toConsumableArray(data));\n          fields = __jsx(CustomMenu, {\n            valueName: adsParams[key] ? adsParams[key].name : data[0].name,\n            items: data,\n            onBlur: onBlur,\n            onClick: handleMenuItem(key)\n          });\n        }\n      } else if (isPreview && data[key]) {\n        fields = data[key].map(function (k) {\n          return __jsx(Typography, {\n            key: k.id\n          }, k.name);\n        });\n      }\n\n      return __jsx(Grid, {\n        item: true,\n        container: true,\n        key: key,\n        xs: 12,\n        sm: key === 'body' || key === 'colors' ? 12 : 6\n      }, __jsx(Typography, {\n        style: {\n          width: '100%'\n        },\n        variant: \"subtitle1\"\n      }, __jsx(\"strong\", null, key)), fields);\n    }\n  }\n};\n\n_s(AdvrtSettingsBlock, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = AdvrtSettingsBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdvrtSettingsBlock\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_settings_block/AdvrtSettingsBlock.tsx"],"names":["React","Grid","Typography","CustomMenu","useStyles","AdvrtSettingsBlock","props","isPreview","createAdvrt","adsParams","onBlur","handleMenuItem","handleListItem","data","classes","root","Object","keys","map","key","listGenerator","innerKey","Array","isArray","length","fields","console","log","item","id","icon","url","name","width","height","backgroundColor","hex_color_code","k"],"mappings":"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","sourcesContent":["import React, {FC} from \"react\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {ItemsType} from \"@root/interfaces/CustomMenuProps\";\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const AdvrtSettingsBlock: FC<any> = (props) => {\r\n    const {\r\n        isPreview,\r\n        createAdvrt,\r\n        adsParams,\r\n        onBlur,\r\n        handleMenuItem,\r\n        handleListItem\r\n    } = props;\r\n\r\n    const data = isPreview ? adsParams : createAdvrt.data;\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={1}\r\n            className={classes.root}\r\n        >\r\n            {\r\n                Object.keys(data).map(key => {\r\n                    return (\r\n                        <>\r\n                            {listGenerator(data[key], key)}\r\n                            {\r\n                                adsParams[key] && Object.keys(adsParams[key]).map(innerKey => {\r\n                                    if (Array.isArray(adsParams[key][innerKey]) && adsParams[key][innerKey].length) {\r\n                                        return listGenerator(adsParams[key][innerKey], innerKey)\r\n                                    }\r\n                                })\r\n                            }\r\n                        </>\r\n                    );\r\n                })\r\n            }\r\n        </Grid>\r\n    )\r\n\r\n    function listGenerator(data: ItemsType, key: string) {\r\n        let fields;\r\n        console.log(data[key])\r\n        if (key !== 'adsParams' && key !== 'address') {\r\n            if (Array.isArray(data) && data.length) {\r\n                if (key === 'body' || key === 'colors') {\r\n                    fields = data.map(item => (\r\n                        <div\r\n                            key={item.id}\r\n                            onClick={handleListItem(key, item)}\r\n                        >\r\n                            {\r\n                                key === 'body'\r\n                                    ? (\r\n                                        <>\r\n                                            <img src={item.icon.url} alt={item.name}/>\r\n                                            <Typography>{item.name}</Typography>\r\n                                        </>\r\n                                    )\r\n                                    : (\r\n                                        <div\r\n                                            style={{\r\n                                                width: '50px',\r\n                                                height: '50px',\r\n                                                backgroundColor: `${item.hex_color_code}`\r\n                                            }}\r\n                                        />\r\n                                    )\r\n                            }\r\n                        </div>\r\n                    ));\r\n                } else {\r\n                    data = [{id: null, name: 'Не выбрано'}, ...data];\r\n\r\n                    fields = (\r\n                        <CustomMenu\r\n                            valueName={adsParams[key] ? adsParams[key].name : data[0].name}\r\n                            items={data}\r\n                            onBlur={onBlur}\r\n                            onClick={handleMenuItem(key)}\r\n                        />\r\n                    );\r\n                }\r\n            } else if (isPreview && data[key]) {\r\n                fields = data[key].map(k => {\r\n                    return (\r\n                        <Typography\r\n                            key={k.id}>\r\n                            {k.name}\r\n                        </Typography>\r\n                    )\r\n                });\r\n            }\r\n\r\n            return (\r\n                <Grid\r\n                    item\r\n                    container\r\n                    key={key}\r\n                    xs={12}\r\n                    sm={key === 'body' || key === 'colors' ? 12 : 6}\r\n                >\r\n                    <Typography style={{width: '100%'}} variant=\"subtitle1\">\r\n                        <strong>{key}</strong>\r\n                    </Typography>\r\n                    {fields}\r\n                </Grid>\r\n            )\r\n        }\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}