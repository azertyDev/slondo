{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { TextField } from \"@material-ui/core\";\n\nvar formatData = function formatData(list) {\n  return list.reduce(function (acc, row) {\n    row.cities.forEach(function (city) {\n      if (city.district.length) {\n        city.district.forEach(function (district) {\n          acc = [].concat(_toConsumableArray(acc), [{\n            area_id: row.id,\n            area: row.name,\n            city_id: city.id,\n            city: city.name,\n            district_id: district.id,\n            district: district.name\n          }]);\n        });\n      } else {\n        acc = [].concat(_toConsumableArray(acc), [{\n          area_id: row.id,\n          area: row.name,\n          city_id: city.id,\n          city: city.name\n        }]);\n      }\n    });\n    return acc;\n  }, []);\n};\n\nexport var AddressAutocomplete = function AddressAutocomplete(_ref) {\n  var setValues = _ref.setValues,\n      props = _objectWithoutProperties(_ref, [\"setValues\"]);\n\n  var optionSelected = function optionSelected(_ref2, value) {\n    var district = _ref2.district,\n        city = _ref2.city;\n\n    if (value.district ? district.id === value.district.id : city.id === value.city.id) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  var option = function option(location) {\n    setValues(_objectSpread(_objectSpread({}, props.values), {}, {\n      location: location\n    }));\n    return \"\".concat(location.district ? \"\".concat(location.district, \", \") : '').concat(location.city, \", \").concat(location.area);\n  };\n\n  return __jsx(Autocomplete, {\n    noOptionsText: \"\\u0413\\u043E\\u0440\\u043E\\u0434 \\u0438\\u043B\\u0438 \\u0440\\u0435\\u0433\\u0438\\u043E\\u043D \\u0441 \\u0442\\u0430\\u043A\\u0438\\u043C \\u0438\\u043C\\u0435\\u043D\\u0435\\u043C \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\",\n    options: formatData(props.list),\n    getOptionSelected: optionSelected,\n    getOptionLabel: option,\n    renderInput: function renderInput(params) {\n      console.log(params);\n      return __jsx(TextField, _extends({\n        fullWidth: true,\n        focused: false,\n        variant: \"outlined\"\n      }, params, props));\n    }\n  });\n};\n_c = AddressAutocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddressAutocomplete\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/address_autocomplete/AddressAutocomplete.tsx"],"names":["React","Autocomplete","TextField","formatData","list","reduce","acc","row","cities","forEach","city","district","length","area_id","id","area","name","city_id","district_id","AddressAutocomplete","setValues","props","optionSelected","value","option","location","values","params","console","log"],"mappings":"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","sourcesContent":["import React, {FC} from \"react\";\r\nimport {Autocomplete} from \"@material-ui/lab\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {AddressAutocompleteProps} from \"@root/interfaces/AddressAutocomplete\";\r\n\r\n\r\nconst formatData = (list) => {\r\n    return list.reduce((acc, row) => {\r\n        row.cities.forEach(city => {\r\n            if (city.district.length) {\r\n                city.district.forEach(district => {\r\n                    acc = [\r\n                        ...acc,\r\n                        {\r\n                            area_id: row.id,\r\n                            area: row.name,\r\n                            city_id: city.id,\r\n                            city: city.name,\r\n                            district_id: district.id,\r\n                            district: district.name\r\n                        }\r\n                    ];\r\n                });\r\n            } else {\r\n                acc = [\r\n                    ...acc,\r\n                    {\r\n                        area_id: row.id,\r\n                        area: row.name,\r\n                        city_id: city.id,\r\n                        city: city.name\r\n                    }\r\n                ];\r\n            }\r\n        });\r\n        return acc;\r\n    }, []);\r\n};\r\n\r\nexport const AddressAutocomplete: FC<AddressAutocompleteProps> = ({setValues, ...props}) => {\r\n    const optionSelected = ({district, city}, value) => {\r\n        if (value.district ? district.id === value.district.id : city.id === value.city.id) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const option = (location) => {\r\n        setValues({...props.values, location});\r\n        return `${location.district ? `${location.district}, ` : ''}${location.city}, ${location.area}`;\r\n    };\r\n\r\n    return (\r\n        <Autocomplete\r\n            noOptionsText='Город или регион с таким именем не найден'\r\n            options={formatData(props.list)}\r\n            getOptionSelected={optionSelected}\r\n            getOptionLabel={option}\r\n            renderInput={(params) => {\r\n                console.log(params)\r\n                return <TextField\r\n                    fullWidth\r\n                    focused={false}\r\n                    variant='outlined'\r\n                    {...params}\r\n                    {...props}\r\n                />\r\n            }}\r\n        />\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}