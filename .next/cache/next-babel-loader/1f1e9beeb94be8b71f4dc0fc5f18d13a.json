{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { CustomSlider } from \"@src/components/elements/custom_slider/CustomSlider\";\nimport { settings } from './sliderSettings';\nimport { Link } from \"@root/i18n\";\nimport { useStyles } from './useStyles';\nimport { Skeleton } from \"@material-ui/lab\";\nexport var CategoriesSlider = function CategoriesSlider(props) {\n  _s();\n\n  var t = props.t,\n      categories = props.categories;\n  var classes = useStyles();\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(Typography, {\n    variant: \"h4\"\n  }, t('popularCategories')), __jsx(\"div\", {\n    className: \"category-slider\"\n  }, __jsx(CustomSlider, settings, categories.error ? __jsx(Typography, {\n    className: \"error-text\"\n  }, categories.error) : categories.list.map(function (category) {\n    return __jsx(Link, {\n      href: \"#\",\n      key: category.id\n    }, __jsx(\"a\", {\n      title: category.name\n    }, categories.isFetch ? __jsx(React.Fragment, null, __jsx(Skeleton, {\n      variant: \"circle\",\n      width: 100,\n      height: 100\n    }), __jsx(Skeleton, {\n      variant: \"text\"\n    })) : __jsx(React.Fragment, null, __jsx(\"img\", {\n      src: category.images.url[\"default\"],\n      alt: \"category\"\n    }), __jsx(Typography, null, category.name))));\n  }))));\n};\n\n_s(CategoriesSlider, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = CategoriesSlider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoriesSlider\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/header/sliders/categoriesSlider/CategoriesSlider.tsx"],"names":["React","Typography","CustomSlider","settings","Link","useStyles","Skeleton","CategoriesSlider","props","t","categories","classes","root","error","list","map","category","id","name","isFetch","images","url"],"mappings":";;;AAAA,OAAOA,KAAP,MAAwB,OAAxB;AAEA,SAAQC,UAAR,QAAyB,mBAAzB;AACA,SAAQC,YAAR,QAA2B,qDAA3B;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,IAAR,QAAmB,YAAnB;AACA,SAAQC,SAAR,QAAwB,aAAxB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AAIA,OAAO,IAAMC,gBAAwD,GAAG,SAA3DA,gBAA2D,CAACC,KAAD,EAAW;AAAA;;AAAA,MACxEC,CADwE,GACvDD,KADuD,CACxEC,CADwE;AAAA,MACrEC,UADqE,GACvDF,KADuD,CACrEE,UADqE;AAG/E,MAAMC,OAAO,GAAGN,SAAS,EAAzB;AACA,SACI;AAAK,IAAA,SAAS,EAAEM,OAAO,CAACC;AAAxB,KACI,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC;AAApB,KAA0BH,CAAC,CAAC,mBAAD,CAA3B,CADJ,EAEI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI,MAAC,YAAD,EAAkBN,QAAlB,EAEQO,UAAU,CAACG,KAAX,GACM,MAAC,UAAD;AAAY,IAAA,SAAS,EAAC;AAAtB,KAAoCH,UAAU,CAACG,KAA/C,CADN,GAEMH,UAAU,CAACI,IAAX,CAAgBC,GAAhB,CAAoB,UAAAC,QAAQ;AAAA,WAC1B,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,GAAX;AAAe,MAAA,GAAG,EAAEA,QAAQ,CAACC;AAA7B,OACI;AAAG,MAAA,KAAK,EAAED,QAAQ,CAACE;AAAnB,OAEQR,UAAU,CAACS,OAAX,GACM,4BACE,MAAC,QAAD;AAAU,MAAA,OAAO,EAAC,QAAlB;AAA2B,MAAA,KAAK,EAAE,GAAlC;AAAuC,MAAA,MAAM,EAAE;AAA/C,MADF,EAEE,MAAC,QAAD;AAAU,MAAA,OAAO,EAAC;AAAlB,MAFF,CADN,GAKM,4BACE;AAAK,MAAA,GAAG,EAAEH,QAAQ,CAACI,MAAT,CAAgBC,GAAhB,WAAV;AAAuC,MAAA,GAAG,EAAC;AAA3C,MADF,EAEE,MAAC,UAAD,QAAaL,QAAQ,CAACE,IAAtB,CAFF,CAPd,CADJ,CAD0B;AAAA,GAA5B,CAJd,CADJ,CAFJ,CADJ;AA8BH,CAlCM;;GAAMX,gB;UAGOF,S;;;KAHPE,gB","sourcesContent":["import React, {FC} from 'react';\r\nimport {WithT} from \"i18next\";\r\nimport {Typography} from '@material-ui/core';\r\nimport {CustomSlider} from \"@src/components/elements/custom_slider/CustomSlider\";\r\nimport {settings} from './sliderSettings';\r\nimport {Link} from \"@root/i18n\";\r\nimport {useStyles} from './useStyles';\r\nimport {Skeleton} from \"@material-ui/lab\";\r\nimport {Categories} from \"@root/interfaces/Categories\";\r\n\r\n\r\nexport const CategoriesSlider: FC<WithT & { categories: Categories }> = (props) => {\r\n    const {t, categories} = props;\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography variant=\"h4\">{t('popularCategories')}</Typography>\r\n            <div className=\"category-slider\">\r\n                <CustomSlider {...settings}>\r\n                    {\r\n                        categories.error\r\n                            ? <Typography className=\"error-text\">{categories.error}</Typography>\r\n                            : categories.list.map(category => (\r\n                                <Link href=\"#\" key={category.id}>\r\n                                    <a title={category.name}>\r\n                                        {\r\n                                            categories.isFetch\r\n                                                ? <>\r\n                                                    <Skeleton variant=\"circle\" width={100} height={100}/>\r\n                                                    <Skeleton variant=\"text\"/>\r\n                                                </>\r\n                                                : <>\r\n                                                    <img src={category.images.url.default} alt=\"category\"/>\r\n                                                    <Typography>{category.name}</Typography>\r\n                                                </>\r\n                                        }\r\n                                    </a>\r\n                                </Link>\r\n                            ))\r\n                    }\r\n                </CustomSlider>\r\n            </div>\r\n        </div>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}