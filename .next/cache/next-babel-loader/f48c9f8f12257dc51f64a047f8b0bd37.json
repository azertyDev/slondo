{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Grid, Hidden, Container } from '@material-ui/core';\nimport { useSelector } from \"react-redux\";\nimport { MainLayout } from \"@src/components/MainLayout\";\nimport { AdvrtFormContainer } from './advrt_form/AdvrtFormContainer';\nimport { useStyles } from './useStyles';\nimport { i18n } from \"@root/i18n\";\nimport { userAPI } from '@src/api/api';\nimport { CreateAdvrt } from \"@src/components/advertisement/create_advrt/CreateAdvrt\";\nconst initCreateAdState = {\n  isFetch: false,\n  error: null,\n  adType: {\n    id: null,\n    name: '',\n    currency: [],\n    expired: []\n  },\n  category: {\n    id: null,\n    name: '',\n    childs: []\n  },\n  subCategory: {\n    id: null,\n    name: '',\n    data: {\n      adsParams: []\n    }\n  }\n};\nexport const CreateAdvrtContainer = () => {\n  const lang = i18n.language;\n  const categoriesList = useSelector(({\n    categories\n  }) => categories.list);\n  const {\n    0: tabValue,\n    1: setTabValue\n  } = useState(1);\n  const {\n    0: adTypes,\n    1: setAdTypes\n  } = useState([]);\n  const {\n    0: createAdvrt,\n    1: setCreateAdvrt\n  } = useState(initCreateAdState);\n  const {\n    category,\n    subCategory\n  } = createAdvrt;\n  const {\n    0: isForm,\n    1: setIsForm\n  } = useState(false);\n\n  const getAdTypes = async () => {\n    try {\n      setCreateAdvrt(_objectSpread(_objectSpread({}, createAdvrt), {}, {\n        isFetch: true\n      }));\n      const adTypes = await userAPI.getAdTypes(lang);\n      setCreateAdvrt(_objectSpread(_objectSpread({}, createAdvrt), {}, {\n        isFetch: false\n      }));\n      setAdTypes(adTypes);\n      setCreateAdvrt(_objectSpread(_objectSpread({}, createAdvrt), {}, {\n        adType: adTypes[0]\n      }));\n    } catch (error) {\n      setCreateAdvrt(_objectSpread(_objectSpread({}, createAdvrt), {}, {\n        error\n      }));\n    }\n  };\n\n  const handleTab = (_, newValue) => {\n    setTabValue(newValue);\n  };\n\n  const setAdType = () => {\n    const [selectedAdType] = adTypes.filter(type => type.id === tabValue);\n    setCreateAdvrt(_objectSpread(_objectSpread({}, createAdvrt), {}, {\n      adType: selectedAdType\n    }));\n  };\n\n  const handleCategory = (id, name, childs) => () => {\n    setCreateAdvrt(_objectSpread(_objectSpread({}, createAdvrt), {}, {\n      category: {\n        id,\n        name,\n        childs\n      }\n    }));\n  };\n\n  const handleSubCategory = (id, name) => async () => {\n    try {\n      if (id !== undefined) {\n        setCreateAdvrt(_objectSpread(_objectSpread({}, createAdvrt), {}, {\n          isFetch: true\n        }));\n        const data = await userAPI.getAdDataForCreate(category.id, id, lang);\n        setIsForm(true);\n        setCreateAdvrt(_objectSpread(_objectSpread({}, createAdvrt), {}, {\n          isFetch: false,\n          subCategory: {\n            id,\n            name,\n            data\n          }\n        }));\n      } else {\n        setIsForm(true);\n      }\n    } catch (error) {\n      setCreateAdvrt(_objectSpread(_objectSpread({}, createAdvrt), {}, {\n        error\n      }));\n    }\n  };\n\n  console.log(createAdvrt);\n  useEffect(() => {\n    getAdTypes();\n  }, []);\n  useEffect(() => {\n    adTypes.length && setAdType();\n  }, [tabValue]);\n  const classes = useStyles();\n  return __jsx(MainLayout, null, __jsx(Container, {\n    maxWidth: \"lg\"\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 9\n  }, isForm ? __jsx(AdvrtFormContainer, {\n    setIsForm: setIsForm,\n    createAdvrt: createAdvrt\n  }) : __jsx(CreateAdvrt, {\n    handleTab: handleTab,\n    handleCategory: handleCategory,\n    handleSubCategory: handleSubCategory,\n    adTypes: adTypes,\n    tabValue: tabValue,\n    createAdvrt: createAdvrt,\n    categoriesList: categoriesList\n  })), __jsx(Hidden, {\n    smDown: true\n  }, __jsx(Grid, {\n    item: true,\n    md: 3,\n    className: classes.adBanner\n  }, __jsx(\"div\", {\n    className: \"right-banner\"\n  }))))));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/CreateAdvrtContainer.tsx"],"names":["React","useEffect","useState","Grid","Hidden","Container","useSelector","MainLayout","AdvrtFormContainer","useStyles","i18n","userAPI","CreateAdvrt","initCreateAdState","isFetch","error","adType","id","name","currency","expired","category","childs","subCategory","data","adsParams","CreateAdvrtContainer","lang","language","categoriesList","categories","list","tabValue","setTabValue","adTypes","setAdTypes","createAdvrt","setCreateAdvrt","isForm","setIsForm","getAdTypes","handleTab","_","newValue","setAdType","selectedAdType","filter","type","handleCategory","handleSubCategory","undefined","getAdDataForCreate","console","log","length","classes","adBanner"],"mappings":"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","sourcesContent":["import React, {FC, useEffect, useState} from 'react';\r\nimport {Grid, Hidden, Container} from '@material-ui/core';\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"@src/redux/rootReducer\";\r\nimport {MainLayout} from \"@src/components/MainLayout\";\r\nimport {AdvrtFormContainer} from './advrt_form/AdvrtFormContainer';\r\nimport {useStyles} from './useStyles';\r\nimport {i18n} from \"@root/i18n\";\r\nimport {userAPI} from '@src/api/api';\r\nimport {CreateAdvrt} from \"@src/components/advertisement/create_advrt/CreateAdvrt\";\r\n\r\n\r\nconst initCreateAdState = {\r\n    isFetch: false,\r\n    error: null,\r\n    adType: {\r\n        id: null,\r\n        name: '',\r\n        currency: [],\r\n        expired: [],\r\n    },\r\n    category: {\r\n        id: null,\r\n        name: '',\r\n        childs: []\r\n    },\r\n    subCategory: {\r\n        id: null,\r\n        name: '',\r\n        data: {\r\n            adsParams: []\r\n        }\r\n    }\r\n};\r\n\r\nexport const CreateAdvrtContainer: FC<void> = () => {\r\n    const lang = i18n.language;\r\n\r\n    const categoriesList = useSelector(({categories}: RootState) => categories.list);\r\n\r\n    const [tabValue, setTabValue] = useState(1);\r\n\r\n    const [adTypes, setAdTypes] = useState([]);\r\n\r\n    const [createAdvrt, setCreateAdvrt] = useState(initCreateAdState);\r\n    const {category, subCategory} = createAdvrt;\r\n\r\n    const [isForm, setIsForm] = useState(false);\r\n\r\n    const getAdTypes = async () => {\r\n        try {\r\n            setCreateAdvrt({...createAdvrt, isFetch: true});\r\n            const adTypes = await userAPI.getAdTypes(lang);\r\n            setCreateAdvrt({...createAdvrt, isFetch: false});\r\n\r\n            setAdTypes(adTypes);\r\n            setCreateAdvrt({\r\n                ...createAdvrt,\r\n                adType: adTypes[0]\r\n            })\r\n        } catch (error) {\r\n            setCreateAdvrt({...createAdvrt, error});\r\n        }\r\n    };\r\n\r\n    const handleTab = (_, newValue) => {\r\n        setTabValue(newValue);\r\n    };\r\n\r\n    const setAdType = () => {\r\n        const [selectedAdType] = adTypes.filter(type => type.id === tabValue);\r\n\r\n        setCreateAdvrt({\r\n            ...createAdvrt,\r\n            adType: selectedAdType\r\n        });\r\n    };\r\n\r\n    const handleCategory = (id, name, childs) => () => {\r\n        setCreateAdvrt({\r\n            ...createAdvrt,\r\n            category: {\r\n                id,\r\n                name,\r\n                childs\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleSubCategory = (id, name) => async () => {\r\n        try {\r\n            if (id !== undefined) {\r\n                setCreateAdvrt({\r\n                    ...createAdvrt,\r\n                    isFetch: true\r\n                });\r\n\r\n                const data: any = await userAPI.getAdDataForCreate(category.id, id, lang);\r\n\r\n                setIsForm(true);\r\n\r\n                setCreateAdvrt({\r\n                    ...createAdvrt,\r\n                    isFetch: false,\r\n                    subCategory: {id, name, data}\r\n                });\r\n            } else {\r\n                setIsForm(true)\r\n            }\r\n        } catch (error) {\r\n            setCreateAdvrt({\r\n                ...createAdvrt,\r\n                error\r\n            });\r\n        }\r\n    };\r\n\r\n    console.log(createAdvrt)\r\n\r\n    useEffect(() => {\r\n        getAdTypes();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        adTypes.length && setAdType();\r\n    }, [tabValue]);\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <MainLayout>\r\n            <Container maxWidth=\"lg\">\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12} md={9}>\r\n                        {\r\n                            isForm\r\n                                ? <AdvrtFormContainer\r\n                                    setIsForm={setIsForm}\r\n                                    createAdvrt={createAdvrt}\r\n                                />\r\n                                : <CreateAdvrt\r\n                                    handleTab={handleTab}\r\n                                    handleCategory={handleCategory}\r\n                                    handleSubCategory={handleSubCategory}\r\n                                    adTypes={adTypes}\r\n                                    tabValue={tabValue}\r\n                                    createAdvrt={createAdvrt}\r\n                                    categoriesList={categoriesList}\r\n                                />\r\n                        }\r\n                    </Grid>\r\n                    <Hidden smDown>\r\n                        <Grid item md={3} className={classes.adBanner}>\r\n                            <div className=\"right-banner\"/>\r\n                        </Grid>\r\n                    </Hidden>\r\n                </Grid>\r\n            </Container>\r\n        </MainLayout>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}