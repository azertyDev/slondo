{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { mainSliderActionsTypes } from '../actions/mainSliderActions';\nimport { HYDRATE } from \"next-redux-wrapper\";\nconst initialState = {\n  images: [],\n  error: null\n};\nexport const mainSlider = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload.mainSlider);\n\n    case mainSliderActionsTypes.GET_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case mainSliderActionsTypes.GET_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/reducers/mainSlider.ts"],"names":["mainSliderActionsTypes","HYDRATE","initialState","images","error","mainSlider","state","action","type","payload","GET_SUCCESS","GET_ERROR"],"mappings":";;;;;;AAAA,SAAQA,sBAAR,QAAqC,8BAArC;AAEA,SAAQC,OAAR,QAAsB,oBAAtB;AAOA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,KAAK,EAAE;AAFU,CAArB;AAKA,OAAO,MAAMC,UAAU,GAAG,CAACC,KAAY,GAAGJ,YAAhB,EAA8BK,MAA9B,KAA2D;AACjF,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,OAAL;AACI,6CACOK,KADP,GAEOC,MAAM,CAACE,OAAP,CAAeJ,UAFtB;;AAIJ,SAAKL,sBAAsB,CAACU,WAA5B;AACI,6CACOJ,KADP,GAEOC,MAAM,CAACE,OAFd;;AAIJ,SAAKT,sBAAsB,CAACW,SAA5B;AACI,6CACOL,KADP;AAEIF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAFlB;;AAIJ;AACI,aAAOH,KAAP;AAjBR;AAmBH,CApBM","sourcesContent":["import {mainSliderActionsTypes} from '../actions/mainSliderActions';\r\nimport {AnyAction} from \"redux\";\r\nimport {HYDRATE} from \"next-redux-wrapper\";\r\n\r\nexport interface State {\r\n    images: string[];\r\n    error: string | null;\r\n}\r\n\r\nconst initialState = {\r\n    images: [],\r\n    error: null,\r\n};\r\n\r\nexport const mainSlider = (state: State = initialState, action: AnyAction): State => {\r\n    switch (action.type) {\r\n        case HYDRATE:\r\n            return {\r\n                ...state,\r\n                ...action.payload.mainSlider\r\n            };\r\n        case mainSliderActionsTypes.GET_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        case mainSliderActionsTypes.GET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}