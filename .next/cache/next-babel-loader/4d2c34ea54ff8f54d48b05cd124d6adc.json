{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { mainSliderActionsTypes } from '../actions/mainSliderActions';\nimport { HYDRATE } from \"next-redux-wrapper\";\nconst initialState = {\n  images: [],\n  error: null,\n  isFetching: false\n};\nexport const mainSlider = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload.mainSlider);\n\n    case mainSliderActionsTypes.FETCH_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isFetching: true\n      });\n\n    case mainSliderActionsTypes.GET_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        images: action.payload,\n        isFetching: false\n      });\n\n    case mainSliderActionsTypes.GET_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        images: [],\n        errors: action.payload,\n        isFetching: false\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/reducers/mainSlider.ts"],"names":["mainSliderActionsTypes","HYDRATE","initialState","images","error","isFetching","mainSlider","state","action","type","payload","FETCH_REQUEST","GET_SUCCESS","GET_ERROR","errors"],"mappings":";;;;;;AAAA,SAAQA,sBAAR,QAAqC,8BAArC;AAEA,SAAQC,OAAR,QAAsB,oBAAtB;AAQA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,UAAU,EAAE;AAHK,CAArB;AAMA,OAAO,MAAMC,UAAU,GAAG,CAACC,KAAY,GAAGL,YAAhB,EAA8BM,MAA9B,KAAoD;AAC1E,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,OAAL;AACI,6CACOM,KADP,GAEOC,MAAM,CAACE,OAAP,CAAeJ,UAFtB;;AAIJ,SAAKN,sBAAsB,CAACW,aAA5B;AACI,6CACOJ,KADP;AAEIF,QAAAA,UAAU,EAAE;AAFhB;;AAIJ,SAAKL,sBAAsB,CAACY,WAA5B;AACI,6CACOL,KADP;AAEIJ,QAAAA,MAAM,EAAEK,MAAM,CAACE,OAFnB;AAGIL,QAAAA,UAAU,EAAE;AAHhB;;AAKJ,SAAKL,sBAAsB,CAACa,SAA5B;AACI,6CACON,KADP;AAEIJ,QAAAA,MAAM,EAAE,EAFZ;AAGIW,QAAAA,MAAM,EAAEN,MAAM,CAACE,OAHnB;AAIIL,QAAAA,UAAU,EAAE;AAJhB;;AAMJ;AACI,aAAOE,KAAP;AAzBR;AA2BH,CA5BM","sourcesContent":["import {mainSliderActionsTypes} from '../actions/mainSliderActions';\r\nimport {AnyAction} from \"redux\";\r\nimport {HYDRATE} from \"next-redux-wrapper\";\r\n\r\nexport interface State {\r\n    images: string[];\r\n    error: string | null;\r\n    isFetching: boolean;\r\n}\r\n\r\nconst initialState = {\r\n    images: [],\r\n    error: null,\r\n    isFetching: false,\r\n};\r\n\r\nexport const mainSlider = (state: State = initialState, action: AnyAction) => {\r\n    switch (action.type) {\r\n        case HYDRATE:\r\n            return {\r\n                ...state,\r\n                ...action.payload.mainSlider\r\n            };\r\n        case mainSliderActionsTypes.FETCH_REQUEST:\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n            };\r\n        case mainSliderActionsTypes.GET_SUCCESS:\r\n            return {\r\n                ...state,\r\n                images: action.payload,\r\n                isFetching: false,\r\n            };\r\n        case mainSliderActionsTypes.GET_ERROR:\r\n            return {\r\n                ...state,\r\n                images: [],\r\n                errors: action.payload,\r\n                isFetching: false,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}