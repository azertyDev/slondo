{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Grid, Hidden, Container, Typography } from '@material-ui/core';\nimport { AdvrtForm } from './advrtForm/AdvrtForm';\nimport { SuccessAdvrt } from './successAdvrt/SuccessAdvrt';\nimport { createAdvrtSchema } from \"@root/validation_schemas/createAdvrtSchema\";\nimport { useFormik, FormikProvider } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport { ButtonComponent } from \"@src/components/elements/button/Button\";\nimport { MainLayout } from \"@src/components/MainLayout\"; // styles\n\nimport { useStyles } from './useStyles';\nconst initFields = {\n  title: '',\n  safe_deal: false,\n  delivery: false,\n  exchange: false,\n  location: '',\n  files: [],\n  description: '',\n  phone: '',\n  adsParams: {}\n};\nexport const CreateAdvrt = () => {\n  const {\n    createAdvrt\n  } = useSelector(store => store);\n  const {\n    0: isPreview,\n    1: setIsPreview\n  } = useState(false);\n  const {\n    0: isSuccess,\n    1: setIsSuccess\n  } = useState(false);\n\n  const onSubmit = () => {\n    isPreview ? console.log('submit') : setIsPreview(true);\n  };\n\n  const formik = useFormik({\n    initialValues: initFields,\n    validationSchema: createAdvrtSchema,\n    onSubmit\n  });\n  const {\n    setValues,\n    values,\n    errors,\n    setErrors,\n    touched,\n    handleBlur\n  } = formik;\n\n  const handlePreview = value => () => {\n    setIsPreview(value);\n  };\n\n  const handleCheckboxChange = valName => ({\n    target\n  }) => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [valName]: target.checked\n    }));\n  };\n\n  const handleClickMenuItem = valueName => (newValue, setAnchor) => () => {\n    setAnchor(null);\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      adsParams: _objectSpread(_objectSpread({}, values.adsParams), {}, {\n        [valueName]: newValue\n      })\n    })); // Reset sub props in values\n\n    Object.keys(newValue).map(key => {\n      if (values.adsParams[key]) {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          adsParams: _objectSpread(_objectSpread({}, values.adsParams), {}, {\n            [valueName]: newValue,\n            [key]: _objectSpread({\n              id: null,\n              name: 'Не выбрано'\n            }, newValue[key])\n          })\n        }));\n      }\n    });\n  };\n\n  const resetValues = () => {\n    setValues(initFields);\n    setErrors({});\n  };\n\n  const setAdsParams = data => {\n    const adsParams = {};\n    Object.keys(data).map(key => {\n      if (Array.isArray(data[key])) {\n        adsParams[key] = {\n          id: null,\n          name: 'Не выбрано'\n        };\n        data[key].map(innerData => {\n          setAdsParams(innerData);\n        });\n      }\n    });\n    setValues(_objectSpread(_objectSpread({}, initFields), {}, {\n      adsParams\n    }));\n  };\n\n  useEffect(() => {\n    resetValues();\n    setIsPreview(false);\n    setAdsParams(createAdvrt.data);\n  }, [createAdvrt.category.id, createAdvrt.data.id]);\n  console.log(errors);\n  const classes = useStyles();\n  return __jsx(MainLayout, null, __jsx(Container, {\n    maxWidth: \"lg\"\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 9\n  }, __jsx(FormikProvider, {\n    value: formik\n  }, __jsx(\"form\", {\n    onSubmit: formik.handleSubmit\n  }, isSuccess ? __jsx(SuccessAdvrt, null) : __jsx(AdvrtForm, {\n    isPreview: isPreview,\n    setIsPreview: setIsPreview,\n    createAdvrt: createAdvrt,\n    errors: errors,\n    touched: touched,\n    values: values,\n    handleBlur: handleBlur,\n    resetValues: resetValues,\n    handleClickMenuItem: handleClickMenuItem,\n    handleCheckboxChange: handleCheckboxChange\n  }), __jsx(\"div\", {\n    className: classes.nextButtonBlock\n  }, isPreview && __jsx(ButtonComponent, {\n    className: classes.nextButton,\n    onClick: handlePreview(false)\n  }, __jsx(Typography, null, \"\\u041D\\u0430\\u0437\\u0430\\u0434\")), __jsx(ButtonComponent, {\n    type: \"submit\",\n    className: classes.nextButton\n  }, __jsx(Typography, null, isPreview ? 'Создать' : 'Далее')))))), __jsx(Hidden, {\n    smDown: true\n  }, __jsx(Grid, {\n    item: true,\n    md: 3,\n    container: true,\n    justify: \"flex-end\",\n    className: classes.adBanner\n  }, __jsx(Grid, {\n    item: true,\n    md: 12\n  }, __jsx(\"div\", {\n    className: \"right-banner\"\n  })))))));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/CreateAdvrt.tsx"],"names":["React","useEffect","useState","Grid","Hidden","Container","Typography","AdvrtForm","SuccessAdvrt","createAdvrtSchema","useFormik","FormikProvider","useSelector","ButtonComponent","MainLayout","useStyles","initFields","title","safe_deal","delivery","exchange","location","files","description","phone","adsParams","CreateAdvrt","createAdvrt","store","isPreview","setIsPreview","isSuccess","setIsSuccess","onSubmit","console","log","formik","initialValues","validationSchema","setValues","values","errors","setErrors","touched","handleBlur","handlePreview","value","handleCheckboxChange","valName","target","checked","handleClickMenuItem","valueName","newValue","setAnchor","Object","keys","map","key","id","name","resetValues","setAdsParams","data","Array","isArray","innerData","category","classes","handleSubmit","nextButtonBlock","nextButton","adBanner"],"mappings":"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","sourcesContent":["import React, {FC, useEffect, useState} from 'react';\r\nimport {Grid, Hidden, Container, Typography} from '@material-ui/core';\r\nimport {AdvrtForm} from './advrtForm/AdvrtForm';\r\nimport {SuccessAdvrt} from './successAdvrt/SuccessAdvrt';\r\nimport {AdvertisementProps} from \"@root/interfaces/Advertisement\";\r\nimport {createAdvrtSchema} from \"@root/validation_schemas/createAdvrtSchema\";\r\nimport {useFormik, FormikProvider} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"@src/redux/rootReducer\";\r\nimport {ButtonComponent} from \"@src/components/elements/button/Button\";\r\nimport {MainLayout} from \"@src/components/MainLayout\";\r\n// styles\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nconst initFields = {\r\n    title: '',\r\n    safe_deal: false,\r\n    delivery: false,\r\n    exchange: false,\r\n    location: '',\r\n    files: [],\r\n    description: '',\r\n    phone: '',\r\n    adsParams: {}\r\n};\r\n\r\nexport const CreateAdvrt: FC<AdvertisementProps> = () => {\r\n    const {createAdvrt} = useSelector((store: RootState) => store);\r\n\r\n    const [isPreview, setIsPreview] = useState(false);\r\n    const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n\r\n    const onSubmit = () => {\r\n        isPreview\r\n            ? console.log('submit')\r\n            : setIsPreview(true)\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: initFields,\r\n        validationSchema: createAdvrtSchema,\r\n        onSubmit\r\n    });\r\n\r\n    const {\r\n        setValues,\r\n        values,\r\n        errors,\r\n        setErrors,\r\n        touched,\r\n        handleBlur,\r\n    } = formik;\r\n\r\n    const handlePreview = (value) => () => {\r\n        setIsPreview(value)\r\n    };\r\n\r\n    const handleCheckboxChange = (valName) => ({target}) => {\r\n        setValues({...values, [valName]: target.checked});\r\n    };\r\n\r\n    const handleClickMenuItem = (valueName) => (newValue, setAnchor) => () => {\r\n        setAnchor(null);\r\n\r\n        setValues({\r\n            ...values,\r\n            adsParams: {\r\n                ...values.adsParams,\r\n                [valueName]: newValue\r\n            }\r\n        });\r\n\r\n        // Reset sub props in values\r\n        Object.keys(newValue).map(key => {\r\n            if (values.adsParams[key]) {\r\n                setValues({\r\n                    ...values,\r\n                    adsParams: {\r\n                        ...values.adsParams,\r\n                        [valueName]: newValue,\r\n                        [key]: {id: null, name: 'Не выбрано', ...newValue[key]}\r\n                    }\r\n                })\r\n            }\r\n        });\r\n    };\r\n\r\n    const resetValues = () => {\r\n        setValues(initFields);\r\n        setErrors({});\r\n    };\r\n\r\n    const setAdsParams = (data) => {\r\n        const adsParams = {};\r\n\r\n        Object.keys(data).map((key) => {\r\n            if (Array.isArray(data[key])) {\r\n                adsParams[key] = {id: null, name: 'Не выбрано'}\r\n                data[key].map(innerData => {\r\n                    setAdsParams(innerData);\r\n                })\r\n            }\r\n        });\r\n\r\n        setValues({...initFields, adsParams});\r\n    };\r\n\r\n    useEffect(() => {\r\n        resetValues();\r\n        setIsPreview(false);\r\n        setAdsParams(createAdvrt.data);\r\n    }, [createAdvrt.category.id, createAdvrt.data.id]);\r\n\r\n    console.log(errors)\r\n    const classes = useStyles();\r\n    return (\r\n        <MainLayout>\r\n            <Container maxWidth=\"lg\">\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12} md={9}>\r\n                        <FormikProvider value={formik}>\r\n                            <form onSubmit={formik.handleSubmit}>\r\n                                {\r\n                                    isSuccess\r\n                                        ? <SuccessAdvrt/>\r\n                                        : (\r\n                                            <AdvrtForm\r\n                                                isPreview={isPreview}\r\n                                                setIsPreview={setIsPreview}\r\n                                                createAdvrt={createAdvrt}\r\n                                                errors={errors}\r\n                                                touched={touched}\r\n                                                values={values}\r\n                                                handleBlur={handleBlur}\r\n                                                resetValues={resetValues}\r\n                                                handleClickMenuItem={handleClickMenuItem}\r\n                                                handleCheckboxChange={handleCheckboxChange}\r\n                                            />\r\n                                        )\r\n                                }\r\n                                <div className={classes.nextButtonBlock}>\r\n                                    {\r\n                                        isPreview && (\r\n                                            <ButtonComponent\r\n                                                className={classes.nextButton}\r\n                                                onClick={handlePreview(false)}\r\n                                            >\r\n                                                <Typography>\r\n                                                    Назад\r\n                                                </Typography>\r\n                                            </ButtonComponent>\r\n                                        )\r\n                                    }\r\n                                    <ButtonComponent\r\n                                        type='submit'\r\n                                        className={classes.nextButton}\r\n                                    >\r\n                                        <Typography>\r\n                                            {\r\n                                                isPreview\r\n                                                    ? 'Создать'\r\n                                                    : 'Далее'\r\n                                            }\r\n                                        </Typography>\r\n                                    </ButtonComponent>\r\n                                </div>\r\n                            </form>\r\n                        </FormikProvider>\r\n                    </Grid>\r\n                    <Hidden smDown>\r\n                        <Grid\r\n                            item\r\n                            md={3}\r\n                            container\r\n                            justify=\"flex-end\"\r\n                            className={classes.adBanner}\r\n                        >\r\n                            <Grid item md={12}>\r\n                                <div className=\"right-banner\"/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Hidden>\r\n                </Grid>\r\n            </Container>\r\n        </MainLayout>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}