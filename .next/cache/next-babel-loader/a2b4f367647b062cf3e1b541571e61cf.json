{"ast":null,"code":"import { userApi } from '../../api/api';\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport { FETCH_TOKEN, authActions } from \"../actions/authActions\"; // Self data saga\n\nconst {\n  fetchAuthBegin,\n  fetchAuthSuccess,\n  fetchAuthFailure\n} = authActions;\n\nfunction* workerAuth(actions) {\n  const {\n    payload\n  } = actions;\n\n  try {\n    yield put(fetchAuthBegin());\n    const token = yield call(userApi.login, payload.phone, payload.password);\n    yield put(fetchAuthSuccess({\n      token\n    }));\n  } catch (e) {\n    yield put(fetchAuthFailure(e.message));\n  }\n}\n\nexport function* watchAuth() {\n  yield takeLatest(FETCH_TOKEN, workerAuth);\n}","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/sagas/authSaga.ts"],"names":["userApi","call","put","takeLatest","FETCH_TOKEN","authActions","fetchAuthBegin","fetchAuthSuccess","fetchAuthFailure","workerAuth","actions","payload","token","login","phone","password","e","message","watchAuth"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,eAAtB;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,wBAAvC,C,CAGA;;AACA,MAAM;AAACC,EAAAA,cAAD;AAAiBC,EAAAA,gBAAjB;AAAmCC,EAAAA;AAAnC,IAAuDH,WAA7D;;AAEA,UAAUI,UAAV,CAAqBC,OAArB,EAA8B;AAC1B,QAAM;AAACC,IAAAA;AAAD,MAAYD,OAAlB;;AACA,MAAI;AACA,UAAMR,GAAG,CAACI,cAAc,EAAf,CAAT;AACA,UAAMM,KAAK,GAAG,MAAMX,IAAI,CAACD,OAAO,CAACa,KAAT,EAAgBF,OAAO,CAACG,KAAxB,EAA+BH,OAAO,CAACI,QAAvC,CAAxB;AACA,UAAMb,GAAG,CAACK,gBAAgB,CAAC;AAACK,MAAAA;AAAD,KAAD,CAAjB,CAAT;AACH,GAJD,CAIE,OAAOI,CAAP,EAAU;AACR,UAAMd,GAAG,CAACM,gBAAgB,CAACQ,CAAC,CAACC,OAAH,CAAjB,CAAT;AACH;AACJ;;AAED,OAAO,UAAUC,SAAV,GAAsB;AACzB,QAAMf,UAAU,CAACC,WAAD,EAAcK,UAAd,CAAhB;AACH","sourcesContent":["import {userApi} from '../../api/api'\r\nimport {call, put, takeLatest} from \"redux-saga/effects\"\r\nimport {FETCH_TOKEN, authActions} from \"../actions/authActions\"\r\n\r\n\r\n// Self data saga\r\nconst {fetchAuthBegin, fetchAuthSuccess, fetchAuthFailure} = authActions;\r\n\r\nfunction* workerAuth(actions) {\r\n    const {payload} = actions;\r\n    try {\r\n        yield put(fetchAuthBegin());\r\n        const token = yield call(userApi.login, payload.phone, payload.password);\r\n        yield put(fetchAuthSuccess({token}));\r\n    } catch (e) {\r\n        yield put(fetchAuthFailure(e.message));\r\n    }\r\n}\r\n\r\nexport function* watchAuth() {\r\n    yield takeLatest(FETCH_TOKEN, workerAuth);\r\n}"]},"metadata":{},"sourceType":"module"}