{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from '@src/api/api';\nconst fetchToken = createAsyncThunk('auth/fetchByIdStatus', async (phone, password) => {\n  const response = await userAPI.login(phone, password);\n  return response.data;\n});\nconst initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  extraReducers: {\n    // [setIsAuthAction]: (state, action) => state.isAuth = action.payload,\n    [fetchToken.pending]: state => {\n      state.isFetch = true;\n      state.error = null;\n    },\n    [fetchToken.fulfilled]: (state, action) => {\n      state.isFetch = false;\n      state.isAuth = action.payload;\n    },\n    [fetchToken.rejected]: (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    }\n  }\n});\nexport const auth = state => state.auth;\nexport const {\n  setIsAuthAction\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/authReducer.ts"],"names":["createAsyncThunk","createSlice","userAPI","fetchToken","phone","password","response","login","data","initialState","isFetch","isAuth","error","authSlice","name","extraReducers","pending","state","fulfilled","action","payload","rejected","auth","setIsAuthAction","actions","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAAQC,OAAR,QAAsB,cAAtB;AAGA,MAAMC,UAAU,GAAGH,gBAAgB,CAC/B,sBAD+B,EAE/B,OAAOI,KAAP,EAAcC,QAAd,KAA2B;AACvB,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,KAAR,CAAcH,KAAd,EAAqBC,QAArB,CAAvB;AACA,SAAOC,QAAQ,CAACE,IAAhB;AACH,CAL8B,CAAnC;AAcA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,MAAM,EAAE,KAFS;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;AAMA,MAAMC,SAAS,GAAGZ,WAAW,CAAC;AAC1Ba,EAAAA,IAAI,EAAE,MADoB;AAE1BL,EAAAA,YAF0B;AAG1BM,EAAAA,aAAa,EAAE;AACX;AACA,KAACZ,UAAU,CAACa,OAAZ,GAAuBC,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACH,KALU;AAMX,KAACT,UAAU,CAACe,SAAZ,GAAwB,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACvCF,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,MAAN,GAAeQ,MAAM,CAACC,OAAtB;AACH,KATU;AAUX,KAACjB,UAAU,CAACkB,QAAZ,GAAuB,CAACJ,KAAD,EAAQE,MAAR,KAAmB;AACtCF,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAcO,MAAM,CAACC,OAArB;AACH;AAbU;AAHW,CAAD,CAA7B;AAoBA,OAAO,MAAME,IAAI,GAAIL,KAAD,IAAWA,KAAK,CAACK,IAA9B;AAEP,OAAO,MAAM;AAACC,EAAAA;AAAD,IAAoBV,SAAS,CAACW,OAApC;AAEP,eAAeX,SAAS,CAACY,OAAzB","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {userAPI} from '@src/api/api'\r\n\r\n\r\nconst fetchToken = createAsyncThunk(\r\n    'auth/fetchByIdStatus',\r\n    async (phone, password) => {\r\n        const response = await userAPI.login(phone, password)\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport type AuthTypes = {\r\n    isFetch: boolean,\r\n    isAuth: boolean,\r\n    error?: any\r\n};\r\n\r\nconst initialState = {\r\n    isFetch: false,\r\n    isAuth: false,\r\n    error: null\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    extraReducers: {\r\n        // [setIsAuthAction]: (state, action) => state.isAuth = action.payload,\r\n        [fetchToken.pending]: (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        },\r\n        [fetchToken.fulfilled]: (state, action) => {\r\n            state.isFetch = false;\r\n            state.isAuth = action.payload;\r\n        },\r\n        [fetchToken.rejected]: (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const auth = (state) => state.auth;\r\n\r\nexport const {setIsAuthAction} = authSlice.actions;\r\n\r\nexport default authSlice.reducer;"]},"metadata":{},"sourceType":"module"}