{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createAction, createReducer } from '@reduxjs/toolkit';\nexport const setIsAuthAction = createAction('auth/setAuth', isAuth => ({\n  payload: isAuth\n}));\nexport const fetchTokenBeginAction = createAction('token/beginFetch');\nexport const fetchTokenSuccessAction = createAction('token/fetchSuccess');\nexport const fetchTokenFailureAction = createAction('token/fetchFailure');\nconst initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null\n};\nexport const authReducer = createReducer(initialState, {\n  ['__NEXT_REDUX_WRAPPER_HYDRATE__']: (state, action) => action.payload.auth,\n  [setIsAuthAction.type]: (state, action) => state.isAuth = action.payload,\n  [fetchTokenBeginAction.type]: state => _objectSpread(_objectSpread({}, state), {}, {\n    isFetch: true,\n    error: null\n  }),\n  [fetchTokenSuccessAction.type]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    isFetch: false\n  }, action.payload),\n  [fetchTokenFailureAction.type]: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n    isFetch: false,\n    error: action.payload\n  })\n});","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/authReducer.ts"],"names":["createAction","createReducer","setIsAuthAction","isAuth","payload","fetchTokenBeginAction","fetchTokenSuccessAction","fetchTokenFailureAction","initialState","isFetch","error","authReducer","state","action","auth","type"],"mappings":";;;;;;AACA,SAAQA,YAAR,EAAsBC,aAAtB,QAA0C,kBAA1C;AAEA,OAAO,MAAMC,eAAe,GAAGF,YAAY,CAAC,cAAD,EAAkBG,MAAD,KAAa;AAACC,EAAAA,OAAO,EAAED;AAAV,CAAb,CAAjB,CAApC;AACP,OAAO,MAAME,qBAAqB,GAAGL,YAAY,CAAC,kBAAD,CAA1C;AACP,OAAO,MAAMM,uBAAuB,GAAGN,YAAY,CAAC,oBAAD,CAA5C;AACP,OAAO,MAAMO,uBAAuB,GAAGP,YAAY,CAAC,oBAAD,CAA5C;AAQP,MAAMQ,YAAuB,GAAG;AAC5BC,EAAAA,OAAO,EAAE,KADmB;AAE5BN,EAAAA,MAAM,EAAE,KAFoB;AAG5BO,EAAAA,KAAK,EAAE;AAHqB,CAAhC;AAMA,OAAO,MAAMC,WAAW,GAAGV,aAAa,CAACO,YAAD,EAAe;AACnD,GAAC,gCAAD,GAAoC,CAACI,KAAD,EAAQC,MAAR,KAAmBA,MAAM,CAACT,OAAP,CAAeU,IADnB;AAEnD,GAACZ,eAAe,CAACa,IAAjB,GAAwB,CAACH,KAAD,EAAQC,MAAR,KAAmBD,KAAK,CAACT,MAAN,GAAeU,MAAM,CAACT,OAFd;AAGnD,GAACC,qBAAqB,CAACU,IAAvB,GAA+BH,KAAD,oCACvBA,KADuB;AAE1BH,IAAAA,OAAO,EAAE,IAFiB;AAG1BC,IAAAA,KAAK,EAAE;AAHmB,IAHqB;AAQnD,GAACJ,uBAAuB,CAACS,IAAzB,GAAgC,CAACH,KAAD,EAAQC,MAAR,qCACzBD,KADyB;AAE5BH,IAAAA,OAAO,EAAE;AAFmB,KAGzBI,MAAM,CAACT,OAHkB,CARmB;AAanD,GAACG,uBAAuB,CAACQ,IAAzB,GAAgC,CAACH,KAAD,EAAQC,MAAR,qCACzBD,KADyB;AAE5BH,IAAAA,OAAO,EAAE,KAFmB;AAG5BC,IAAAA,KAAK,EAAEG,MAAM,CAACT;AAHc;AAbmB,CAAf,CAAjC","sourcesContent":["import {HYDRATE} from \"next-redux-wrapper\"\r\nimport {createAction, createReducer} from '@reduxjs/toolkit'\r\n\r\nexport const setIsAuthAction = createAction('auth/setAuth', (isAuth) => ({payload: isAuth}));\r\nexport const fetchTokenBeginAction = createAction('token/beginFetch');\r\nexport const fetchTokenSuccessAction = createAction('token/fetchSuccess');\r\nexport const fetchTokenFailureAction = createAction('token/fetchFailure');\r\n\r\nexport type AuthTypes = {\r\n    isFetch: boolean,\r\n    isAuth: boolean,\r\n    error?: any\r\n};\r\n\r\nconst initialState: AuthTypes = {\r\n    isFetch: false,\r\n    isAuth: false,\r\n    error: null\r\n};\r\n\r\nexport const authReducer = createReducer(initialState, {\r\n    ['__NEXT_REDUX_WRAPPER_HYDRATE__']: (state, action) => action.payload.auth,\r\n    [setIsAuthAction.type]: (state, action) => state.isAuth = action.payload,\r\n    [fetchTokenBeginAction.type]: (state) => ({\r\n        ...state,\r\n        isFetch: true,\r\n        error: null\r\n    }),\r\n    [fetchTokenSuccessAction.type]: (state, action) => ({\r\n        ...state,\r\n        isFetch: false,\r\n        ...action.payload\r\n    }),\r\n    [fetchTokenFailureAction.type]: (state, action) => ({\r\n        ...state,\r\n        isFetch: false,\r\n        error: action.payload\r\n    })\r\n});"]},"metadata":{},"sourceType":"module"}