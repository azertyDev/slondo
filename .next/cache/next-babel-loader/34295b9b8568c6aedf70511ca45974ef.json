{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { fetchToken } from '../thunks/authRegThunk';\nconst initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null\n};\nconst authRegSlice = createSlice({\n  name: 'authReg',\n  initialState,\n  reducers: {\n    setIsAuth: (state, action) => {\n      state.isAuth = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchToken.pending, state => {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchToken.fulfilled, state => {\n      state.isFetch = false;\n      state.isAuth = true;\n    });\n    builder.addCase(fetchToken.rejected, (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  setIsAuth\n} = authRegSlice.actions;\nexport const authReducer = authRegSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/authRegSlice.ts"],"names":["createSlice","fetchToken","initialState","isFetch","isAuth","error","authRegSlice","name","reducers","setIsAuth","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","authReducer","reducer"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AACA,SAAQC,UAAR,QAAyB,wBAAzB;AAIA,MAAMC,YAAsB,GAAG;AAC3BC,EAAAA,OAAO,EAAE,KADkB;AAE3BC,EAAAA,MAAM,EAAE,KAFmB;AAG3BC,EAAAA,KAAK,EAAE;AAHoB,CAA/B;AAMA,MAAMC,YAAY,GAAGN,WAAW,CAAC;AAC7BO,EAAAA,IAAI,EAAE,SADuB;AAE7BL,EAAAA,YAF6B;AAG7BM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1BD,MAAAA,KAAK,CAACN,MAAN,GAAeO,MAAM,CAACC,OAAtB;AACH;AAHK,GAHmB;AAQ7BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBd,UAAU,CAACe,OAA3B,EAAqCN,KAAD,IAAW;AAC3CA,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACH,KAHD;AAIAS,IAAAA,OAAO,CAACC,OAAR,CAAgBd,UAAU,CAACgB,SAA3B,EAAuCP,KAAD,IAAW;AAC7CA,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,MAAN,GAAe,IAAf;AACH,KAHD;AAIAU,IAAAA,OAAO,CAACC,OAAR,CAAgBd,UAAU,CAACiB,QAA3B,EAAqC,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACpDD,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAArB;AACH,KAHD;AAIH;AArB4B,CAAD,CAAhC;AAwBA,OAAO,MAAM;AAACH,EAAAA;AAAD,IAAcH,YAAY,CAACa,OAAjC;AACP,OAAO,MAAMC,WAAW,GAAGd,YAAY,CAACe,OAAjC","sourcesContent":["import {createSlice} from '@reduxjs/toolkit'\r\nimport {fetchToken} from '../thunks/authRegThunk'\r\nimport {IAuthReg} from \"@root/interfaces/IAuthReg\";\r\n\r\n\r\nconst initialState: IAuthReg = {\r\n    isFetch: false,\r\n    isAuth: false,\r\n    error: null\r\n};\r\n\r\nconst authRegSlice = createSlice({\r\n    name: 'authReg',\r\n    initialState,\r\n    reducers: {\r\n        setIsAuth: (state, action) => {\r\n            state.isAuth = action.payload\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchToken.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        })\r\n        builder.addCase(fetchToken.fulfilled, (state) => {\r\n            state.isFetch = false;\r\n            state.isAuth = true;\r\n        })\r\n        builder.addCase(fetchToken.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport const {setIsAuth} = authRegSlice.actions;\r\nexport const authReducer = authRegSlice.reducer;"]},"metadata":{},"sourceType":"module"}