{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Grid, TextField, Typography } from \"@material-ui/core\";\nimport { isRequired } from \"@root/validation_schemas/createAdvrtSchema\";\nimport { CustomCheckbox } from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { useStyles } from \"./useStyles\";\nexport var AdvrtParameter = function AdvrtParameter(props) {\n  _s();\n\n  var key = props.key,\n      data = props.data,\n      errors = props.errors,\n      onBlur = props.onBlur,\n      values = props.values,\n      touched = props.touched,\n      isPreview = props.isPreview,\n      handleMenuItem = props.handleMenuItem,\n      handleListItem = props.handleListItem,\n      handleParamsInput = props.handleParamsInput,\n      handleParamsCheckbox = props.handleParamsCheckbox;\n  var adParams = values.adParams;\n  var adParamsError = errors.adParams;\n  var adParamsTouched = touched.adParams;\n  var isOptions = key === 'safety' || key === 'multimedia' || key === 'assistant' || key === 'exterior' || key === 'car_climate' || key === 'airbags';\n  var isSpecialRows = key === 'body' || key === 'colors' || isOptions;\n  var isNotEmptyArray = Array.isArray(data) && data.length;\n  var isDataObject = typeof data === 'object' && !Array.isArray(data);\n  var fields;\n  var classes = useStyles({\n    isPreview: isPreview\n  });\n\n  if (isSpecialRows && isNotEmptyArray) {\n    fields = __jsx(React.Fragment, null, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, __jsx(\"strong\", null, key), isRequired(key) && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\"), adParamsError && adParamsTouched && adParamsError[key] && adParamsTouched[key] && adParamsTouched[key].id && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \" \", adParamsError[key].id)), __jsx(\"div\", {\n      className: \"row-list\"\n    }, data.map(function (item) {\n      return __jsx(\"div\", {\n        key: item.id\n      }, key === 'body' ? __jsx(\"div\", {\n        onClick: !isPreview ? handleListItem(key, item) : null,\n        className: adParams[key] && adParams[key].id === item.id ? classes.selected : ''\n      }, __jsx(Typography, null, item.name)) : __jsx(React.Fragment, null, key === 'colors' ? __jsx(\"div\", {\n        onClick: !isPreview ? handleListItem(key, item) : null,\n        className: adParams[key] && adParams[key].id === item.id ? classes.selected : '',\n        style: {\n          width: '50px',\n          height: '50px',\n          backgroundColor: \"\".concat(item.hex_color_code)\n        }\n      }) : __jsx(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        }\n      }, __jsx(CustomCheckbox, {\n        disabled: isPreview,\n        checked: adParams[key] && adParams[key].some(function (val) {\n          return val.id === item.id;\n        }),\n        onChange: handleParamsCheckbox(key, item)\n      }), __jsx(Typography, null, item.name))));\n    })));\n  } else if (isNotEmptyArray) {\n    fields = __jsx(React.Fragment, null, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, __jsx(\"strong\", null, key, isRequired(key) && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\")), adParamsError && adParamsTouched && adParamsError[key] && adParamsTouched[key] && adParamsTouched[key].id && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \" \", adParamsError[key].id)), __jsx(CustomMenu, {\n      className: adParamsError && adParamsTouched && adParamsError[key] && adParamsTouched[key] ? 'error-border' : '',\n      name: key,\n      items: key !== 'condition' ? [{\n        id: null,\n        name: 'Не выбрано'\n      }].concat(_toConsumableArray(data)) : data,\n      onBlur: onBlur,\n      onClick: handleMenuItem(key),\n      valueName: adParams[key] ? adParams[key].name : data[0].name\n    }));\n  } else if (!isNotEmptyArray) {\n    var _adParams$key;\n\n    fields = __jsx(React.Fragment, null, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, key, isRequired(key) && !isPreview && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\"), adParamsError && adParamsTouched && adParamsError[key] && adParamsTouched[key] && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \" \", adParamsError[key])), isPreview ? __jsx(Typography, null, typeof adParams[key] === 'string' ? adParams[key] : adParams[key].name) : __jsx(TextField, {\n      fullWidth: true,\n      name: key,\n      variant: \"outlined\",\n      value: (_adParams$key = adParams[key]) !== null && _adParams$key !== void 0 ? _adParams$key : '',\n      onChange: handleParamsInput(key),\n      className: adParamsError && adParamsTouched && adParamsError[key] && adParamsTouched[key] ? 'error-border' : ''\n    }));\n  }\n\n  fields = fields ? __jsx(Grid, {\n    item: true,\n    container: true,\n    xs: 12,\n    className: classes.gridItem,\n    sm: isSpecialRows && !isPreview || isOptions ? 12 : 6\n  }, fields) : __jsx(React.Fragment, null);\n  return fields;\n};\n\n_s(AdvrtParameter, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = AdvrtParameter;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdvrtParameter\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_params/AdvrtParameter.tsx"],"names":["React","Grid","TextField","Typography","isRequired","CustomCheckbox","CustomMenu","useStyles","AdvrtParameter","props","key","data","errors","onBlur","values","touched","isPreview","handleMenuItem","handleListItem","handleParamsInput","handleParamsCheckbox","adParams","adParamsError","adParamsTouched","isOptions","isSpecialRows","isNotEmptyArray","Array","isArray","length","isDataObject","fields","classes","id","map","item","selected","name","width","height","backgroundColor","hex_color_code","display","alignItems","some","val","gridItem"],"mappings":"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","sourcesContent":["import React, {FC} from \"react\";\r\nimport {Grid, TextField, Typography} from \"@material-ui/core\";\r\nimport {isRequired} from \"@root/validation_schemas/createAdvrtSchema\";\r\nimport {CustomCheckbox} from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {useStyles} from \"./useStyles\";\r\n\r\n\r\nexport const AdvrtParameter: FC<any> = (props) => {\r\n    const {\r\n        key,\r\n        data,\r\n        errors,\r\n        onBlur,\r\n        values,\r\n        touched,\r\n        isPreview,\r\n        handleMenuItem,\r\n        handleListItem,\r\n        handleParamsInput,\r\n        handleParamsCheckbox,\r\n    } = props;\r\n\r\n    const {adParams} = values;\r\n\r\n    const adParamsError = errors.adParams;\r\n    const adParamsTouched = touched.adParams;\r\n\r\n    const isOptions = key === 'safety'\r\n        || key === 'multimedia'\r\n        || key === 'assistant'\r\n        || key === 'exterior'\r\n        || key === 'car_climate'\r\n        || key === 'airbags';\r\n\r\n    const isSpecialRows = key === 'body' || key === 'colors' || isOptions;\r\n\r\n    const isNotEmptyArray = Array.isArray(data) && data.length;\r\n    const isDataObject = typeof data === 'object' && !Array.isArray(data);\r\n\r\n    let fields;\r\n\r\n    const classes = useStyles({isPreview});\r\n    if (isSpecialRows && isNotEmptyArray) {\r\n        fields = <>\r\n            <Typography variant=\"subtitle1\">\r\n                <strong>\r\n                    {key}\r\n                </strong>\r\n                {\r\n                    isRequired(key)\r\n                    && <span className='error-text'>*</span>\r\n                }\r\n                {\r\n                    adParamsError\r\n                    && adParamsTouched\r\n                    && adParamsError[key]\r\n                    && adParamsTouched[key]\r\n                    && adParamsTouched[key].id\r\n                    && <span className='error-text'> {adParamsError[key].id}</span>\r\n                }\r\n            </Typography>\r\n            <div className='row-list'>\r\n                {data.map(item => (\r\n                    <div key={item.id}>\r\n                        {\r\n                            key === 'body'\r\n                                ? <div\r\n                                    onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                    className={\r\n                                        adParams[key]\r\n                                        && adParams[key].id === item.id ? classes.selected : ''\r\n                                    }\r\n                                >\r\n                                    {/*<img src={item.icon.url} alt={item.name}/>*/}\r\n                                    <Typography>{item.name}</Typography>\r\n                                </div>\r\n                                : <>\r\n                                    {key === 'colors'\r\n                                        ? <div\r\n                                            onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                            className={adParams[key] && adParams[key].id === item.id ? classes.selected : ''}\r\n                                            style={{\r\n                                                width: '50px',\r\n                                                height: '50px',\r\n                                                backgroundColor: `${item.hex_color_code}`,\r\n                                            }}\r\n                                        />\r\n                                        : <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                            <CustomCheckbox\r\n                                                disabled={isPreview}\r\n                                                checked={\r\n                                                    adParams[key] && adParams[key].some(val => val.id === item.id)\r\n                                                }\r\n                                                onChange={handleParamsCheckbox(key, item)}\r\n                                            />\r\n                                            <Typography>{item.name}</Typography>\r\n                                        </div>}\r\n                                </>\r\n                        }\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </>;\r\n    } else if (isNotEmptyArray) {\r\n        fields = <>\r\n            <Typography variant=\"subtitle1\">\r\n                <strong>\r\n                    {key}\r\n                    {\r\n                        isRequired(key)\r\n                        && <span className='error-text'>*</span>\r\n                    }\r\n                </strong>\r\n                {\r\n                    adParamsError\r\n                    && adParamsTouched\r\n                    && adParamsError[key]\r\n                    && adParamsTouched[key]\r\n                    && adParamsTouched[key].id\r\n                    && <span className='error-text'> {adParamsError[key].id}</span>\r\n                }\r\n            </Typography>\r\n            <CustomMenu\r\n                className={\r\n                    adParamsError\r\n                    && adParamsTouched\r\n                    && adParamsError[key]\r\n                    && adParamsTouched[key] ? 'error-border' : ''\r\n                }\r\n                name={key}\r\n                items={key !== 'condition' ? [{id: null, name: 'Не выбрано'}, ...data] : data}\r\n                onBlur={onBlur}\r\n                onClick={handleMenuItem(key)}\r\n                valueName={adParams[key] ? adParams[key].name : data[0].name}\r\n            />\r\n        </>;\r\n    } else if (!isNotEmptyArray) {\r\n        fields = <>\r\n            <Typography variant=\"subtitle1\">\r\n                {key}\r\n                {\r\n                    isRequired(key)\r\n                    && !isPreview\r\n                    && <span className='error-text'>*</span>\r\n                }\r\n                {\r\n                    adParamsError\r\n                    && adParamsTouched\r\n                    && adParamsError[key]\r\n                    && adParamsTouched[key]\r\n                    && <span className='error-text'> {adParamsError[key]}</span>\r\n                }\r\n            </Typography>\r\n            {isPreview\r\n                ? <Typography>{typeof adParams[key] === 'string' ? adParams[key] : adParams[key].name}</Typography>\r\n                : <TextField\r\n                    fullWidth\r\n                    name={key}\r\n                    variant='outlined'\r\n                    value={adParams[key] ?? ''}\r\n                    onChange={handleParamsInput(key)}\r\n                    className={\r\n                        adParamsError\r\n                        && adParamsTouched\r\n                        && adParamsError[key]\r\n                        && adParamsTouched[key]\r\n                            ? 'error-border'\r\n                            : ''\r\n                    }\r\n                />}\r\n        </>\r\n    }\r\n    fields = fields\r\n        ? <Grid\r\n            item\r\n            container\r\n            xs={12}\r\n            className={classes.gridItem}\r\n            sm={isSpecialRows && !isPreview || isOptions ? 12 : 6}\r\n        >\r\n            {fields}\r\n        </Grid>\r\n        : <></>\r\n\r\n    return fields;\r\n}"]},"metadata":{},"sourceType":"module"}