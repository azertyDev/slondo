{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Grid, TextField, Typography } from \"@material-ui/core\";\nimport { isRequired } from \"@root/validation_schemas/createAdvrtSchema\";\nimport { CustomCheckbox } from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { autoSelectKeys, textFieldKeys } from \"../AdvrtFormContainer\";\nimport { useStyles } from \"./useStyles\";\nexport var AdvrtParameter = function AdvrtParameter(props) {\n  _s();\n\n  var keyName = props.keyName,\n      data = props.data,\n      errors = props.errors,\n      onBlur = props.onBlur,\n      values = props.values,\n      touched = props.touched,\n      isPreview = props.isPreview,\n      handleMenuItem = props.handleMenuItem,\n      handleListItem = props.handleListItem,\n      handleInput = props.handleInput,\n      handleParamsCheckbox = props.handleParamsCheckbox;\n  var adParams = values.adParams;\n  var adParamsError = errors.adParams;\n  var adParamsTouched = touched.adParams;\n  var isOptions = keyName === 'safety' || keyName === 'multimedia' || keyName === 'assistant' || keyName === 'exterior' || keyName === 'car_climate' || keyName === 'airbags';\n  var isSpecialRows = keyName === 'body' || keyName === 'colors' || isOptions;\n  var isNotEmptyArray = Array.isArray(data) && data.length !== 0;\n  var isTextFieldKey = textFieldKeys.some(function (k) {\n    return k === keyName;\n  });\n  var fields;\n  var classes = useStyles({\n    isPreview: isPreview\n  });\n\n  if (isSpecialRows && isNotEmptyArray) {\n    fields = __jsx(React.Fragment, null, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, __jsx(\"strong\", null, keyName), isRequired(keyName) && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\"), adParamsError && adParamsTouched && adParamsError[keyName] && adParamsTouched[keyName] && adParamsTouched[keyName].id && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \" \", adParamsError[keyName].id)), __jsx(\"div\", {\n      className: \"row-list\"\n    }, data.map(function (item) {\n      return __jsx(\"div\", {\n        key: item.id\n      }, keyName === 'body' ? __jsx(\"div\", {\n        onClick: !isPreview ? handleListItem(keyName, item) : null,\n        className: adParams[keyName] && adParams[keyName].id === item.id ? classes.selected : ''\n      }, __jsx(Typography, null, item.name)) : __jsx(React.Fragment, null, keyName === 'colors' ? __jsx(\"div\", {\n        onClick: !isPreview ? handleListItem(keyName, item) : null,\n        className: adParams[keyName] && adParams[keyName].id === item.id ? classes.selected : '',\n        style: {\n          width: '50px',\n          height: '50px',\n          backgroundColor: \"\".concat(item.hex_color_code)\n        }\n      }) : __jsx(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        }\n      }, __jsx(CustomCheckbox, {\n        disabled: isPreview,\n        checked: adParams[keyName] && adParams[keyName].some(function (val) {\n          return val.id === item.id;\n        }),\n        onChange: handleParamsCheckbox(keyName, item)\n      }), __jsx(Typography, null, item.name))));\n    })));\n  } else if (isNotEmptyArray) {\n    var _adParams$;\n\n    var list = autoSelectKeys.some(function (k) {\n      return k === keyName;\n    }) ? data : [{\n      id: null,\n      name: 'Не выбрано'\n    }].concat(_toConsumableArray(data));\n    fields = __jsx(React.Fragment, null, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, __jsx(\"strong\", null, keyName, isRequired(keyName) && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\")), adParamsError && adParamsTouched && adParamsError[\"\".concat(keyName, \"_value\")] && adParamsTouched[\"\".concat(keyName, \"_value\")] && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \" \", adParamsError[keyName])), __jsx(Grid, {\n      container: true\n    }, isTextFieldKey && __jsx(Grid, {\n      item: true,\n      xs: 9\n    }, __jsx(TextField, {\n      fullWidth: true,\n      variant: \"outlined\",\n      value: (_adParams$ = adParams[\"\".concat(keyName, \"_value\")]) !== null && _adParams$ !== void 0 ? _adParams$ : '',\n      onChange: handleInput(\"\".concat(keyName, \"_value\")),\n      className: adParamsError && adParamsTouched && adParamsError[\"\".concat(keyName, \"_value\")] && adParamsTouched[\"\".concat(keyName, \"_value\")] ? 'error-border' : ''\n    })), __jsx(Grid, {\n      item: true,\n      xs: isTextFieldKey ? 3 : 12\n    }, __jsx(CustomMenu, {\n      name: keyName,\n      onBlur: onBlur,\n      onClick: handleMenuItem(keyName),\n      className: adParamsError && adParamsTouched && adParamsError[keyName] && adParamsTouched[keyName] ? 'error-border' : '',\n      valueName: adParams[keyName] ? adParams[keyName].name : list[0].name,\n      items: list\n    }))));\n  } else if (!Array.isArray(data)) {\n    var _adParams$keyName;\n\n    fields = __jsx(React.Fragment, null, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, keyName, isRequired(keyName) && !isPreview && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\"), adParamsError && adParamsTouched && adParamsError[keyName] && adParamsTouched[keyName] && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \" \", adParamsError[keyName])), isPreview ? __jsx(Typography, null, typeof adParams[keyName] === 'string' ? adParams[keyName] : adParams[keyName].name) : __jsx(TextField, {\n      fullWidth: true,\n      name: keyName,\n      variant: \"outlined\",\n      value: (_adParams$keyName = adParams[keyName]) !== null && _adParams$keyName !== void 0 ? _adParams$keyName : '',\n      onChange: handleInput(keyName),\n      className: adParamsError && adParamsTouched && adParamsError[keyName] && adParamsTouched[keyName] ? 'error-border' : ''\n    }));\n  }\n\n  fields = fields ? __jsx(Grid, {\n    item: true,\n    container: true,\n    xs: 12,\n    className: classes.gridItem,\n    sm: isSpecialRows && !isPreview || isOptions ? 12 : 6\n  }, fields) : __jsx(React.Fragment, null);\n  return fields;\n};\n\n_s(AdvrtParameter, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = AdvrtParameter;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdvrtParameter\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_params/AdvrtParameter.tsx"],"names":["React","Grid","TextField","Typography","isRequired","CustomCheckbox","CustomMenu","autoSelectKeys","textFieldKeys","useStyles","AdvrtParameter","props","keyName","data","errors","onBlur","values","touched","isPreview","handleMenuItem","handleListItem","handleInput","handleParamsCheckbox","adParams","adParamsError","adParamsTouched","isOptions","isSpecialRows","isNotEmptyArray","Array","isArray","length","isTextFieldKey","some","k","fields","classes","id","map","item","selected","name","width","height","backgroundColor","hex_color_code","display","alignItems","val","list","gridItem"],"mappings":"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","sourcesContent":["import React, {FC} from \"react\";\r\nimport {Grid, TextField, Typography} from \"@material-ui/core\";\r\nimport {isRequired} from \"@root/validation_schemas/createAdvrtSchema\";\r\nimport {CustomCheckbox} from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {autoSelectKeys, textFieldKeys} from \"../AdvrtFormContainer\";\r\nimport {useStyles} from \"./useStyles\";\r\n\r\n\r\nexport const AdvrtParameter: FC<any> = (props) => {\r\n    const {\r\n        keyName,\r\n        data,\r\n        errors,\r\n        onBlur,\r\n        values,\r\n        touched,\r\n        isPreview,\r\n        handleMenuItem,\r\n        handleListItem,\r\n        handleInput,\r\n        handleParamsCheckbox,\r\n    } = props;\r\n\r\n    const {adParams} = values;\r\n\r\n    const adParamsError = errors.adParams;\r\n    const adParamsTouched = touched.adParams;\r\n\r\n    const isOptions = keyName === 'safety'\r\n        || keyName === 'multimedia'\r\n        || keyName === 'assistant'\r\n        || keyName === 'exterior'\r\n        || keyName === 'car_climate'\r\n        || keyName === 'airbags';\r\n\r\n    const isSpecialRows = keyName === 'body' || keyName === 'colors' || isOptions;\r\n\r\n    const isNotEmptyArray = Array.isArray(data) && data.length !== 0;\r\n    const isTextFieldKey = textFieldKeys.some(k => k === keyName);\r\n\r\n    let fields;\r\n\r\n    const classes = useStyles({isPreview});\r\n    if (isSpecialRows && isNotEmptyArray) {\r\n        fields = <>\r\n            <Typography variant=\"subtitle1\">\r\n                <strong>\r\n                    {keyName}\r\n                </strong>\r\n                {\r\n                    isRequired(keyName)\r\n                    && <span className='error-text'>*</span>\r\n                }\r\n                {\r\n                    adParamsError\r\n                    && adParamsTouched\r\n                    && adParamsError[keyName]\r\n                    && adParamsTouched[keyName]\r\n                    && adParamsTouched[keyName].id\r\n                    && <span className='error-text'> {adParamsError[keyName].id}</span>\r\n                }\r\n            </Typography>\r\n            <div className='row-list'>\r\n                {data.map(item => (\r\n                    <div key={item.id}>\r\n                        {\r\n                            keyName === 'body'\r\n                                ? <div\r\n                                    onClick={!isPreview ? handleListItem(keyName, item) : null}\r\n                                    className={\r\n                                        adParams[keyName]\r\n                                        && adParams[keyName].id === item.id ? classes.selected : ''\r\n                                    }\r\n                                >\r\n                                    {/*<img src={item.icon.url} alt={item.name}/>*/}\r\n                                    <Typography>{item.name}</Typography>\r\n                                </div>\r\n                                : <>\r\n                                    {keyName === 'colors'\r\n                                        ? <div\r\n                                            onClick={!isPreview ? handleListItem(keyName, item) : null}\r\n                                            className={adParams[keyName] && adParams[keyName].id === item.id ? classes.selected : ''}\r\n                                            style={{\r\n                                                width: '50px',\r\n                                                height: '50px',\r\n                                                backgroundColor: `${item.hex_color_code}`,\r\n                                            }}\r\n                                        />\r\n                                        : <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                            <CustomCheckbox\r\n                                                disabled={isPreview}\r\n                                                checked={\r\n                                                    adParams[keyName] && adParams[keyName].some(val => val.id === item.id)\r\n                                                }\r\n                                                onChange={handleParamsCheckbox(keyName, item)}\r\n                                            />\r\n                                            <Typography>{item.name}</Typography>\r\n                                        </div>}\r\n                                </>\r\n                        }\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </>;\r\n    } else if (isNotEmptyArray) {\r\n        const list = autoSelectKeys.some(k => k === keyName)\r\n            ? data\r\n            : [{id: null, name: 'Не выбрано'}, ...data];\r\n\r\n        fields = <>\r\n            <Typography variant=\"subtitle1\">\r\n                <strong>\r\n                    {keyName}\r\n                    {\r\n                        isRequired(keyName)\r\n                        && <span className='error-text'>*</span>\r\n                    }\r\n                </strong>\r\n                {\r\n                    adParamsError\r\n                    && adParamsTouched\r\n                    && adParamsError[`${keyName}_value`]\r\n                    && adParamsTouched[`${keyName}_value`]\r\n                    && <span className='error-text'> {adParamsError[keyName]}</span>\r\n                }\r\n            </Typography>\r\n            <Grid container>\r\n                {isTextFieldKey && (\r\n                    <Grid item xs={9}>\r\n                        <TextField\r\n                            fullWidth\r\n                            variant='outlined'\r\n                            value={adParams[`${keyName}_value`] ?? ''}\r\n                            onChange={handleInput(`${keyName}_value`)}\r\n                            className={\r\n                                adParamsError\r\n                                && adParamsTouched\r\n                                && adParamsError[`${keyName}_value`]\r\n                                && adParamsTouched[`${keyName}_value`] ? 'error-border' : ''\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                )}\r\n                <Grid item xs={isTextFieldKey ? 3 : 12}>\r\n                    <CustomMenu\r\n                        name={keyName}\r\n                        onBlur={onBlur}\r\n                        onClick={handleMenuItem(keyName)}\r\n                        className={\r\n                            adParamsError\r\n                            && adParamsTouched\r\n                            && adParamsError[keyName]\r\n                            && adParamsTouched[keyName] ? 'error-border' : ''\r\n                        }\r\n                        valueName={\r\n                            adParams[keyName]\r\n                                ? adParams[keyName].name\r\n                                : list[0].name\r\n                        }\r\n                        items={list}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </>;\r\n    } else if (!Array.isArray(data)) {\r\n        fields = <>\r\n            <Typography variant=\"subtitle1\">\r\n                {keyName}\r\n                {\r\n                    isRequired(keyName)\r\n                    && !isPreview\r\n                    && <span className='error-text'>*</span>\r\n                }\r\n                {\r\n                    adParamsError\r\n                    && adParamsTouched\r\n                    && adParamsError[keyName]\r\n                    && adParamsTouched[keyName]\r\n                    && <span className='error-text'> {adParamsError[keyName]}</span>\r\n                }\r\n            </Typography>\r\n            {isPreview\r\n                ? <Typography>\r\n                    {typeof adParams[keyName] === 'string'\r\n                        ? adParams[keyName]\r\n                        : adParams[keyName].name}\r\n                </Typography>\r\n                : <TextField\r\n                    fullWidth\r\n                    name={keyName}\r\n                    variant='outlined'\r\n                    value={adParams[keyName] ?? ''}\r\n                    onChange={handleInput(keyName)}\r\n                    className={\r\n                        adParamsError\r\n                        && adParamsTouched\r\n                        && adParamsError[keyName]\r\n                        && adParamsTouched[keyName] ? 'error-border' : ''\r\n                    }\r\n                />}\r\n        </>\r\n    }\r\n    fields = fields\r\n        ? <Grid\r\n            item\r\n            container\r\n            xs={12}\r\n            className={classes.gridItem}\r\n            sm={isSpecialRows && !isPreview || isOptions ? 12 : 6}\r\n        >\r\n            {fields}\r\n        </Grid>\r\n        : <></>\r\n\r\n    return fields;\r\n}"]},"metadata":{},"sourceType":"module"}