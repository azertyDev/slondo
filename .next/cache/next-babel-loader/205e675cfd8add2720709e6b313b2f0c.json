{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { isRequired } from \"@root/validation_schemas/createAdvrtSchema\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CustomCheckbox } from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport React from \"react\";\nimport { useStyles } from \"./useStyles\";\nexport var AdvrtParams = function AdvrtParams(props) {\n  _s();\n\n  var list = props.list,\n      errors = props.errors,\n      touched = props.touched,\n      isPreview = props.isPreview,\n      onBlur = props.onBlur,\n      values = props.values,\n      handleMenuItem = props.handleMenuItem,\n      handleListItem = props.handleListItem,\n      handleParamsCheckbox = props.handleParamsCheckbox;\n  var key = list.key,\n      data = list.data;\n  var adParams = values.adParams;\n\n  if (key === 'adsParams' && data.length) {\n    key = 'condition';\n    data = data[0][key];\n  }\n\n  var isExcludedRows = key !== 'year' && key !== 'mileage';\n  var isOptions = key === 'safety' || key === 'multimedia' || key === 'assistant' || key === 'exterior';\n  var isSpecialRows = key === 'body' || key === 'colors' || isOptions;\n  var fields = null;\n  var classes = useStyles({\n    isPreview: isPreview\n  });\n\n  if (isExcludedRows && data) {\n    if (isSpecialRows && data.length) {\n      fields = __jsx(React.Fragment, null, __jsx(Typography, {\n        variant: \"subtitle1\"\n      }, key, isRequired(key) && __jsx(\"span\", {\n        className: \"error-text\"\n      }, \"*\"), errors.adParams && errors.adParams[key] && touched.adParams && touched.adParams[key] && touched.adParams[key].id && __jsx(\"span\", {\n        className: \"error-text\"\n      }, \" \", errors.adParams[key].id)), __jsx(\"div\", {\n        className: \"row-list\"\n      }, data.map(function (item) {\n        return __jsx(\"div\", {\n          key: item.id\n        }, key === 'body' ? __jsx(\"div\", {\n          onClick: !isPreview ? handleListItem(key, item) : null,\n          className: adParams[key] && adParams[key].id === item.id ? classes.selected : ''\n        }, __jsx(Typography, null, item.name)) : __jsx(React.Fragment, null, key === 'colors' ? __jsx(\"div\", {\n          onClick: !isPreview ? handleListItem(key, item) : null,\n          className: adParams[key] && adParams[key].id === item.id ? classes.selected : '',\n          style: {\n            width: '50px',\n            height: '50px',\n            backgroundColor: \"\".concat(item.hex_color_code)\n          }\n        }) : __jsx(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center'\n          }\n        }, __jsx(CustomCheckbox, {\n          disabled: isPreview,\n          checked: adParams[key] && adParams[key].some(function (val) {\n            return val.id === item.id;\n          }),\n          onChange: handleParamsCheckbox(key, item)\n        }), __jsx(Typography, null, item.name))));\n      })));\n    } else {\n      if (!Array.isArray(data)) {\n        fields = __jsx(React.Fragment, null, __jsx(Typography, {\n          variant: \"subtitle1\"\n        }, key), key === 'body' ? __jsx(Typography, null, data.name) : key === 'colors' ? __jsx(\"div\", {\n          style: {\n            width: '50px',\n            height: '50px',\n            backgroundColor: \"\".concat(data.hex_color_code)\n          }\n        }) : __jsx(Typography, null, data.name));\n      } else if (data.length) {\n        if (key !== 'condition') data = [{\n          id: null,\n          name: 'Не выбрано'\n        }].concat(_toConsumableArray(data));\n        fields = __jsx(React.Fragment, null, __jsx(Typography, {\n          variant: \"subtitle1\"\n        }, __jsx(\"strong\", null, key, isRequired(key) && __jsx(\"span\", {\n          className: \"error-text\"\n        }, \"*\")), errors.adParams && touched.adParams && errors.adParams[key] && touched.adParams[key] && touched.adParams[key].id && __jsx(\"span\", {\n          className: \"error-text\"\n        }, \" \", errors.adParams[key].id)), __jsx(CustomMenu, {\n          className: errors.adParams && touched.adParams && errors.adParams[key] && touched.adParams[key] ? 'error-border' : '',\n          name: key,\n          onBlur: onBlur,\n          items: data,\n          valueName: adParams[key] ? adParams[key].name : data[0].name,\n          onClick: handleMenuItem(key)\n        }));\n      }\n    }\n\n    fields = fields ? __jsx(Grid, {\n      item: true,\n      container: true,\n      className: classes.gridItem,\n      key: key,\n      xs: 12,\n      sm: isSpecialRows && !isPreview || isOptions ? 12 : 6\n    }, fields) : __jsx(React.Fragment, null);\n  }\n\n  return fields;\n};\n\n_s(AdvrtParams, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = AdvrtParams;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdvrtParams\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_params/AdvrtParams.tsx"],"names":["isRequired","Grid","Typography","CustomCheckbox","CustomMenu","React","useStyles","AdvrtParams","props","list","errors","touched","isPreview","onBlur","values","handleMenuItem","handleListItem","handleParamsCheckbox","key","data","adParams","length","isExcludedRows","isOptions","isSpecialRows","fields","classes","id","map","item","selected","name","width","height","backgroundColor","hex_color_code","display","alignItems","some","val","Array","isArray","gridItem"],"mappings":"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","sourcesContent":["import {isRequired} from \"@root/validation_schemas/createAdvrtSchema\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {CustomCheckbox} from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport React, {FC} from \"react\";\r\nimport {useStyles} from \"./useStyles\";\r\n\r\n\r\nexport const AdvrtParams: FC<any> = (props) => {\r\n    const {\r\n        list,\r\n        errors,\r\n        touched,\r\n        isPreview,\r\n        onBlur,\r\n        values,\r\n        handleMenuItem,\r\n        handleListItem,\r\n        handleParamsCheckbox,\r\n    } = props;\r\n\r\n    let {key, data} = list;\r\n    const {adParams} = values;\r\n\r\n    if (key === 'adsParams' && data.length) {\r\n        key = 'condition';\r\n        data = data[0][key];\r\n    }\r\n\r\n    const isExcludedRows = key !== 'year' && key !== 'mileage';\r\n\r\n    const isOptions = key === 'safety'\r\n        || key === 'multimedia'\r\n        || key === 'assistant'\r\n        || key === 'exterior';\r\n\r\n    const isSpecialRows = key === 'body' || key === 'colors' || isOptions;\r\n\r\n    let fields = null;\r\n\r\n    const classes = useStyles({isPreview});\r\n    if (isExcludedRows && data) {\r\n        if (isSpecialRows && data.length) {\r\n            fields = (\r\n                <>\r\n                    <Typography variant=\"subtitle1\">\r\n                        {key}\r\n                        {\r\n                            isRequired(key)\r\n                            && <span className='error-text'>*</span>\r\n                        }\r\n                        {\r\n                            errors.adParams\r\n                            && errors.adParams[key]\r\n                            && touched.adParams\r\n                            && touched.adParams[key]\r\n                            && touched.adParams[key].id\r\n                            && <span className='error-text'> {errors.adParams[key].id}</span>\r\n                        }\r\n                    </Typography>\r\n                    <div className='row-list'>\r\n                        {\r\n                            data.map(item => (\r\n                                <div key={item.id}>\r\n                                    {\r\n                                        key === 'body'\r\n                                            ? <div\r\n                                                onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                                className={\r\n                                                    adParams[key]\r\n                                                    && adParams[key].id === item.id\r\n                                                        ? classes.selected : ''\r\n                                                }\r\n                                            >\r\n                                                {/*<img src={item.icon.url} alt={item.name}/>*/}\r\n                                                <Typography>{item.name}</Typography>\r\n                                            </div>\r\n                                            : <>\r\n                                                {\r\n                                                    key === 'colors'\r\n                                                        ? <div\r\n                                                            onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                                            className={adParams[key] && adParams[key].id === item.id ? classes.selected : ''}\r\n                                                            style={{\r\n                                                                width: '50px',\r\n                                                                height: '50px',\r\n                                                                backgroundColor: `${item.hex_color_code}`,\r\n                                                            }}\r\n                                                        />\r\n                                                        : <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                            <CustomCheckbox\r\n                                                                disabled={isPreview}\r\n                                                                checked={\r\n                                                                    adParams[key] && adParams[key].some(val => val.id === item.id)\r\n                                                                }\r\n                                                                onChange={handleParamsCheckbox(key, item)}\r\n                                                            />\r\n                                                            <Typography>{item.name}</Typography>\r\n                                                        </div>\r\n                                                }\r\n                                            </>\r\n                                    }\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </>\r\n            );\r\n        } else {\r\n            if (!Array.isArray(data)) {\r\n                fields = (\r\n                    <>\r\n                        <Typography variant=\"subtitle1\">\r\n                            {key}\r\n                        </Typography>\r\n                        {\r\n                            key === 'body'\r\n                                ? <Typography>{data.name}</Typography>\r\n                                : key === 'colors'\r\n                                ? <div\r\n                                    style={{\r\n                                        width: '50px',\r\n                                        height: '50px',\r\n                                        backgroundColor: `${data.hex_color_code}`\r\n                                    }}\r\n                                />\r\n                                : <Typography>{data.name}</Typography>\r\n                        }\r\n                    </>\r\n                );\r\n            } else if (data.length) {\r\n                if (key !== 'condition') data = [{id: null, name: 'Не выбрано'}, ...data];\r\n                fields = (\r\n                    <>\r\n                        <Typography variant=\"subtitle1\">\r\n                            <strong>\r\n                                {key}\r\n                                {\r\n                                    isRequired(key)\r\n                                    && <span className='error-text'>*</span>\r\n                                }\r\n                            </strong>\r\n                            {\r\n                                errors.adParams\r\n                                && touched.adParams\r\n                                && errors.adParams[key]\r\n                                && touched.adParams[key]\r\n                                && touched.adParams[key].id\r\n                                && <span className='error-text'> {errors.adParams[key].id}</span>\r\n                            }\r\n                        </Typography>\r\n                        <CustomMenu\r\n                            className={\r\n                                errors.adParams\r\n                                && touched.adParams\r\n                                && errors.adParams[key]\r\n                                && touched.adParams[key] ? 'error-border' : ''\r\n                            }\r\n                            name={key}\r\n                            onBlur={onBlur}\r\n                            items={data}\r\n                            valueName={adParams[key] ? adParams[key].name : data[0].name}\r\n                            onClick={handleMenuItem(key)}\r\n                        />\r\n                    </>\r\n                );\r\n            }\r\n        }\r\n        fields = fields\r\n            ? <Grid\r\n                item\r\n                container\r\n                className={classes.gridItem}\r\n                key={key}\r\n                xs={12}\r\n                sm={isSpecialRows && !isPreview || isOptions ? 12 : 6}\r\n            >\r\n                {fields}\r\n            </Grid>\r\n            : <></>\r\n    }\r\n\r\n    return fields;\r\n}"]},"metadata":{},"sourceType":"module"}