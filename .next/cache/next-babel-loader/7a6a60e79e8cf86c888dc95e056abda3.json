{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from '@src/api/api';\nconst initialState = {\n  isFetch: false,\n  error: null,\n  itemsPerPage: null,\n  data: {\n    data: [{\n      id: null,\n      title: '',\n      location: '',\n      safe_deal: false,\n      created_at: '',\n      total: null,\n      currency: {\n        id: null,\n        name: ''\n      },\n      images: [{\n        id: null,\n        url: ''\n      }]\n    }]\n  }\n}; // Async thunk\n\nexport const fetchCardData = createAsyncThunk('cardData/fetchCardData', async ({\n  itemsPerPage,\n  page,\n  type\n}, {\n  rejectWithValue\n}) => {\n  try {\n    return await userAPI.getCardData(itemsPerPage, page, type);\n  } catch (e) {\n    return rejectWithValue(e.message);\n  }\n}); // Slice\n\nconst cardDataSlice = createSlice({\n  name: 'cardData',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchCardData.pending, state => {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchCardData.fulfilled, (state, action) => {\n      state.isFetch = false;\n      state.data = action.payload;\n    });\n    builder.addCase(fetchCardData.rejected, (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const cardDataReducer = cardDataSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/cardDataSlice.ts"],"names":["createAsyncThunk","createSlice","userAPI","initialState","isFetch","error","itemsPerPage","data","id","title","location","safe_deal","created_at","total","currency","name","images","url","fetchCardData","page","type","rejectWithValue","getCardData","e","message","cardDataSlice","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","cardDataReducer","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAAQC,OAAR,QAAsB,cAAtB;AAGA,MAAMC,YAAsB,GAAG;AAC3BC,EAAAA,OAAO,EAAE,KADkB;AAE3BC,EAAAA,KAAK,EAAE,IAFoB;AAG3BC,EAAAA,YAAY,EAAE,IAHa;AAI3BC,EAAAA,IAAI,EAAE;AACFA,IAAAA,IAAI,EAAE,CACF;AACIC,MAAAA,EAAE,EAAE,IADR;AAEIC,MAAAA,KAAK,EAAE,EAFX;AAGIC,MAAAA,QAAQ,EAAE,EAHd;AAIIC,MAAAA,SAAS,EAAE,KAJf;AAKIC,MAAAA,UAAU,EAAE,EALhB;AAMIC,MAAAA,KAAK,EAAE,IANX;AAOIC,MAAAA,QAAQ,EAAE;AACNN,QAAAA,EAAE,EAAE,IADE;AAENO,QAAAA,IAAI,EAAE;AAFA,OAPd;AAWIC,MAAAA,MAAM,EAAE,CACJ;AACIR,QAAAA,EAAE,EAAE,IADR;AAEIS,QAAAA,GAAG,EAAE;AAFT,OADI;AAXZ,KADE;AADJ;AAJqB,CAA/B,C,CA4BA;;AACA,OAAO,MAAMC,aAAa,GAAGlB,gBAAgB,CACzC,wBADyC,EAEzC,OAAO;AAACM,EAAAA,YAAD;AAAea,EAAAA,IAAf;AAAqBC,EAAAA;AAArB,CAAP,EAAmC;AAACC,EAAAA;AAAD,CAAnC,KAAyD;AACrD,MAAI;AACA,WAAO,MAAMnB,OAAO,CAACoB,WAAR,CAAoBhB,YAApB,EAAkCa,IAAlC,EAAwCC,IAAxC,CAAb;AACH,GAFD,CAEE,OAAOG,CAAP,EAAU;AACR,WAAOF,eAAe,CAACE,CAAC,CAACC,OAAH,CAAtB;AACH;AACJ,CARwC,CAAtC,C,CAWP;;AACA,MAAMC,aAAa,GAAGxB,WAAW,CAAC;AAC9Bc,EAAAA,IAAI,EAAE,UADwB;AAE9BZ,EAAAA,YAF8B;AAG9BuB,EAAAA,QAAQ,EAAE,EAHoB;AAI9BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBX,aAAa,CAACY,OAA9B,EAAwCC,KAAD,IAAW;AAC9CA,MAAAA,KAAK,CAAC3B,OAAN,GAAgB,IAAhB;AACA2B,MAAAA,KAAK,CAAC1B,KAAN,GAAc,IAAd;AACH,KAHD;AAIAuB,IAAAA,OAAO,CAACC,OAAR,CAAgBX,aAAa,CAACc,SAA9B,EAAyC,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACxDF,MAAAA,KAAK,CAAC3B,OAAN,GAAgB,KAAhB;AACA2B,MAAAA,KAAK,CAACxB,IAAN,GAAa0B,MAAM,CAACC,OAApB;AACH,KAHD;AAIAN,IAAAA,OAAO,CAACC,OAAR,CAAgBX,aAAa,CAACiB,QAA9B,EAAwC,CAACJ,KAAD,EAAQE,MAAR,KAAmB;AACvDF,MAAAA,KAAK,CAAC3B,OAAN,GAAgB,KAAhB;AACA2B,MAAAA,KAAK,CAAC1B,KAAN,GAAc4B,MAAM,CAACC,OAArB;AACH,KAHD;AAIH;AAjB6B,CAAD,CAAjC;AAoBA,OAAO,MAAME,eAAe,GAAGX,aAAa,CAACY,OAAtC","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {userAPI} from '@src/api/api';\r\nimport {CardData, FetchCardData} from '@root/interfaces/CardData';\r\n\r\nconst initialState: CardData = {\r\n    isFetch: false,\r\n    error: null,\r\n    itemsPerPage: null,\r\n    data: {\r\n        data: [\r\n            {\r\n                id: null,\r\n                title: '',\r\n                location: '',\r\n                safe_deal: false,\r\n                created_at: '',\r\n                total: null,\r\n                currency: {\r\n                    id: null,\r\n                    name: '',\r\n                },\r\n                images: [\r\n                    {\r\n                        id: null,\r\n                        url: '',\r\n                    },\r\n                ],\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\n// Async thunk\r\nexport const fetchCardData = createAsyncThunk<any, FetchCardData>(\r\n    'cardData/fetchCardData',\r\n    async ({itemsPerPage, page, type}, {rejectWithValue}) => {\r\n        try {\r\n            return await userAPI.getCardData(itemsPerPage, page, type);\r\n        } catch (e) {\r\n            return rejectWithValue(e.message);\r\n        }\r\n    },\r\n);\r\n\r\n// Slice\r\nconst cardDataSlice = createSlice({\r\n    name: 'cardData',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchCardData.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        });\r\n        builder.addCase(fetchCardData.fulfilled, (state, action) => {\r\n            state.isFetch = false;\r\n            state.data = action.payload;\r\n        });\r\n        builder.addCase(fetchCardData.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        });\r\n    },\r\n});\r\n\r\nexport const cardDataReducer = cardDataSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}