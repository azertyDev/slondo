{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { TOTAL_FILE_SIZE_LIMIT } from '@root/src/constants';\nimport React from 'react';\nimport { DragDropContext, Droppable, Draggable, resetServerContext } from 'react-beautiful-dnd';\nimport { useStyles } from './useStyles';\nresetServerContext();\nexport const PreviewPhotos = props => {\n  const {\n    images,\n    setImages\n  } = props;\n\n  const handleOnDragEnd = result => {\n    if (!result.destination) return;\n    const items = Array.from(images);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    setImages(items);\n  };\n\n  const handleUploadFile = ({\n    target\n  }) => {\n    if (target.files[0] && images.length < 3) {\n      const totalSize = images.reduce((total, img) => total + img.file.size, 0);\n\n      if (totalSize + target.files[0].size < TOTAL_FILE_SIZE_LIMIT) {\n        setImages([{\n          file: target.files[0],\n          img: URL.createObjectURL(target.files[0])\n        }, ...images]);\n      }\n    }\n  };\n\n  console.log(images);\n  const classes = useStyles();\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"input\", {\n    type: \"file\",\n    onChange: handleUploadFile,\n    accept: \"image/x-png,image/jpeg\"\n  }), __jsx(DragDropContext, {\n    onDragEnd: handleOnDragEnd\n  }, __jsx(Droppable, {\n    droppableId: \"images\",\n    direction: \"horizontal\"\n  }, provided => __jsx(\"div\", _extends({\n    className: \"images-wrapper\"\n  }, provided.droppableProps, {\n    ref: provided.innerRef\n  }), images.map(({\n    file,\n    img\n  }, index) => {\n    return __jsx(Draggable, {\n      key: img,\n      draggableId: img,\n      index: index\n    }, provided => __jsx(\"div\", _extends({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps), __jsx(\"img\", {\n      src: img,\n      style: {\n        width: '160px',\n        height: '120px',\n        objectFit: 'cover'\n      },\n      alt: file.name\n    })));\n  }), provided.placeholder))));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/preview_photos/PreviewPhotos.tsx"],"names":["TOTAL_FILE_SIZE_LIMIT","React","DragDropContext","Droppable","Draggable","resetServerContext","useStyles","PreviewPhotos","props","images","setImages","handleOnDragEnd","result","destination","items","Array","from","reorderedItem","splice","source","index","handleUploadFile","target","files","length","totalSize","reduce","total","img","file","size","URL","createObjectURL","console","log","classes","root","provided","droppableProps","innerRef","map","draggableProps","dragHandleProps","width","height","objectFit","name","placeholder"],"mappings":"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","sourcesContent":["import {TOTAL_FILE_SIZE_LIMIT} from '@root/src/constants';\r\nimport React, {Dispatch, FC} from 'react';\r\nimport {DragDropContext, Droppable, Draggable, resetServerContext} from 'react-beautiful-dnd';\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nresetServerContext();\r\n\r\nexport const PreviewPhotos: FC<{ images: [], setImages: Dispatch<any> }> = (props) => {\r\n    const {images, setImages} = props;\r\n\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n\r\n        const items = Array.from(images);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        setImages(items);\r\n    };\r\n\r\n    const handleUploadFile = ({target}) => {\r\n        if (target.files[0] && images.length < 3) {\r\n            const totalSize = images.reduce((total, img: { file: { size: number } }) => total + img.file.size, 0);\r\n            if ((totalSize + target.files[0].size) < TOTAL_FILE_SIZE_LIMIT) {\r\n                setImages([{\r\n                    file: target.files[0],\r\n                    img: URL.createObjectURL(target.files[0])\r\n                },\r\n                    ...images\r\n                ]);\r\n            }\r\n        }\r\n    };\r\n    console.log(images)\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <input type='file' onChange={handleUploadFile} accept=\"image/x-png,image/jpeg\"/>\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId=\"images\" direction=\"horizontal\">\r\n                    {(provided) => (\r\n                        <div className=\"images-wrapper\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                            {images.map(({file, img}: any, index) => {\r\n                                return (\r\n                                    <Draggable key={img} draggableId={img} index={index}>\r\n                                        {(provided) => (\r\n                                            <div\r\n                                                ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                                <img\r\n                                                    src={img}\r\n                                                    style={{width: '160px', height: '120px', objectFit: 'cover'}}\r\n                                                    alt={file.name}\r\n                                                />\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                );\r\n                            })}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}