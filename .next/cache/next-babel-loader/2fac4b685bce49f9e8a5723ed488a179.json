{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { Fragment } from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { CustomCheckbox } from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\nimport { CustomFormikField } from \"@src/components/elements/custom_formik_field/CustomFormikField\";\nimport { requiredFields } from '@root/validation_schemas/createAdvrtSchema';\nimport { useStyles } from './useStyles';\nexport var AdvrtSettingsBlock = function AdvrtSettingsBlock(props) {\n  _s();\n\n  var isPreview = props.isPreview,\n      createAdvrt = props.createAdvrt,\n      values = props.values,\n      setValues = props.setValues,\n      onBlur = props.onBlur,\n      handleMenuItem = props.handleMenuItem,\n      handleListItem = props.handleListItem,\n      handleParamsCheckbox = props.handleParamsCheckbox;\n  var adParams = values.adParams;\n  var data = isPreview ? adParams : createAdvrt.data;\n  var dataKeys = Object.keys(data);\n  var initValues = {};\n  dataKeys.forEach(function (k) {\n    initValues[k] = [{\n      id: null,\n      name: 'Не выбрано'\n    }];\n  }); // console.log(values)\n  // useEffect(() => {\n  //     setValues({...values, adParams: initValues});\n  // }, []);\n\n  var classes = useStyles({\n    isPreview: isPreview\n  });\n  return __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    className: classes.root\n  }, dataKeys.map(function (key) {\n    var _adParams$year, _adParams$mileage;\n\n    return __jsx(Fragment, {\n      key: key\n    }, !isPreview && adParams[key] ? __jsx(React.Fragment, null, listGenerator(data[key], key), Object.keys(adParams[key]).map(function (innerKey) {\n      if (Array.isArray(adParams[key][innerKey]) && adParams[key][innerKey].length) {\n        return listGenerator(adParams[key][innerKey], innerKey);\n      }\n    })) : listGenerator(data[key], key), key === 'body' && __jsx(React.Fragment, null, __jsx(Grid, {\n      item: true,\n      container: true,\n      xs: 12,\n      sm: 6,\n      className: classes.gridItem\n    }, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, \"year\", requiredFields[key] && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\")), isPreview ? __jsx(Typography, null, adParams.year) : __jsx(CustomFormikField, {\n      name: \"year\",\n      placeholder: \"\\u0413\\u043E\\u0434 \\u0432\\u044B\\u043F\\u0443\\u0441\\u043A\\u0430\",\n      value: (_adParams$year = adParams.year) !== null && _adParams$year !== void 0 ? _adParams$year : ''\n    })), __jsx(Grid, {\n      item: true,\n      container: true,\n      xs: 12,\n      sm: 6,\n      className: classes.gridItem\n    }, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, \"mileage\", requiredFields[key] && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\")), isPreview ? __jsx(Typography, null, adParams.mileage) : __jsx(CustomFormikField, {\n      name: \"mileage\",\n      placeholder: \"\\u041F\\u0440\\u043E\\u0431\\u0435\\u0433\",\n      value: (_adParams$mileage = adParams.mileage) !== null && _adParams$mileage !== void 0 ? _adParams$mileage : ''\n    }))));\n  }));\n\n  function listGenerator(data, key) {\n    var fields;\n    var isExcludedRows = key !== 'id' && key !== 'name' && key !== 'avalTime' && key !== 'title' && key !== 'mileage' && key !== 'year' && key !== 'adsParams' && key !== 'adType' && key !== 'price' && key !== 'safe_deal' && key !== 'exchange' && key !== 'delivery' && key !== 'location' && key !== 'currency' && key !== 'phone' && key !== 'description' && key !== 'files';\n    var isOptions = key === 'safety' || key === 'multimedia' || key === 'assistant' || key === 'exterior';\n    var isSpecialRows = key === 'body' || key === 'colors' || isOptions;\n\n    if (isExcludedRows && data) {\n      data = data;\n\n      if (isSpecialRows && data.length) {\n        fields = __jsx(React.Fragment, null, __jsx(Typography, {\n          variant: \"subtitle1\"\n        }, key, requiredFields[key] && __jsx(\"span\", {\n          className: \"error-text\"\n        }, \"*\")), __jsx(\"div\", {\n          className: \"row-list\"\n        }, data.map(function (item) {\n          return __jsx(\"div\", {\n            key: item.id,\n            onClick: !isPreview ? handleListItem(key, item) : null\n          }, key === 'body' ? __jsx(\"div\", {\n            className: adParams[key] && adParams[key].id === item.id ? classes.selected : ''\n          }, __jsx(\"img\", {\n            src: item.icon.url,\n            alt: item.name\n          }), __jsx(Typography, null, item.name)) : key === 'colors' ? __jsx(\"div\", {\n            className: adParams[key] && adParams[key].id === item.id ? classes.selected : '',\n            style: {\n              width: '50px',\n              height: '50px',\n              backgroundColor: \"\".concat(item.hex_color_code)\n            }\n          }) : __jsx(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center'\n            }\n          }, __jsx(CustomCheckbox, {\n            disabled: isPreview // checked={\n            //     adParams[key]\n            //     && adParams[key].some(val => val.id === item.id)\n            // }\n            ,\n            name: key,\n            value: item // onChange={handleParamsCheckbox(key, item)}\n\n          }), __jsx(Typography, null, item.name)));\n        })));\n      } else {\n        if (!Array.isArray(data)) {\n          data = data;\n          fields = __jsx(React.Fragment, null, __jsx(Typography, {\n            variant: \"subtitle1\"\n          }, key, requiredFields[key] && __jsx(\"span\", {\n            className: \"error-text\"\n          }, \"*\")), key === 'body' ? __jsx(Typography, null, data.name) : key === 'colors' ? __jsx(\"div\", {\n            style: {\n              width: '50px',\n              height: '50px',\n              backgroundColor: \"\".concat(data.hex_color_code)\n            }\n          }) : __jsx(Typography, null, data.name));\n        } else if (data.length) {\n          data = [{\n            id: null,\n            name: 'Не выбрано'\n          }].concat(_toConsumableArray(data));\n          fields = __jsx(React.Fragment, null, __jsx(Typography, {\n            variant: \"subtitle1\"\n          }, key, requiredFields[key] && __jsx(\"span\", {\n            className: \"error-text\"\n          }, \"*\")), __jsx(CustomMenu, {\n            valueName: adParams[key] ? adParams[key].name : data[0].name,\n            items: data,\n            onBlur: onBlur,\n            onClick: handleMenuItem(key)\n          }));\n        }\n      }\n\n      return __jsx(Grid, {\n        item: true,\n        container: true,\n        className: classes.gridItem,\n        key: key,\n        xs: 12,\n        sm: isSpecialRows && !isPreview || isOptions ? 12 : 6\n      }, fields);\n    }\n  }\n};\n\n_s(AdvrtSettingsBlock, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = AdvrtSettingsBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdvrtSettingsBlock\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_settings_block/AdvrtSettingsBlock.tsx"],"names":["React","Fragment","Grid","Typography","CustomMenu","CustomCheckbox","CustomFormikField","requiredFields","useStyles","AdvrtSettingsBlock","props","isPreview","createAdvrt","values","setValues","onBlur","handleMenuItem","handleListItem","handleParamsCheckbox","adParams","data","dataKeys","Object","keys","initValues","forEach","k","id","name","classes","root","map","key","listGenerator","innerKey","Array","isArray","length","gridItem","year","mileage","fields","isExcludedRows","isOptions","isSpecialRows","item","selected","icon","url","width","height","backgroundColor","hex_color_code","display","alignItems"],"mappings":"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","sourcesContent":["import React, {FC, Fragment, useEffect} from \"react\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {ItemsType} from \"@root/interfaces/CustomMenuProps\";\r\nimport {CustomCheckbox} from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\r\nimport {CustomFormikField} from \"@src/components/elements/custom_formik_field/CustomFormikField\";\r\nimport {requiredFields} from '@root/validation_schemas/createAdvrtSchema';\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const AdvrtSettingsBlock: FC<any> = (props) => {\r\n    const {\r\n        isPreview,\r\n        createAdvrt,\r\n        values,\r\n        setValues,\r\n        onBlur,\r\n        handleMenuItem,\r\n        handleListItem,\r\n        handleParamsCheckbox\r\n    } = props;\r\n\r\n    const adParams = values.adParams;\r\n\r\n    const data = isPreview ? adParams : createAdvrt.data;\r\n    const dataKeys = Object.keys(data);\r\n\r\n    const initValues = {};\r\n\r\n    dataKeys.forEach(k => {\r\n        initValues[k] = [{id: null, name: 'Не выбрано'}];\r\n    });\r\n\r\n    // console.log(values)\r\n    // useEffect(() => {\r\n    //     setValues({...values, adParams: initValues});\r\n    // }, []);\r\n\r\n    const classes = useStyles({isPreview});\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={1}\r\n            className={classes.root}\r\n        >\r\n            {\r\n                dataKeys.map(key => {\r\n                    return (\r\n                        <Fragment key={key}>\r\n                            {\r\n                                !isPreview && adParams[key]\r\n                                    ? (\r\n                                        <>\r\n                                            {listGenerator(data[key], key)}\r\n                                            {\r\n                                                Object.keys(adParams[key]).map(innerKey => {\r\n                                                    if (Array.isArray(adParams[key][innerKey]) && adParams[key][innerKey].length) {\r\n                                                        return listGenerator(adParams[key][innerKey], innerKey)\r\n                                                    }\r\n                                                })\r\n                                            }\r\n                                        </>\r\n                                    )\r\n                                    : listGenerator(data[key], key)\r\n                            }\r\n                            {\r\n                                key === 'body' && (\r\n                                    <>\r\n                                        <Grid\r\n                                            item\r\n                                            container\r\n                                            xs={12}\r\n                                            sm={6}\r\n                                            className={classes.gridItem}\r\n                                        >\r\n                                            <Typography variant=\"subtitle1\">\r\n                                                year\r\n                                                {requiredFields[key] && (\r\n                                                    <span className='error-text'>\r\n                                                        *\r\n                                                    </span>\r\n                                                )}\r\n                                            </Typography>\r\n                                            {\r\n                                                isPreview\r\n                                                    ? <Typography>{adParams.year}</Typography>\r\n                                                    : <CustomFormikField\r\n                                                        name='year'\r\n                                                        placeholder='Год выпуска'\r\n                                                        value={adParams.year ?? ''}\r\n                                                    />\r\n                                            }\r\n                                        </Grid>\r\n                                        <Grid\r\n                                            item\r\n                                            container\r\n                                            xs={12}\r\n                                            sm={6}\r\n                                            className={classes.gridItem}\r\n                                        >\r\n                                            <Typography variant=\"subtitle1\">\r\n                                                mileage\r\n                                                {requiredFields[key] && (\r\n                                                    <span className='error-text'>\r\n                                                        *\r\n                                                    </span>\r\n                                                )}\r\n                                            </Typography>\r\n                                            {\r\n                                                isPreview\r\n                                                    ? <Typography>{adParams.mileage}</Typography>\r\n                                                    : <CustomFormikField\r\n                                                        name='mileage'\r\n                                                        placeholder='Пробег'\r\n                                                        value={adParams.mileage ?? ''}\r\n                                                    />\r\n                                            }\r\n                                        </Grid>\r\n                                    </>\r\n                                )\r\n                            }\r\n                        </Fragment>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    )\r\n\r\n    function listGenerator(data: ItemsType | ItemsType[], key: string) {\r\n        let fields;\r\n\r\n        const isExcludedRows = key !== 'id'\r\n            && key !== 'name'\r\n            && key !== 'avalTime'\r\n            && key !== 'title'\r\n            && key !== 'mileage'\r\n            && key !== 'year'\r\n            && key !== 'adsParams'\r\n            && key !== 'adType'\r\n            && key !== 'price'\r\n            && key !== 'safe_deal'\r\n            && key !== 'exchange'\r\n            && key !== 'delivery'\r\n            && key !== 'location'\r\n            && key !== 'currency'\r\n            && key !== 'phone'\r\n            && key !== 'description'\r\n            && key !== 'files';\r\n\r\n        const isOptions = key === 'safety'\r\n            || key === 'multimedia'\r\n            || key === 'assistant'\r\n            || key === 'exterior';\r\n\r\n        const isSpecialRows = key === 'body'\r\n            || key === 'colors'\r\n            || isOptions;\r\n\r\n        if (isExcludedRows && data) {\r\n            data = data as ItemsType[];\r\n            if (isSpecialRows && data.length) {\r\n                fields = (\r\n                    <>\r\n                        <Typography variant=\"subtitle1\">\r\n                            {key}\r\n                            {requiredFields[key] && (\r\n                                <span className='error-text'>\r\n                                    *\r\n                                </span>\r\n                            )}\r\n                        </Typography>\r\n                        <div className='row-list'>\r\n                            {\r\n                                data.map(item => (\r\n                                    <div\r\n                                        key={item.id}\r\n                                        onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                    >\r\n                                        {\r\n                                            key === 'body'\r\n                                                ? (\r\n                                                    <div\r\n                                                        className={\r\n                                                            adParams[key] && adParams[key].id === item.id\r\n                                                                ? classes.selected\r\n                                                                : ''\r\n                                                        }\r\n                                                    >\r\n                                                        <img src={item.icon.url} alt={item.name}/>\r\n                                                        <Typography>{item.name}</Typography>\r\n                                                    </div>\r\n                                                )\r\n                                                : key === 'colors'\r\n                                                ? (\r\n                                                    <div\r\n                                                        className={adParams[key] && adParams[key].id === item.id ? classes.selected : ''}\r\n                                                        style={{\r\n                                                            width: '50px',\r\n                                                            height: '50px',\r\n                                                            backgroundColor: `${item.hex_color_code}`,\r\n                                                        }}\r\n                                                    />\r\n                                                )\r\n                                                : (\r\n                                                    <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                        <CustomCheckbox\r\n                                                            disabled={isPreview}\r\n                                                            // checked={\r\n                                                            //     adParams[key]\r\n                                                            //     && adParams[key].some(val => val.id === item.id)\r\n                                                            // }\r\n                                                            name={key}\r\n                                                            value={item}\r\n                                                            // onChange={handleParamsCheckbox(key, item)}\r\n                                                        />\r\n                                                        <Typography>{item.name}</Typography>\r\n                                                    </div>\r\n                                                )\r\n                                        }\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </>\r\n                );\r\n            } else {\r\n                if (!Array.isArray(data)) {\r\n                    data = data as ItemsType;\r\n                    fields = (\r\n                        <>\r\n                            <Typography variant=\"subtitle1\">\r\n                                {key}\r\n                                {requiredFields[key] && (\r\n                                    <span className='error-text'>\r\n                                        *\r\n                                    </span>\r\n                                )}\r\n                            </Typography>\r\n                            {\r\n                                key === 'body'\r\n                                    ? <Typography>{data.name}</Typography>\r\n                                    : key === 'colors'\r\n                                    ? <div\r\n                                        style={{\r\n                                            width: '50px',\r\n                                            height: '50px',\r\n                                            backgroundColor: `${data.hex_color_code}`\r\n                                        }}\r\n                                    />\r\n                                    : <Typography>{data.name}</Typography>\r\n                            }\r\n                        </>\r\n                    );\r\n                } else if (data.length) {\r\n                    data = [{id: null, name: 'Не выбрано'}, ...data];\r\n                    fields = (\r\n                        <>\r\n                            <Typography variant=\"subtitle1\">\r\n                                {key}\r\n                                {requiredFields[key] && (\r\n                                    <span className='error-text'>\r\n                                        *\r\n                                    </span>\r\n                                )}\r\n                            </Typography>\r\n                            <CustomMenu\r\n                                valueName={adParams[key] ? adParams[key].name : data[0].name}\r\n                                items={data}\r\n                                onBlur={onBlur}\r\n                                onClick={handleMenuItem(key)}\r\n                            />\r\n                        </>\r\n                    );\r\n                }\r\n            }\r\n            return (\r\n                <Grid\r\n                    item\r\n                    container\r\n                    className={classes.gridItem}\r\n                    key={key}\r\n                    xs={12}\r\n                    sm={isSpecialRows && !isPreview || isOptions ? 12 : 6}\r\n                >\r\n                    {fields}\r\n                </Grid>\r\n            )\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}