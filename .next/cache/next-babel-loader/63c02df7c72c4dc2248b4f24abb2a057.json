{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from '@src/api/api';\nexport const fetchToken = createAsyncThunk('auth/fetchByIdStatus', async values => {\n  const response = await userAPI.login(values.phone, values.password);\n  return response.data;\n});\nconst initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchToken.pending.type]: state => {\n      state.isFetch = true;\n      state.error = null;\n    },\n    [fetchToken.fulfilled.type]: (state, action) => {\n      state.isFetch = false;\n      state.isAuth = action.payload;\n    },\n    [fetchToken.rejected.type]: (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    }\n  }\n});\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/authReducer.ts"],"names":["createAsyncThunk","createSlice","userAPI","fetchToken","values","response","login","phone","password","data","initialState","isFetch","isAuth","error","authSlice","name","reducers","extraReducers","pending","type","state","fulfilled","action","payload","rejected","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAAQC,OAAR,QAAsB,cAAtB;AAIA,OAAO,MAAMC,UAAU,GAAGH,gBAAgB,CACtC,sBADsC,EAEtC,MAAOI,MAAP,IAAkB;AACd,QAAMC,QAAQ,GAAG,MAAMH,OAAO,CAACI,KAAR,CAAcF,MAAM,CAACG,KAArB,EAA4BH,MAAM,CAACI,QAAnC,CAAvB;AACA,SAAOH,QAAQ,CAACI,IAAhB;AACH,CALqC,CAAnC;AAcP,MAAMC,YAAuB,GAAG;AAC5BC,EAAAA,OAAO,EAAE,KADmB;AAE5BC,EAAAA,MAAM,EAAE,KAFoB;AAG5BC,EAAAA,KAAK,EAAE;AAHqB,CAAhC;AAMA,MAAMC,SAAS,GAAGb,WAAW,CAAC;AAC1Bc,EAAAA,IAAI,EAAE,MADoB;AAE1BL,EAAAA,YAF0B;AAG1BM,EAAAA,QAAQ,EAAE,EAHgB;AAI1BC,EAAAA,aAAa,EAAE;AACX,KAACd,UAAU,CAACe,OAAX,CAAmBC,IAApB,GAA4BC,KAAD,IAAW;AAClCA,MAAAA,KAAK,CAACT,OAAN,GAAgB,IAAhB;AACAS,MAAAA,KAAK,CAACP,KAAN,GAAc,IAAd;AACH,KAJU;AAKX,KAACV,UAAU,CAACkB,SAAX,CAAqBF,IAAtB,GAA6B,CAACC,KAAD,EAAQE,MAAR,KAAmB;AAC5CF,MAAAA,KAAK,CAACT,OAAN,GAAgB,KAAhB;AACAS,MAAAA,KAAK,CAACR,MAAN,GAAeU,MAAM,CAACC,OAAtB;AACH,KARU;AASX,KAACpB,UAAU,CAACqB,QAAX,CAAoBL,IAArB,GAA4B,CAACC,KAAD,EAAQE,MAAR,KAAmB;AAC3CF,MAAAA,KAAK,CAACT,OAAN,GAAgB,KAAhB;AACAS,MAAAA,KAAK,CAACP,KAAN,GAAcS,MAAM,CAACC,OAArB;AACH;AAZU;AAJW,CAAD,CAA7B;AAoBA,eAAeT,SAAS,CAACW,OAAzB","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {userAPI} from '@src/api/api'\r\nimport {AuthInputVals} from \"@src/components/elements/auth_reg_form/AuthRegForm\";\r\n\r\n\r\nexport const fetchToken = createAsyncThunk<any, AuthInputVals>(\r\n    'auth/fetchByIdStatus',\r\n    async (values) => {\r\n        const response = await userAPI.login(values.phone, values.password)\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport type AuthTypes = {\r\n    isFetch: boolean,\r\n    isAuth: boolean,\r\n    error?: any\r\n};\r\n\r\nconst initialState: AuthTypes = {\r\n    isFetch: false,\r\n    isAuth: false,\r\n    error: null\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: {\r\n        [fetchToken.pending.type]: (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        },\r\n        [fetchToken.fulfilled.type]: (state, action) => {\r\n            state.isFetch = false;\r\n            state.isAuth = action.payload;\r\n        },\r\n        [fetchToken.rejected.type]: (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport default authSlice.reducer;"]},"metadata":{},"sourceType":"module"}