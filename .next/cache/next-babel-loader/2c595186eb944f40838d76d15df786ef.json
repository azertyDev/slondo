{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Tab, Tabs, Typography } from \"@material-ui/core\";\nimport { i18n, Link } from \"@root/i18n\";\nimport { CustomTabPanel } from \"../custom_tab_panel/CustomTabPanel\";\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport { CustomFormikField } from \"../custom_formik_field/CustomFormikField\";\nimport { ButtonComponent } from \"../button/Button\";\nimport { fetchToken } from \"@src/redux/slices/authRegSlice\";\nimport { useStyles } from './useStyles';\nimport { authRegSchema } from \"@root/validation_schemas/authRegSchema\";\nconst initialInputsVals = {\n  phone: '',\n  password: ''\n};\nexport const AuthRegForm = props => {\n  const {\n    t\n  } = props;\n  const {\n    language\n  } = i18n;\n  const dispatch = useDispatch();\n  const {\n    isFetch,\n    error\n  } = useSelector(store => store.auth);\n  const {\n    0: tabValue,\n    1: setTabValue\n  } = useState(0);\n\n  const tabsHandler = (event, newValue) => {\n    setTabValue(newValue);\n  };\n\n  const loginReg = values => {\n    if (tabValue === 0) {\n      dispatch(fetchToken(values));\n    }\n  };\n\n  const onSubmit = (values, actions) => {\n    loginReg(values);\n    actions.resetForm();\n    props.handleCloseModal();\n  };\n\n  const formik = useFormik({\n    initialValues: initialInputsVals,\n    validationSchema: authRegSchema,\n    onSubmit\n  });\n  const {\n    errors,\n    touched\n  } = formik;\n  const classes = useStyles();\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", {\n    className: \"form-block\"\n  }, __jsx(\"div\", {\n    className: \"server-error\"\n  }, error && __jsx(Typography, {\n    variant: \"body2\",\n    className: \"error-text\"\n  }, t('auth_reg:serverError'))), __jsx(\"div\", {\n    className: \"tabs-container\"\n  }, __jsx(Tabs, {\n    value: tabValue,\n    onChange: tabsHandler,\n    indicatorColor: \"primary\",\n    className: \"tabs\"\n  }, __jsx(Tab, {\n    label: __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, t('auth_reg:signInTitle')),\n    value: 0\n  }), __jsx(Tab, {\n    label: __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, t('auth_reg:signUpTitle')),\n    value: 1\n  })), __jsx(\"div\", {\n    className: \"tab-panels\"\n  }, __jsx(CustomTabPanel, {\n    value: tabValue,\n    index: 0,\n    className: \"sign-panel\"\n  }, __jsx(FormikProvider, {\n    value: formik\n  }, __jsx(Form, {\n    onSubmit: formik.handleSubmit\n  }, __jsx(\"div\", null, __jsx(CustomFormikField, {\n    name: \"phone\",\n    type: \"tel\",\n    labelText: t('auth_reg:enterPhone'),\n    placeholder: \"+ (998) __ ___ __ __\",\n    className: errors.phone && touched.phone ? 'error-border' : ''\n  }), __jsx(\"div\", {\n    className: \"validation-block\"\n  }, __jsx(Typography, {\n    variant: \"subtitle2\",\n    className: \"error-text\"\n  }, errors.phone && touched.phone ? errors.phone : ''))), __jsx(\"div\", null, __jsx(CustomFormikField, {\n    name: \"password\",\n    type: \"password\",\n    labelText: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n    placeholder: t('auth_reg:enterPassword'),\n    className: errors.password && touched.password ? 'error-border' : ''\n  }), __jsx(\"div\", {\n    className: \"validation-block\"\n  }, __jsx(Typography, {\n    variant: \"subtitle2\",\n    className: \"error-text\"\n  }, errors.password && touched.password ? errors.password : ''), __jsx(\"a\", {\n    href: \"#\"\n  }, __jsx(Typography, {\n    variant: \"body2\"\n  }, t('auth_reg:forgetPassword'))))), __jsx(\"div\", {\n    className: classes.modalBtns\n  }, __jsx(ButtonComponent, {\n    className: \"signin-btn\",\n    type: \"submit\",\n    disabled: isFetch\n  }, t('common:signIn'))))), __jsx(\"div\", {\n    className: classes.agreement\n  }, __jsx(Typography, {\n    className: \"reg-agreement\",\n    variant: \"body2\"\n  }, \"\\u041D\\u0430\\u0436\\u0438\\u043C\\u0430\\u044F \\u043A\\u043D\\u043E\\u043F\\u043A\\u0443 \\u0412\\u043E\\u0439\\u0442\\u0438 \\u0432\\u044B \\u043F\\u0440\\u0438\\u043D\\u0438\\u043C\\u0430\\u0435\\u0442\\u0435 \\u0443\\u0441\\u043B\\u043E\\u0432\\u0438\\u044F \", ' ', __jsx(Link, {\n    href: \"#\"\n  }, __jsx(\"a\", null, \"\\u043B\\u0438\\u0446\\u0435\\u043D\\u0437\\u0438\\u043E\\u043D\\u043D\\u043E\\u0433\\u043E \\u0441\\u043E\\u0433\\u043B\\u0430\\u0448\\u0435\\u043D\\u0438\\u044F\")), ` ${t('auth_reg:agreement.thirdPart')} `, __jsx(Link, {\n    href: \"#\"\n  }, __jsx(\"a\", null, \"\\u043F\\u043E\\u043B\\u0438\\u0442\\u0438\\u043A\\u0438 \\u043A\\u043E\\u043D\\u0444\\u0438\\u0434\\u0435\\u043D\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u0438\")), language === 'uz' && ` ${t('auth_reg:agreement.fifthPart')}`))), __jsx(CustomTabPanel, {\n    value: tabValue,\n    index: 1,\n    className: \"reg-panel\"\n  }, __jsx(FormikProvider, {\n    value: formik\n  }, __jsx(Form, {\n    onSubmit: formik.handleSubmit\n  }, __jsx(\"div\", null, __jsx(CustomFormikField, {\n    name: \"phone\",\n    type: \"tel\",\n    placeholder: \"+ (998) __ ___ __ __\",\n    labelText: t('auth_reg:enterPhone'),\n    className: errors.phone && touched.phone ? 'error-border' : ''\n  }), __jsx(\"div\", {\n    className: \"validation-block\"\n  }, __jsx(Typography, {\n    variant: \"subtitle2\",\n    className: \"error-text\"\n  }, errors.phone && touched.phone ? errors.phone : ''))), __jsx(\"div\", {\n    className: classes.modalBtns\n  }, __jsx(ButtonComponent, {\n    className: \"reg-btn\",\n    type: \"submit\"\n  }, t('auth_reg:signUp'))))), __jsx(\"div\", {\n    className: classes.agreement\n  }, __jsx(Typography, {\n    className: \"reg-agreement\",\n    variant: \"body2\"\n  }, `${t('auth_reg:agreement.firstPart')} `, __jsx(Link, {\n    href: \"#\"\n  }, __jsx(\"a\", null, `${t('auth_reg:agreement.secondPart')} `)), `${t('auth_reg:agreement.thirdPart')} `, __jsx(Link, {\n    href: \"#\"\n  }, __jsx(\"a\", null, `${t('auth_reg:agreement.fourthPart')}`)), language === 'uz' && ` ${t('auth_reg:agreement.fifthPart')}`)))))));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/auth_reg_form/AuthRegForm.tsx"],"names":["React","useState","useDispatch","useSelector","Tab","Tabs","Typography","i18n","Link","CustomTabPanel","Form","FormikProvider","useFormik","CustomFormikField","ButtonComponent","fetchToken","useStyles","authRegSchema","initialInputsVals","phone","password","AuthRegForm","props","t","language","dispatch","isFetch","error","store","auth","tabValue","setTabValue","tabsHandler","event","newValue","loginReg","values","onSubmit","actions","resetForm","handleCloseModal","formik","initialValues","validationSchema","errors","touched","classes","root","handleSubmit","modalBtns","agreement"],"mappings":"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","sourcesContent":["import React, {FC, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Tab, Tabs, Typography} from \"@material-ui/core\";\r\nimport {i18n, Link} from \"@root/i18n\";\r\nimport {CustomTabPanel} from \"../custom_tab_panel/CustomTabPanel\";\r\nimport {Form, FormikProvider, useFormik} from \"formik\";\r\nimport {CustomFormikField} from \"../custom_formik_field/CustomFormikField\";\r\nimport {ButtonComponent} from \"../button/Button\";\r\nimport {RootState} from \"@src/redux/rootReducer\";\r\nimport {fetchToken} from \"@src/redux/slices/authRegSlice\";\r\nimport {AuthInputs} from \"@root/interfaces/Auth\";\r\nimport {WithT} from \"i18next\";\r\nimport {useStyles} from './useStyles';\r\nimport {authRegSchema} from \"@root/validation_schemas/authRegSchema\";\r\n\r\n\r\nconst initialInputsVals: AuthInputs = {\r\n    phone: '',\r\n    password: ''\r\n};\r\n\r\nexport const AuthRegForm: FC<WithT & { handleCloseModal: () => void }> = (props) => {\r\n    const {t} = props;\r\n    const {language} = i18n;\r\n\r\n    const dispatch = useDispatch();\r\n    const {isFetch, error} = useSelector((store: RootState) => store.auth);\r\n\r\n    const [tabValue, setTabValue] = useState(0);\r\n\r\n    const tabsHandler = (event, newValue) => {\r\n        setTabValue(newValue);\r\n    };\r\n\r\n    const loginReg = (values) => {\r\n        if (tabValue === 0) {\r\n            dispatch(fetchToken(values))\r\n        }\r\n    };\r\n\r\n    const onSubmit = (values, actions) => {\r\n        loginReg(values);\r\n        actions.resetForm();\r\n        props.handleCloseModal();\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: initialInputsVals,\r\n        validationSchema: authRegSchema,\r\n        onSubmit\r\n    });\r\n\r\n    const {\r\n        errors,\r\n        touched,\r\n    } = formik;\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className=\"form-block\">\r\n                <div className=\"server-error\">\r\n                    {error &&\r\n                    <Typography variant=\"body2\" className=\"error-text\">{t('auth_reg:serverError')}</Typography>}\r\n                </div>\r\n                <div className=\"tabs-container\">\r\n                    <Tabs\r\n                        value={tabValue}\r\n                        onChange={tabsHandler}\r\n                        indicatorColor=\"primary\"\r\n                        className=\"tabs\"\r\n                    >\r\n                        <Tab\r\n                            label={\r\n                                <Typography variant=\"subtitle1\">\r\n                                    {t('auth_reg:signInTitle')}\r\n                                </Typography>\r\n                            }\r\n                            value={0}\r\n                        />\r\n                        <Tab\r\n                            label={\r\n                                <Typography variant=\"subtitle1\">\r\n                                    {t('auth_reg:signUpTitle')}\r\n                                </Typography>\r\n                            }\r\n                            value={1}\r\n                        />\r\n                    </Tabs>\r\n                    <div className=\"tab-panels\">\r\n                        <CustomTabPanel\r\n                            value={tabValue}\r\n                            index={0}\r\n                            className=\"sign-panel\"\r\n                        >\r\n                            <FormikProvider value={formik}>\r\n                                <Form onSubmit={formik.handleSubmit}>\r\n                                    <div>\r\n                                        <CustomFormikField\r\n                                            name=\"phone\"\r\n                                            type=\"tel\"\r\n                                            labelText={t('auth_reg:enterPhone')}\r\n                                            placeholder=\"+ (998) __ ___ __ __\"\r\n                                            className={errors.phone && touched.phone ? 'error-border' : ''}\r\n                                        />\r\n                                        <div className=\"validation-block\">\r\n                                            <Typography variant=\"subtitle2\" className=\"error-text\">\r\n                                                {errors.phone && touched.phone ? errors.phone : ''}\r\n                                            </Typography>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div>\r\n                                        <CustomFormikField\r\n                                            name=\"password\"\r\n                                            type=\"password\"\r\n                                            labelText=\"Введите пароль\"\r\n                                            placeholder={t('auth_reg:enterPassword')}\r\n                                            className={errors.password && touched.password ? 'error-border' : ''}\r\n                                        />\r\n                                        <div className=\"validation-block\">\r\n                                            <Typography variant=\"subtitle2\" className=\"error-text\">\r\n                                                {errors.password && touched.password ? errors.password : ''}\r\n                                            </Typography>\r\n                                            <a href=\"#\">\r\n                                                <Typography variant=\"body2\">\r\n                                                    {t('auth_reg:forgetPassword')}\r\n                                                </Typography>\r\n                                            </a>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className={classes.modalBtns}>\r\n                                        <ButtonComponent\r\n                                            className=\"signin-btn\"\r\n                                            type=\"submit\"\r\n                                            disabled={isFetch}\r\n                                        >\r\n                                            {t('common:signIn')}\r\n                                        </ButtonComponent>\r\n                                    </div>\r\n                                </Form>\r\n                            </FormikProvider>\r\n                            <div className={classes.agreement}>\r\n                                <Typography className=\"reg-agreement\" variant=\"body2\">\r\n                                    Нажимая кнопку Войти вы принимаете условия {' '}\r\n                                    <Link href=\"#\">\r\n                                        <a>лицензионного соглашения</a>\r\n                                    </Link>\r\n                                    {` ${t('auth_reg:agreement.thirdPart')} `}\r\n                                    <Link href=\"#\">\r\n                                        <a>политики конфиденциальности</a>\r\n                                    </Link>\r\n                                    {language === 'uz' && ` ${t('auth_reg:agreement.fifthPart')}`}\r\n                                </Typography>\r\n                            </div>\r\n                        </CustomTabPanel>\r\n                        <CustomTabPanel value={tabValue} index={1} className=\"reg-panel\">\r\n                            <FormikProvider value={formik}>\r\n                                <Form onSubmit={formik.handleSubmit}>\r\n                                    <div>\r\n                                        <CustomFormikField\r\n                                            name=\"phone\"\r\n                                            type=\"tel\"\r\n                                            placeholder=\"+ (998) __ ___ __ __\"\r\n                                            labelText={t('auth_reg:enterPhone')}\r\n                                            className={errors.phone && touched.phone ? 'error-border' : ''}\r\n                                        />\r\n                                        <div className=\"validation-block\">\r\n                                            <Typography variant=\"subtitle2\" className=\"error-text\">\r\n                                                {errors.phone && touched.phone ? errors.phone : ''}\r\n                                            </Typography>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className={classes.modalBtns}>\r\n                                        <ButtonComponent className=\"reg-btn\" type=\"submit\">\r\n                                            {t('auth_reg:signUp')}\r\n                                        </ButtonComponent>\r\n                                    </div>\r\n                                </Form>\r\n                            </FormikProvider>\r\n                            <div className={classes.agreement}>\r\n                                <Typography className=\"reg-agreement\" variant=\"body2\">\r\n                                    {`${t('auth_reg:agreement.firstPart')} `}\r\n                                    <Link href=\"#\">\r\n                                        <a>{`${t('auth_reg:agreement.secondPart')} `}</a>\r\n                                    </Link>\r\n                                    {`${t('auth_reg:agreement.thirdPart')} `}\r\n                                    <Link href=\"#\">\r\n                                        <a>{`${t('auth_reg:agreement.fourthPart')}`}</a>\r\n                                    </Link>\r\n                                    {language === 'uz' && ` ${t('auth_reg:agreement.fifthPart')}`}\r\n                                </Typography>\r\n                            </div>\r\n                        </CustomTabPanel>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}