{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport { FormikProvider, useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AncmntForm } from './AncmntForm';\nimport { setErrorMsgAction } from \"@src/redux/slices/errorSlice\";\nimport { createAdvrtSchema, isRequired } from \"@root/validation_schemas/createAdvrtSchema\";\nimport { TOTAL_FILES_LIMIT } from \"@src/constants\";\nimport { numberRegEx } from \"@src/helpers\";\nimport { CameraIcon } from \"@src/components/elements/icons\";\nexport const autoSelectKeys = ['condition', 'area'];\nexport const textFieldKeys = ['area'];\nexport const initPhoto = {\n  url: __jsx(\"div\", {\n    style: {\n      width: '120px',\n      height: '120px',\n      margin: 'auto'\n    }\n  }, __jsx(CameraIcon, null))\n};\nconst initPhotos = Array.from({\n  length: TOTAL_FILES_LIMIT\n}).map(() => initPhoto);\nexport const initFormFields = {\n  isFetch: false,\n  title: '',\n  safe_deal: false,\n  delivery: false,\n  exchange: false,\n  location: null,\n  files: initPhotos,\n  description: '',\n  phone: '',\n  price: '',\n  currency: {\n    id: null,\n    name: ''\n  },\n  avalTime: {\n    isActive: false,\n    start_time: '00:00',\n    end_time: '00:00',\n    week: [{\n      id: 1,\n      name: 'Пн'\n    }, {\n      id: 2,\n      name: 'Вт'\n    }, {\n      id: 3,\n      name: 'Ср'\n    }, {\n      id: 4,\n      name: 'Чт'\n    }, {\n      id: 5,\n      name: 'Пт'\n    }, {\n      id: 6,\n      name: 'Сб'\n    }, {\n      id: 7,\n      name: 'Вс'\n    }]\n  },\n  auction: {\n    duration: {\n      id: null,\n      expiration_at: null\n    },\n    offer_the_price: false,\n    auto_renewal: false,\n    reserve_price: '',\n    price_by_now: {\n      isActive: false,\n      value: ''\n    },\n    display_phone: false\n  },\n  adParams: {\n    safety: [],\n    multimedia: [],\n    assistant: [],\n    exterior: [],\n    car_climate: [],\n    airbags: []\n  }\n};\nexport const formData = (data, ancmntType, subCategory) => {\n  const form = new FormData();\n  const {\n    avalTime,\n    location,\n    files,\n    adParams,\n    auction\n  } = data;\n  form.set('ads_type_id', ancmntType.id.toString());\n  form.set('parent_categories_id', subCategory.parents[0].id.toString());\n  form.set('title', data.title);\n  form.set('safe_deal', Number(data.safe_deal).toString());\n  form.set('delivery', Number(data.delivery).toString());\n  form.set('exchange', Number(data.exchange).toString());\n  form.set('phone', data.phone);\n  form.set('description', data.description);\n  form.set('price', data.price);\n  form.set('currency_id', data.currency.id.toString());\n  if (subCategory.id) form.set('child_categories_id', subCategory.id.toString());\n  files.forEach(({\n    file\n  }) => file && form.append('files[]', file, file.name));\n\n  if (avalTime.isActive) {\n    avalTime.week.forEach((day, i) => form.append(`week[${i}]`, day.id.toString()));\n    form.set('start_time', avalTime.start_time.toString());\n    form.set('end_time', avalTime.end_time.toString());\n  }\n\n  for (const key in location) {\n    if (typeof location[key] === 'number') {\n      form.set(key, Number(location[key]).toString());\n    }\n  }\n\n  for (let key in adParams) {\n    const value = adParams[key];\n\n    if (value) {\n      if (typeof value === 'string') {\n        const validKey = key.replace('_value', '');\n\n        if (textFieldKeys.some(k => k === validKey)) {\n          key = validKey;\n        }\n\n        form.set(key, value);\n      } else if (Array.isArray(value)) {\n        value.forEach((value, i) => form.append(`${key}[${i}]`, value.id));\n      } else {\n        if (value.id) {\n          switch (key) {\n            case 'models':\n              key = 'model';\n              break;\n\n            case 'colors':\n              key = 'color';\n          }\n\n          form.set(`${key}_id`, value.id);\n        }\n      }\n    }\n  }\n\n  if (ancmntType.id !== 1) {\n    form.set('duration_id', auction.duration.id.toString());\n    form.set('display_phone', Number(auction.display_phone).toString());\n\n    if (ancmntType.id === 3) {\n      form.set('reserve_price', auction.reserve_price);\n      form.set('auto_renewal', Number(auction.auto_renewal).toString());\n      form.set('offer_the_price', Number(auction.offer_the_price).toString());\n\n      if (auction.price_by_now.isActive) {\n        form.set('price_by_now', auction.price_by_now.value);\n      }\n    }\n  } // for (const key of form.entries()) {\n  //     console.log(key[0] + '-' + key[1]);\n  // }\n\n\n  return form;\n};\nexport const AncmntFormContainer = props => {\n  const {\n    activeStep,\n    ancmntType,\n    handleNextStep,\n    createAncmnt\n  } = props;\n  const {\n    category,\n    subCategory\n  } = createAncmnt;\n  const {\n    locations\n  } = useSelector(store => store);\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: initFormFields,\n    validationSchema: createAdvrtSchema,\n    onSubmit\n  });\n  const {\n    values,\n    setValues,\n    errors,\n    touched,\n    setTouched,\n    handleBlur,\n    handleSubmit\n  } = formik;\n  let {\n    adParams\n  } = values;\n\n  async function onSubmit(values) {\n    try {\n      if (activeStep !== 3) {\n        handleNextStep();\n      } else {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          isFetch: true\n        }));\n        const data = formData(values, ancmntType, subCategory); // await userAPI.createAdvrt(data);\n\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          isFetch: false\n        }));\n        handleNextStep();\n      }\n    } catch (e) {\n      dispatch(setErrorMsgAction(e.message));\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        isFetch: false\n      }));\n    }\n  }\n\n  const handleCheckboxChange = valName => ({\n    target\n  }) => {\n    const isAuctionField = ['auto_renewal', 'display_phone', 'offer_the_price'].some(fieldName => fieldName === valName);\n\n    if (isAuctionField) {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        auction: _objectSpread(_objectSpread({}, values.auction), {}, {\n          [valName]: target.checked\n        })\n      }));\n    } else if (valName === 'price_by_now') {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        auction: _objectSpread(_objectSpread({}, values.auction), {}, {\n          price_by_now: {\n            isActive: target.checked,\n            value: values.auction.price_by_now.value\n          }\n        })\n      }));\n    } else {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        [valName]: target.checked\n      }));\n    }\n  };\n\n  const handleParamsCheckbox = (valueName, value) => () => {\n    if (adParams[valueName]) {\n      if (adParams[valueName].some(val => val.id === value.id)) {\n        adParams[valueName].map((val, index) => {\n          if (val.id === value.id) {\n            adParams[valueName].splice(index, 1);\n          }\n        });\n      } else {\n        adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n          [valueName]: [...adParams[valueName], value]\n        });\n      }\n    } else {\n      adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n        [valueName]: [value]\n      });\n    }\n\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      adParams\n    }));\n  };\n\n  const handleMenuItem = valueName => (newValue, setAnchor) => () => {\n    setAnchor(null);\n\n    if (valueName === 'currency') {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        [valueName]: newValue\n      }));\n    } else if (valueName === 'duration') {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        auction: _objectSpread(_objectSpread({}, values.auction), {}, {\n          [valueName]: newValue\n        })\n      }));\n    } else {\n      // Reset sub props in values\n      Object.keys(newValue).map(key => {\n        if (adParams[key]) {\n          adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n            [key]: {\n              id: null,\n              name: 'Не выбрано'\n            }\n          });\n        }\n\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          adParams: _objectSpread(_objectSpread({}, adParams), {}, {\n            [valueName]: newValue\n          })\n        }));\n      });\n    }\n  };\n\n  const handleListItem = (valueName, value) => () => {\n    if (adParams[valueName] && adParams[valueName].id === value.id) {\n      adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n        [valueName]: {\n          id: null,\n          name: 'Не выбрано'\n        }\n      });\n    } else {\n      adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n        [valueName]: value\n      });\n    }\n\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      adParams\n    }));\n  };\n\n  const handleInput = valueName => ({\n    target\n  }) => {\n    if (numberRegEx.test(target.value)) {\n      if (valueName === 'price') {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          [valueName]: target.value\n        }));\n      } else {\n        adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n          [valueName]: target.value\n        });\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          adParams\n        }));\n      }\n    }\n  };\n\n  const handleAuctionInput = valName => ({\n    target\n  }) => {\n    if (numberRegEx.test(target.value)) {\n      if (valName === 'price_by_now') {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          auction: _objectSpread(_objectSpread({}, values.auction), {}, {\n            [valName]: {\n              isActive: true,\n              value: target.value\n            }\n          })\n        }));\n      } else {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          auction: _objectSpread(_objectSpread({}, values.auction), {}, {\n            [valName]: target.value\n          })\n        }));\n      }\n    }\n  };\n\n  const handleSwitch = (_, value) => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      avalTime: _objectSpread(_objectSpread({}, values.avalTime), {}, {\n        isActive: value\n      })\n    }));\n  };\n\n  const handleWeekDay = value => () => {\n    if (values.avalTime.week.some(val => val.id === value.id)) {\n      values.avalTime.week.map((val, index) => {\n        if (val.id === value.id) {\n          values.avalTime.week.splice(index, 1);\n        }\n      });\n      setValues(_objectSpread({}, values));\n    } else {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        avalTime: _objectSpread(_objectSpread({}, values.avalTime), {}, {\n          week: [...values.avalTime.week, value]\n        })\n      }));\n    }\n  };\n\n  const handleTime = ({\n    target\n  }) => {\n    let {\n      value\n    } = target;\n    const regEx = /^([0-1]?[0-9]|2[0-3])?:([0-5][0-9]?)?$/;\n    const isValid = regEx.test(value);\n\n    if (isValid) {\n      value = value.replace(/^:(.+)/, m => `00${m}`).replace(/(.+):$/, m => `${m}00`);\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        avalTime: _objectSpread(_objectSpread({}, values.avalTime), {}, {\n          [target.name]: value\n        })\n      }));\n    }\n  };\n\n  const setReqValues = () => {\n    const reqVals = {};\n    const reqParamsVals = {};\n    const defaultVal = {\n      id: null,\n      name: 'Не выбрано'\n    };\n    const adParamsVals = subCategory.data;\n\n    if (category.id === 11) {\n      reqVals['price'] = '0';\n    }\n\n    if (ancmntType.currency.length !== 0) {\n      reqVals['currency'] = ancmntType.currency.filter(cur => cur.name === 'sum')[0];\n    }\n\n    if (ancmntType.id !== 1 && ancmntType.expired.length !== 0) {\n      reqVals['auction'] = _objectSpread(_objectSpread({}, values.auction), {}, {\n        duration: ancmntType.expired[0]\n      });\n    }\n\n    Object.keys(adParamsVals).forEach(key => {\n      if (isRequired(key) && adParams[key] === undefined) {\n        if (key === 'manufacturer' && subCategory.id == 1) {\n          reqParamsVals['models'] = defaultVal;\n        }\n\n        if (Array.isArray(adParamsVals[key])) {\n          reqParamsVals[key] = defaultVal;\n        } else {\n          reqParamsVals[key] = adParamsVals[key];\n        }\n      } else if (autoSelectKeys.some(k => k === key)) {\n        if (textFieldKeys.some(k => k === key)) {\n          reqParamsVals[`${key}_value`] = '';\n        }\n\n        reqParamsVals[key] = adParamsVals[key][0];\n      }\n    });\n    setValues(_objectSpread(_objectSpread(_objectSpread({}, values), reqVals), {}, {\n      adParams: _objectSpread(_objectSpread({}, adParams), reqParamsVals)\n    }));\n  };\n\n  useEffect(() => {\n    window && window.scrollTo(0, 0);\n  }, []);\n  useEffect(() => {\n    setReqValues();\n  }, [subCategory.parent.id, subCategory.parent.name]);\n  return __jsx(FormikProvider, {\n    value: formik\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(AncmntForm, _extends({}, props, {\n    errors: errors,\n    touched: touched,\n    setTouched: setTouched,\n    values: values,\n    setValues: setValues,\n    locations: locations,\n    handleBlur: handleBlur,\n    handleTime: handleTime,\n    handleInput: handleInput,\n    handleSwitch: handleSwitch,\n    handleWeekDay: handleWeekDay,\n    handleListItem: handleListItem,\n    handleMenuItem: handleMenuItem,\n    handleAuctionInput: handleAuctionInput,\n    handleParamsCheckbox: handleParamsCheckbox,\n    handleCheckboxChange: handleCheckboxChange\n  }))));\n};","map":null,"metadata":{},"sourceType":"module"}