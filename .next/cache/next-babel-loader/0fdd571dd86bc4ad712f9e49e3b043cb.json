{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Tabs, Typography } from \"@material-ui/core\";\nimport { Link } from \"../../../../i18n\";\nimport { CloseIcon } from '../icons';\nimport { CustomTab } from \"../custom_tab/CustomTab\";\nimport { CustomTabPanel } from \"../custom_tab_panel/CustomTabPanel\";\nimport { Field, Form, Formik } from \"formik\";\nimport { CustomField } from \"../custom_field/CustomField\";\nimport { ButtonComponent } from \"../button/Button\";\nimport { requiredValidate, phoneValidate } from '../../../components/validates';\nimport { useStyles } from './useStyles';\nexport var AuthRegForm = function AuthRegForm(props) {\n  _s();\n\n  var t = props.t,\n      language = props.language,\n      handleCloseModal = props.handleCloseModal,\n      onSubmit = props.onSubmit;\n  var inputsVals = {\n    phone: '',\n    password: ''\n  };\n\n  var _useState = useState(0),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var handleChange = function handleChange(event, newValue) {\n    setValue(newValue);\n  };\n\n  var classes = useStyles();\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", {\n    className: \"close-btn-wrapper\"\n  }, __jsx(CloseIcon, {\n    onClick: handleCloseModal\n  })), __jsx(\"div\", {\n    className: \"form-block\"\n  }, __jsx(\"div\", {\n    className: \"welcome-block\"\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    color: \"initial\"\n  }, t('auth_reg:welcome')), __jsx(Typography, {\n    variant: \"subtitle2\",\n    color: \"initial\"\n  }, t('auth_reg:authSite'))), __jsx(\"div\", {\n    className: \"tabs-container\"\n  }, __jsx(Tabs, {\n    value: value,\n    onChange: handleChange,\n    indicatorColor: \"primary\",\n    className: \"tabs\"\n  }, __jsx(CustomTab, {\n    label: __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, t('auth_reg:signInTitle')),\n    id: 0\n  }), __jsx(CustomTab, {\n    label: __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, t('auth_reg:signUpTitle')),\n    id: 1\n  })), __jsx(\"div\", {\n    className: \"tab-panels\"\n  }, __jsx(CustomTabPanel, {\n    value: value,\n    index: 0,\n    className: \"sign-panel\"\n  }, __jsx(Formik, {\n    initialValues: inputsVals,\n    onSubmit: onSubmit\n  }, function (_ref) {\n    var errors = _ref.errors,\n        touched = _ref.touched;\n    return __jsx(Form, null, __jsx(\"div\", null, __jsx(Typography, {\n      className: classes.errorTxt,\n      variant: \"subtitle2\"\n    }, errors.phone && touched.phone ? errors.phone : ''), __jsx(Field, {\n      name: \"phone\",\n      type: \"phone\",\n      placeholder: t('auth_reg:enterPhone'),\n      validate: phoneValidate,\n      component: CustomField,\n      className: errors.phone && touched.phone ? classes.errorInput : ''\n    })), __jsx(\"div\", null, __jsx(Typography, {\n      className: classes.errorTxt,\n      variant: \"subtitle2\"\n    }, errors.password && touched.password ? errors.password : ''), __jsx(Field, {\n      name: \"password\",\n      type: \"password\",\n      placeholder: t('auth_reg:enterPassword'),\n      validate: requiredValidate,\n      component: CustomField,\n      className: errors.password && touched.password ? classes.errorInput : ''\n    })), __jsx(\"div\", {\n      className: \"forget-password\"\n    }, __jsx(\"a\", {\n      href: \"#\"\n    }, __jsx(\"span\", null, t('auth_reg:forgetPassword')))), __jsx(\"div\", {\n      className: classes.modalBtns\n    }, __jsx(ButtonComponent, {\n      className: \"signin-btn\",\n      type: \"submit\"\n    }, t('auth_reg:signIn'))));\n  })), __jsx(CustomTabPanel, {\n    value: value,\n    index: 1,\n    className: \"reg-panel\"\n  }, __jsx(Formik, {\n    initialValues: inputsVals,\n    onSubmit: onSubmit\n  }, function (_ref2) {\n    var errors = _ref2.errors,\n        touched = _ref2.touched;\n    return __jsx(Form, null, __jsx(\"div\", null, __jsx(\"div\", null, __jsx(Typography, {\n      className: classes.errorTxt,\n      variant: \"subtitle2\"\n    }, errors.phone && touched.phone ? errors.phone : '')), __jsx(\"div\", null, __jsx(Field, {\n      name: \"phone\",\n      type: \"phone\",\n      placeholder: t('auth_reg:enterPhone'),\n      validate: phoneValidate,\n      component: CustomField,\n      className: errors.phone && touched.phone ? classes.errorInput : ''\n    }))), __jsx(\"div\", {\n      className: classes.modalBtns\n    }, __jsx(ButtonComponent, {\n      className: \"reg-btn\",\n      type: \"submit\"\n    }, t('auth_reg:signUp'))));\n  }), __jsx(\"div\", {\n    className: classes.agreement\n  }, __jsx(Typography, {\n    className: \"reg-agreement\",\n    variant: \"body2\"\n  }, \"\".concat(t('auth_reg:agreement.firstPart'), \" \"), __jsx(Link, {\n    href: \"#\"\n  }, __jsx(\"a\", null, \"\".concat(t('auth_reg:agreement.secondPart'), \" \"))), \"\".concat(t('auth_reg:agreement.thirdPart'), \" \"), __jsx(Link, {\n    href: \"#\"\n  }, __jsx(\"a\", null, \"\".concat(t('auth_reg:agreement.fourthPart')))), language === 'uz' && \" \".concat(t('auth_reg:agreement.fifthPart')))))))));\n};\n\n_s(AuthRegForm, \"amYE+i0RSNXWcaZXPkaqPcPCmRg=\", false, function () {\n  return [useStyles];\n});\n\n_c = AuthRegForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthRegForm\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/auth_reg_form/AuthRegForm.tsx"],"names":["React","useState","Tabs","Typography","Link","CloseIcon","CustomTab","CustomTabPanel","Field","Form","Formik","CustomField","ButtonComponent","requiredValidate","phoneValidate","useStyles","AuthRegForm","props","t","language","handleCloseModal","onSubmit","inputsVals","phone","password","value","setValue","handleChange","event","newValue","classes","root","errors","touched","errorTxt","errorInput","modalBtns","agreement"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\"\r\nimport {Tabs, Typography} from \"@material-ui/core\"\r\nimport {Link} from \"../../../../i18n\"\r\nimport {CloseIcon} from '../icons'\r\nimport {CustomTab} from \"../custom_tab/CustomTab\"\r\nimport {CustomTabPanel} from \"../custom_tab_panel/CustomTabPanel\"\r\nimport {Field, Form, Formik} from \"formik\"\r\nimport {CustomField} from \"../custom_field/CustomField\"\r\nimport {ButtonComponent} from \"../button/Button\"\r\nimport {requiredValidate, phoneValidate} from '../../../components/validates'\r\nimport {useStyles} from './useStyles'\r\n\r\n\r\ninterface ILoginValues {\r\n    phone: string,\r\n    password: string\r\n}\r\n\r\nexport const AuthRegForm = (props) => {\r\n    const {t, language, handleCloseModal, onSubmit} = props;\r\n    const inputsVals: ILoginValues = {phone: '', password: ''};\r\n\r\n    const [value, setValue] = useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className='close-btn-wrapper'>\r\n                <CloseIcon onClick={handleCloseModal}/>\r\n            </div>\r\n            <div className='form-block'>\r\n                <div className='welcome-block'>\r\n                    <Typography variant=\"h6\" color=\"initial\">\r\n                        {t('auth_reg:welcome')}\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\" color=\"initial\">\r\n                        {t('auth_reg:authSite')}\r\n                    </Typography>\r\n                </div>\r\n                <div className='tabs-container'>\r\n                    <Tabs\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        indicatorColor=\"primary\"\r\n                        className='tabs'\r\n                    >\r\n                        <CustomTab\r\n                            label={\r\n                                <Typography variant=\"subtitle1\">\r\n                                    {t('auth_reg:signInTitle')}\r\n                                </Typography>\r\n                            }\r\n                            id={0}\r\n                        />\r\n                        <CustomTab\r\n                            label={\r\n                                <Typography variant=\"subtitle1\">\r\n                                    {t('auth_reg:signUpTitle')}\r\n                                </Typography>\r\n                            }\r\n                            id={1}\r\n                        />\r\n                    </Tabs>\r\n                    <div className='tab-panels'>\r\n                        <CustomTabPanel\r\n                            value={value}\r\n                            index={0}\r\n                            className='sign-panel'\r\n                        >\r\n                            <Formik initialValues={inputsVals} onSubmit={onSubmit}>\r\n                                {({errors, touched}) => {\r\n                                    return (\r\n                                        <Form>\r\n                                            <div>\r\n                                                <Typography\r\n                                                    className={classes.errorTxt}\r\n                                                    variant=\"subtitle2\"\r\n                                                >\r\n                                                    {errors.phone && touched.phone ? errors.phone : ''}\r\n                                                </Typography>\r\n                                                <Field\r\n                                                    name='phone'\r\n                                                    type='phone'\r\n                                                    placeholder={t('auth_reg:enterPhone')}\r\n                                                    validate={phoneValidate}\r\n                                                    component={CustomField}\r\n                                                    className={errors.phone && touched.phone ? classes.errorInput : ''}\r\n                                                />\r\n                                            </div>\r\n                                            <div>\r\n                                                <Typography\r\n                                                    className={classes.errorTxt}\r\n                                                    variant=\"subtitle2\"\r\n                                                >\r\n                                                    {errors.password && touched.password ? errors.password : ''}\r\n                                                </Typography>\r\n                                                <Field\r\n                                                    name='password'\r\n                                                    type=\"password\"\r\n                                                    placeholder={t('auth_reg:enterPassword')}\r\n                                                    validate={requiredValidate}\r\n                                                    component={CustomField}\r\n                                                    className={errors.password && touched.password ? classes.errorInput : ''}\r\n                                                />\r\n                                            </div>\r\n                                            <div className='forget-password'>\r\n                                                <a href=\"#\">\r\n                                                        <span>\r\n                                                            {t('auth_reg:forgetPassword')}\r\n                                                        </span>\r\n                                                </a>\r\n                                            </div>\r\n                                            <div className={classes.modalBtns}>\r\n                                                <ButtonComponent className='signin-btn' type='submit'>\r\n                                                    {t('auth_reg:signIn')}\r\n                                                </ButtonComponent>\r\n                                            </div>\r\n                                        </Form>\r\n                                    )\r\n                                }}\r\n                            </Formik>\r\n                        </CustomTabPanel>\r\n                        <CustomTabPanel value={value} index={1} className='reg-panel'>\r\n                            <Formik initialValues={inputsVals} onSubmit={onSubmit}>\r\n                                {({errors, touched}) => (\r\n                                    <Form>\r\n                                        <div>\r\n                                            <div>\r\n                                                <Typography\r\n                                                    className={classes.errorTxt}\r\n                                                    variant=\"subtitle2\"\r\n                                                >\r\n                                                    {errors.phone && touched.phone ? errors.phone : ''}\r\n                                                </Typography>\r\n                                            </div>\r\n                                            <div>\r\n                                                <Field\r\n                                                    name='phone'\r\n                                                    type='phone'\r\n                                                    placeholder={t('auth_reg:enterPhone')}\r\n                                                    validate={phoneValidate}\r\n                                                    component={CustomField}\r\n                                                    className={errors.phone && touched.phone ? classes.errorInput : ''}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className={classes.modalBtns}>\r\n                                            <ButtonComponent className='reg-btn' type='submit'>\r\n                                                {t('auth_reg:signUp')}\r\n                                            </ButtonComponent>\r\n                                        </div>\r\n                                    </Form>\r\n                                )}\r\n                            </Formik>\r\n                            <div className={classes.agreement}>\r\n                                <Typography className='reg-agreement' variant='body2'>\r\n                                    {`${t('auth_reg:agreement.firstPart')} `}\r\n                                    <Link href='#'>\r\n                                        <a>{`${t('auth_reg:agreement.secondPart')} `}</a>\r\n                                    </Link>\r\n                                    {`${t('auth_reg:agreement.thirdPart')} `}\r\n                                    <Link href='#'>\r\n                                        <a>{`${t('auth_reg:agreement.fourthPart')}`}</a>\r\n                                    </Link>\r\n                                    {language === 'uz' && ` ${t('auth_reg:agreement.fifthPart')}`}\r\n                                </Typography>\r\n                            </div>\r\n                        </CustomTabPanel>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}