{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from '@src/api/api';\nconst initialState = {\n  isFetch: false,\n  error: null,\n  data: {\n    data: []\n  }\n}; // Async thunk\n\nexport const fetchCardData = createAsyncThunk('cardData/fetchCardData', async ({\n  itemsPerPage,\n  page,\n  type\n}, {\n  rejectWithValue\n}) => {\n  try {\n    return await userAPI.getCardData(itemsPerPage, page, type);\n  } catch (e) {\n    return rejectWithValue(e.message);\n  }\n}); // Slice\n\nconst cardDataSlice = createSlice({\n  name: 'cardData',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchCardData.pending, state => {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchCardData.fulfilled, (state, action) => {\n      state.isFetch = false;\n      state.data = action.payload;\n    });\n    builder.addCase(fetchCardData.rejected, (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const cardDataReducer = cardDataSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/cardDataSlice.ts"],"names":["createAsyncThunk","createSlice","userAPI","initialState","isFetch","error","data","fetchCardData","itemsPerPage","page","type","rejectWithValue","getCardData","e","message","cardDataSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","cardDataReducer","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,OAAT,QAAwB,cAAxB;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,IAAI,EAAE;AACFA,IAAAA,IAAI,EAAE;AADJ;AAHW,CAArB,C,CAQA;;AACA,OAAO,MAAMC,aAAa,GAAGP,gBAAgB,CACzC,wBADyC,EAEzC,OAAO;AAAEQ,EAAAA,YAAF;AAAgBC,EAAAA,IAAhB;AAAsBC,EAAAA;AAAtB,CAAP,EAAqC;AAAEC,EAAAA;AAAF,CAArC,KAA6D;AACzD,MAAI;AACA,WAAO,MAAMT,OAAO,CAACU,WAAR,CAAoBJ,YAApB,EAAkCC,IAAlC,EAAwCC,IAAxC,CAAb;AACH,GAFD,CAEE,OAAOG,CAAP,EAAU;AACR,WAAOF,eAAe,CAACE,CAAC,CAACC,OAAH,CAAtB;AACH;AACJ,CARwC,CAAtC,C,CAWP;;AACA,MAAMC,aAAa,GAAGd,WAAW,CAAC;AAC9Be,EAAAA,IAAI,EAAE,UADwB;AAE9Bb,EAAAA,YAF8B;AAG9Bc,EAAAA,QAAQ,EAAE,EAHoB;AAI9BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBb,aAAa,CAACc,OAA9B,EAAwCC,KAAD,IAAW;AAC9CA,MAAAA,KAAK,CAAClB,OAAN,GAAgB,IAAhB;AACAkB,MAAAA,KAAK,CAACjB,KAAN,GAAc,IAAd;AACH,KAHD;AAIAc,IAAAA,OAAO,CAACC,OAAR,CAAgBb,aAAa,CAACgB,SAA9B,EAAyC,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACxDF,MAAAA,KAAK,CAAClB,OAAN,GAAgB,KAAhB;AACAkB,MAAAA,KAAK,CAAChB,IAAN,GAAakB,MAAM,CAACC,OAApB;AACH,KAHD;AAIAN,IAAAA,OAAO,CAACC,OAAR,CAAgBb,aAAa,CAACmB,QAA9B,EAAwC,CAACJ,KAAD,EAAQE,MAAR,KAAmB;AACvDF,MAAAA,KAAK,CAAClB,OAAN,GAAgB,KAAhB;AACAkB,MAAAA,KAAK,CAACjB,KAAN,GAAcmB,MAAM,CAACC,OAArB;AACH,KAHD;AAIH;AAjB6B,CAAD,CAAjC;AAoBA,OAAO,MAAME,eAAe,GAAGZ,aAAa,CAACa,OAAtC","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { userAPI } from '@src/api/api';\r\nimport { CardDataTypes } from '@root/types/CardDataTypes';\r\n\r\nconst initialState = {\r\n    isFetch: false,\r\n    error: null,\r\n    data: {\r\n        data: [],\r\n    },\r\n};\r\n\r\n// Async thunk\r\nexport const fetchCardData = createAsyncThunk<never, CardDataTypes>(\r\n    'cardData/fetchCardData',\r\n    async ({ itemsPerPage, page, type }, { rejectWithValue }) => {\r\n        try {\r\n            return await userAPI.getCardData(itemsPerPage, page, type);\r\n        } catch (e) {\r\n            return rejectWithValue(e.message);\r\n        }\r\n    },\r\n);\r\n\r\n// Slice\r\nconst cardDataSlice = createSlice({\r\n    name: 'cardData',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchCardData.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        });\r\n        builder.addCase(fetchCardData.fulfilled, (state, action) => {\r\n            state.isFetch = false;\r\n            state.data = action.payload;\r\n        });\r\n        builder.addCase(fetchCardData.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        });\r\n    },\r\n});\r\n\r\nexport const cardDataReducer = cardDataSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}