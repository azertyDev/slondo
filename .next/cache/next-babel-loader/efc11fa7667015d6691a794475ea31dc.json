{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport { Router } from \"@root/i18n\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setAdvrtCtgryAction } from '@src/redux/slices/createAdvrtSlice';\nimport { Typography } from \"@material-ui/core\";\nimport { ButtonComponent } from \"@src/components/elements/button/Button\";\nimport { adTypeAndCtgrySchema } from \"@src/validation_schemas/validationSchemas\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { useStyles } from './useStyles';\nexport var adTypes = [{\n  adType: {\n    id: 1,\n    name: 'Объявление'\n  }\n}, {\n  adType: {\n    id: 2,\n    name: 'Торг'\n  }\n}, {\n  adType: {\n    id: 3,\n    name: 'Продвинутый торг'\n  }\n}];\nvar initValues = {\n  adType: {\n    id: null,\n    name: 'Выберите тип'\n  },\n  adCategory: {\n    id: null,\n    name: 'Выберите категорию'\n  }\n};\nexport var CreateAdModalForm = function CreateAdModalForm(props) {\n  _s();\n\n  var handleCloseModal = props.handleCloseModal;\n  var dispatch = useDispatch();\n  var categoriesList = useSelector(function (_ref) {\n    var categories = _ref.categories;\n    return categories.list;\n  });\n\n  var _useState = useState(null),\n      typeAnchor = _useState[0],\n      setTypeAnchor = _useState[1];\n\n  var _useState2 = useState(null),\n      estateAnchor = _useState2[0],\n      setEstateAnchor = _useState2[1];\n\n  var handleMenuOpen = function handleMenuOpen(anchor) {\n    return function (e) {\n      anchor(e.currentTarget);\n    };\n  };\n\n  var handleMenuClose = function handleMenuClose(anchor) {\n    return function () {\n      anchor(null);\n    };\n  };\n\n  var submit = function submit(values) {\n    dispatch(setAdvrtCtgryAction(values));\n    Router.push('/create_advertisement');\n    handleCloseModal();\n  };\n\n  var classes = useStyles();\n  return __jsx(Formik, {\n    initialValues: initValues,\n    validationSchema: adTypeAndCtgrySchema,\n    onSubmit: submit\n  }, function (_ref2) {\n    var errors = _ref2.errors,\n        touched = _ref2.touched,\n        values = _ref2.values,\n        setValues = _ref2.setValues,\n        handleBlur = _ref2.handleBlur;\n\n    var handleClickMenuItem = function handleClickMenuItem(newValue) {\n      return function () {\n        setValues(_objectSpread(_objectSpread({}, values), newValue));\n      };\n    };\n\n    console.log(values);\n    return __jsx(Form, {\n      className: classes.root\n    }, __jsx(\"div\", {\n      className: \"menu-btns\"\n    }, __jsx(\"div\", null, __jsx(Typography, null, errors.adType && touched.adType ? errors.adType.id : ''), __jsx(ButtonComponent, {\n      onClick: handleMenuOpen(setTypeAnchor)\n    }, values.adType.name), __jsx(CustomMenu, {\n      items: adTypes,\n      anchorEl: typeAnchor,\n      open: Boolean(typeAnchor),\n      onBlur: handleBlur,\n      onClose: handleMenuClose(setTypeAnchor),\n      onClick: handleClickMenuItem\n    })), __jsx(\"div\", null, __jsx(Typography, null, errors.adCategory && touched.adCategory ? errors.adCategory.id : ''), __jsx(ButtonComponent, {\n      onClick: handleMenuOpen(setEstateAnchor)\n    }, values.adCategory.name), __jsx(CustomMenu, {\n      items: categoriesList,\n      anchorEl: estateAnchor,\n      open: Boolean(typeAnchor),\n      onBlur: handleBlur,\n      onClose: handleMenuClose(setEstateAnchor),\n      onClick: handleClickMenuItem\n    }))), __jsx(\"div\", {\n      className: \"form-btns\"\n    }, __jsx(ButtonComponent, {\n      onClick: handleCloseModal\n    }, __jsx(Typography, null, \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0430\")), __jsx(ButtonComponent, {\n      type: \"submit\"\n    }, __jsx(Typography, null, \"\\u041F\\u0440\\u043E\\u0434\\u043E\\u043B\\u0436\\u0438\\u0442\\u044C\"))));\n  });\n};\n\n_s(CreateAdModalForm, \"VSy5binRk2f5rdRjJ4PGUPpLePg=\", false, function () {\n  return [useDispatch, useSelector, useStyles];\n});\n\n_c = CreateAdModalForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateAdModalForm\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/createAdModalForm/CreateAdModalForm.tsx"],"names":["React","useState","Formik","Form","Router","useDispatch","useSelector","setAdvrtCtgryAction","Typography","ButtonComponent","adTypeAndCtgrySchema","CustomMenu","useStyles","adTypes","adType","id","name","initValues","adCategory","CreateAdModalForm","props","handleCloseModal","dispatch","categoriesList","categories","list","typeAnchor","setTypeAnchor","estateAnchor","setEstateAnchor","handleMenuOpen","anchor","e","currentTarget","handleMenuClose","submit","values","push","classes","errors","touched","setValues","handleBlur","handleClickMenuItem","newValue","console","log","root","Boolean"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAmBC,QAAnB,QAAkC,OAAlC;AACA,SAAQC,MAAR,EAAgBC,IAAhB,QAAwC,QAAxC;AACA,SAAQC,MAAR,QAAqB,YAArB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,mBAAR,QAAkC,oCAAlC;AACA,SAAQC,UAAR,QAAyB,mBAAzB;AACA,SAAQC,eAAR,QAA8B,wCAA9B;AACA,SAAQC,oBAAR,QAAmC,2CAAnC;AAEA,SAAQC,UAAR,QAAyB,iDAAzB;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAGA,OAAO,IAAMC,OAAO,GAAG,CACnB;AAACC,EAAAA,MAAM,EAAE;AAACC,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAE;AAAd;AAAT,CADmB,EAEnB;AAACF,EAAAA,MAAM,EAAE;AAACC,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAE;AAAd;AAAT,CAFmB,EAGnB;AAACF,EAAAA,MAAM,EAAE;AAACC,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAE;AAAd;AAAT,CAHmB,CAAhB;AAMP,IAAMC,UAAU,GAAG;AACfH,EAAAA,MAAM,EAAE;AACJC,IAAAA,EAAE,EAAE,IADA;AAEJC,IAAAA,IAAI,EAAE;AAFF,GADO;AAKfE,EAAAA,UAAU,EAAE;AACRH,IAAAA,EAAE,EAAE,IADI;AAERC,IAAAA,IAAI,EAAE;AAFE;AALG,CAAnB;AAWA,OAAO,IAAMG,iBAA0B,GAAG,SAA7BA,iBAA6B,CAACC,KAAD,EAAW;AAAA;;AAAA,MAC1CC,gBAD0C,GACtBD,KADsB,CAC1CC,gBAD0C;AAGjD,MAAMC,QAAQ,GAAGjB,WAAW,EAA5B;AACA,MAAMkB,cAAc,GAAGjB,WAAW,CAAC;AAAA,QAAEkB,UAAF,QAAEA,UAAF;AAAA,WAA6BA,UAAU,CAACC,IAAxC;AAAA,GAAD,CAAlC;;AAJiD,kBAMbxB,QAAQ,CAAC,IAAD,CANK;AAAA,MAM1CyB,UAN0C;AAAA,MAM9BC,aAN8B;;AAAA,mBAOT1B,QAAQ,CAAC,IAAD,CAPC;AAAA,MAO1C2B,YAP0C;AAAA,MAO5BC,eAP4B;;AASjD,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD;AAAA,WAAY,UAACC,CAAD,EAAO;AACtCD,MAAAA,MAAM,CAACC,CAAC,CAACC,aAAH,CAAN;AACH,KAFsB;AAAA,GAAvB;;AAIA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACH,MAAD;AAAA,WAAY,YAAM;AACtCA,MAAAA,MAAM,CAAC,IAAD,CAAN;AACH,KAFuB;AAAA,GAAxB;;AAIA,MAAMI,MAAM,GAAG,SAATA,MAAS,CAACC,MAAD,EAAY;AACvBd,IAAAA,QAAQ,CAACf,mBAAmB,CAAC6B,MAAD,CAApB,CAAR;AACAhC,IAAAA,MAAM,CAACiC,IAAP,CAAY,uBAAZ;AACAhB,IAAAA,gBAAgB;AACnB,GAJD;;AAMA,MAAMiB,OAAO,GAAG1B,SAAS,EAAzB;AACA,SACI,MAAC,MAAD;AAAQ,IAAA,aAAa,EAAEK,UAAvB;AAAmC,IAAA,gBAAgB,EAAEP,oBAArD;AAA2E,IAAA,QAAQ,EAAEyB;AAArF,KAEQ,iBAM2C;AAAA,QALtCI,MAKsC,SALtCA,MAKsC;AAAA,QAJtCC,OAIsC,SAJtCA,OAIsC;AAAA,QAHtCJ,MAGsC,SAHtCA,MAGsC;AAAA,QAFtCK,SAEsC,SAFtCA,SAEsC;AAAA,QADtCC,UACsC,SADtCA,UACsC;;AAEvC,QAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,QAAD;AAAA,aAAc,YAAM;AAC5CH,QAAAA,SAAS,iCAAKL,MAAL,GAAgBQ,QAAhB,EAAT;AACH,OAF2B;AAAA,KAA5B;;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AACA,WACI,MAAC,IAAD;AAAM,MAAA,SAAS,EAAEE,OAAO,CAACS;AAAzB,OACI;AAAK,MAAA,SAAS,EAAC;AAAf,OACI,mBACI,MAAC,UAAD,QAAaR,MAAM,CAACzB,MAAP,IAAiB0B,OAAO,CAAC1B,MAAzB,GAAkCyB,MAAM,CAACzB,MAAP,CAAcC,EAAhD,GAAqD,EAAlE,CADJ,EAEI,MAAC,eAAD;AAAiB,MAAA,OAAO,EAAEe,cAAc,CAACH,aAAD;AAAxC,OACKS,MAAM,CAACtB,MAAP,CAAcE,IADnB,CAFJ,EAKI,MAAC,UAAD;AACI,MAAA,KAAK,EAAEH,OADX;AAEI,MAAA,QAAQ,EAAEa,UAFd;AAGI,MAAA,IAAI,EAAEsB,OAAO,CAACtB,UAAD,CAHjB;AAII,MAAA,MAAM,EAAEgB,UAJZ;AAKI,MAAA,OAAO,EAAER,eAAe,CAACP,aAAD,CAL5B;AAMI,MAAA,OAAO,EAAEgB;AANb,MALJ,CADJ,EAeI,mBACI,MAAC,UAAD,QAAaJ,MAAM,CAACrB,UAAP,IAAqBsB,OAAO,CAACtB,UAA7B,GAA0CqB,MAAM,CAACrB,UAAP,CAAkBH,EAA5D,GAAiE,EAA9E,CADJ,EAEI,MAAC,eAAD;AAAiB,MAAA,OAAO,EAAEe,cAAc,CAACD,eAAD;AAAxC,OACKO,MAAM,CAAClB,UAAP,CAAkBF,IADvB,CAFJ,EAKI,MAAC,UAAD;AACI,MAAA,KAAK,EAAEO,cADX;AAEI,MAAA,QAAQ,EAAEK,YAFd;AAGI,MAAA,IAAI,EAAEoB,OAAO,CAACtB,UAAD,CAHjB;AAII,MAAA,MAAM,EAAEgB,UAJZ;AAKI,MAAA,OAAO,EAAER,eAAe,CAACL,eAAD,CAL5B;AAMI,MAAA,OAAO,EAAEc;AANb,MALJ,CAfJ,CADJ,EA+BI;AAAK,MAAA,SAAS,EAAC;AAAf,OACI,MAAC,eAAD;AAAiB,MAAA,OAAO,EAAEtB;AAA1B,OACI,MAAC,UAAD,+CADJ,CADJ,EAII,MAAC,eAAD;AAAiB,MAAA,IAAI,EAAC;AAAtB,OACI,MAAC,UAAD,uEADJ,CAJJ,CA/BJ,CADJ;AA0CH,GAxDT,CADJ;AA6DH,CArFM;;GAAMF,iB;UAGQd,W,EACMC,W,EAmBPM,S;;;KAvBPO,iB","sourcesContent":["import React, {FC, useState} from \"react\";\r\nimport {Formik, Form, FormikProps} from \"formik\";\r\nimport {Router} from \"@root/i18n\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setAdvrtCtgryAction} from '@src/redux/slices/createAdvrtSlice';\r\nimport {Typography} from \"@material-ui/core\";\r\nimport {ButtonComponent} from \"@src/components/elements/button/Button\";\r\nimport {adTypeAndCtgrySchema} from \"@src/validation_schemas/validationSchemas\";\r\nimport {RootState} from \"@src/redux/rootReducer\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const adTypes = [\r\n    {adType: {id: 1, name: 'Объявление'}},\r\n    {adType: {id: 2, name: 'Торг'}},\r\n    {adType: {id: 3, name: 'Продвинутый торг'}},\r\n];\r\n\r\nconst initValues = {\r\n    adType: {\r\n        id: null,\r\n        name: 'Выберите тип'\r\n    },\r\n    adCategory: {\r\n        id: null,\r\n        name: 'Выберите категорию'\r\n    }\r\n};\r\n\r\nexport const CreateAdModalForm: FC<any> = (props) => {\r\n    const {handleCloseModal} = props;\r\n\r\n    const dispatch = useDispatch();\r\n    const categoriesList = useSelector(({categories}: RootState) => categories.list);\r\n\r\n    const [typeAnchor, setTypeAnchor] = useState(null);\r\n    const [estateAnchor, setEstateAnchor] = useState(null);\r\n\r\n    const handleMenuOpen = (anchor) => (e) => {\r\n        anchor(e.currentTarget);\r\n    };\r\n\r\n    const handleMenuClose = (anchor) => () => {\r\n        anchor(null);\r\n    };\r\n\r\n    const submit = (values) => {\r\n        dispatch(setAdvrtCtgryAction(values));\r\n        Router.push('/create_advertisement');\r\n        handleCloseModal();\r\n    };\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <Formik initialValues={initValues} validationSchema={adTypeAndCtgrySchema} onSubmit={submit}>\r\n            {\r\n                ({\r\n                     errors,\r\n                     touched,\r\n                     values,\r\n                     setValues,\r\n                     handleBlur\r\n                 }: FormikProps<any> & { errors: any }) => {\r\n\r\n                    const handleClickMenuItem = (newValue) => () => {\r\n                        setValues({...values, ...newValue});\r\n                    };\r\n                    console.log(values)\r\n                    return (\r\n                        <Form className={classes.root}>\r\n                            <div className='menu-btns'>\r\n                                <div>\r\n                                    <Typography>{errors.adType && touched.adType ? errors.adType.id : ''}</Typography>\r\n                                    <ButtonComponent onClick={handleMenuOpen(setTypeAnchor)}>\r\n                                        {values.adType.name}\r\n                                    </ButtonComponent>\r\n                                    <CustomMenu\r\n                                        items={adTypes}\r\n                                        anchorEl={typeAnchor}\r\n                                        open={Boolean(typeAnchor)}\r\n                                        onBlur={handleBlur}\r\n                                        onClose={handleMenuClose(setTypeAnchor)}\r\n                                        onClick={handleClickMenuItem}\r\n                                    />\r\n                                </div>\r\n                                <div>\r\n                                    <Typography>{errors.adCategory && touched.adCategory ? errors.adCategory.id : ''}</Typography>\r\n                                    <ButtonComponent onClick={handleMenuOpen(setEstateAnchor)}>\r\n                                        {values.adCategory.name}\r\n                                    </ButtonComponent>\r\n                                    <CustomMenu\r\n                                        items={categoriesList}\r\n                                        anchorEl={estateAnchor}\r\n                                        open={Boolean(typeAnchor)}\r\n                                        onBlur={handleBlur}\r\n                                        onClose={handleMenuClose(setEstateAnchor)}\r\n                                        onClick={handleClickMenuItem}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className='form-btns'>\r\n                                <ButtonComponent onClick={handleCloseModal}>\r\n                                    <Typography>Отмена</Typography>\r\n                                </ButtonComponent>\r\n                                <ButtonComponent type='submit'>\r\n                                    <Typography>Продолжить</Typography>\r\n                                </ButtonComponent>\r\n                            </div>\r\n                        </Form>\r\n                    )\r\n                }\r\n            }\r\n        </Formik>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}