{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useRef, useState, useEffect } from 'react';\nimport { CustomSlider } from '../custom_slider/CustomSlider';\nimport { useStyles } from './useStyles';\nexport const SyncSliders = props => {\n  const {\n    imgs,\n    setInitialSlide,\n    initialSlide = 0,\n    isModalOpen = false,\n    handleOpenModal = null\n  } = props;\n  const {\n    0: slidersNav,\n    1: setSlidersNav\n  } = useState({\n    nav1: null,\n    nav2: null\n  });\n  const slider1 = useRef();\n  const slider2 = useRef();\n\n  const handleAfterChange = newIndex => {\n    setInitialSlide(!!newIndex ? newIndex + 1 : newIndex);\n  };\n\n  useEffect(() => {\n    setSlidersNav({\n      nav1: slider1.current,\n      nav2: slider2.current\n    });\n  }, []);\n  const classes = useStyles(isModalOpen);\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", {\n    className: classes.firstSlider\n  }, __jsx(CustomSlider, {\n    ref: slider1,\n    asNavFor: slidersNav.nav2,\n    centerMode: imgs.length === 1,\n    variableWidth: !isModalOpen,\n    focusOnSelect: true,\n    afterChange: handleAfterChange,\n    initialSlide: initialSlide\n  }, imgs.map((img, i) => __jsx(\"img\", {\n    key: i,\n    alt: img.alt,\n    src: img.url.default,\n    onClick: handleOpenModal\n  })))), __jsx(\"div\", {\n    className: classes.secondSlider\n  }, __jsx(CustomSlider, {\n    ref: slider2,\n    asNavFor: slidersNav.nav1,\n    slidesToShow: 4,\n    slidesToScroll: 1,\n    arrows: false,\n    focusOnSelect: true,\n    initialSlide: initialSlide\n  }, imgs.map(({\n    url,\n    alt\n  }, i) => __jsx(\"img\", {\n    key: i,\n    alt: alt,\n    src: url.default\n  })))));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/sync_sliders/SyncSliders.tsx"],"names":["React","useRef","useState","useEffect","CustomSlider","useStyles","SyncSliders","props","imgs","setInitialSlide","initialSlide","isModalOpen","handleOpenModal","slidersNav","setSlidersNav","nav1","nav2","slider1","slider2","handleAfterChange","newIndex","current","classes","root","firstSlider","length","map","img","i","alt","url","default","secondSlider"],"mappings":";AAAA,OAAOA,KAAP,IAKIC,MALJ,EAMIC,QANJ,EAOIC,SAPJ,QAQO,OARP;AASA,SAAQC,YAAR,QAA2B,+BAA3B;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAcA,OAAO,MAAMC,WAAiC,GAAIC,KAAD,IAAW;AACxD,QAAM;AACFC,IAAAA,IADE;AAEFC,IAAAA,eAFE;AAGFC,IAAAA,YAAY,GAAG,CAHb;AAIFC,IAAAA,WAAW,GAAG,KAJZ;AAKFC,IAAAA,eAAe,GAAG;AALhB,MAMFL,KANJ;AAQA,QAAM;AAAA,OAACM,UAAD;AAAA,OAAaC;AAAb,MAA8BZ,QAAQ,CAAC;AAACa,IAAAA,IAAI,EAAE,IAAP;AAAaC,IAAAA,IAAI,EAAE;AAAnB,GAAD,CAA5C;AACA,QAAMC,OAAkC,GAAGhB,MAAM,EAAjD;AACA,QAAMiB,OAAkC,GAAGjB,MAAM,EAAjD;;AAEA,QAAMkB,iBAAiB,GAAIC,QAAD,IAAc;AACpCX,IAAAA,eAAe,CACX,CAAC,CAACW,QAAF,GACMA,QAAQ,GAAG,CADjB,GAEMA,QAHK,CAAf;AAKH,GAND;;AAQAjB,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,aAAa,CAAC;AACVC,MAAAA,IAAI,EAAEE,OAAO,CAACI,OADJ;AAEVL,MAAAA,IAAI,EAAEE,OAAO,CAACG;AAFJ,KAAD,CAAb;AAIH,GALQ,EAKN,EALM,CAAT;AAOA,QAAMC,OAAO,GAAGjB,SAAS,CAACM,WAAD,CAAzB;AACA,SACI;AAAK,IAAA,SAAS,EAAEW,OAAO,CAACC;AAAxB,KACI;AAAK,IAAA,SAAS,EAAED,OAAO,CAACE;AAAxB,KACI,MAAC,YAAD;AACI,IAAA,GAAG,EAAEP,OADT;AAEI,IAAA,QAAQ,EAAEJ,UAAU,CAACG,IAFzB;AAGI,IAAA,UAAU,EAAER,IAAI,CAACiB,MAAL,KAAgB,CAHhC;AAII,IAAA,aAAa,EAAE,CAACd,WAJpB;AAKI,IAAA,aAAa,EAAE,IALnB;AAMI,IAAA,WAAW,EAAEQ,iBANjB;AAOI,IAAA,YAAY,EAAET;AAPlB,KASKF,IAAI,CAACkB,GAAL,CAAS,CAACC,GAAD,EAAMC,CAAN,KACN;AACI,IAAA,GAAG,EAAEA,CADT;AAEI,IAAA,GAAG,EAAED,GAAG,CAACE,GAFb;AAGI,IAAA,GAAG,EAAEF,GAAG,CAACG,GAAJ,CAAQC,OAHjB;AAII,IAAA,OAAO,EAAEnB;AAJb,IADH,CATL,CADJ,CADJ,EAqBI;AAAK,IAAA,SAAS,EAAEU,OAAO,CAACU;AAAxB,KACI,MAAC,YAAD;AACI,IAAA,GAAG,EAAEd,OADT;AAEI,IAAA,QAAQ,EAAEL,UAAU,CAACE,IAFzB;AAGI,IAAA,YAAY,EAAE,CAHlB;AAII,IAAA,cAAc,EAAE,CAJpB;AAKI,IAAA,MAAM,EAAE,KALZ;AAMI,IAAA,aAAa,EAAE,IANnB;AAOI,IAAA,YAAY,EAAEL;AAPlB,KASKF,IAAI,CAACkB,GAAL,CAAS,CAAC;AAACI,IAAAA,GAAD;AAAMD,IAAAA;AAAN,GAAD,EAAaD,CAAb,KACN;AACI,IAAA,GAAG,EAAEA,CADT;AAEI,IAAA,GAAG,EAAEC,GAFT;AAGI,IAAA,GAAG,EAAEC,GAAG,CAACC;AAHb,IADH,CATL,CADJ,CArBJ,CADJ;AA2CH,CAxEM","sourcesContent":["import React, {\r\n    FC,\r\n    Dispatch,\r\n    SetStateAction,\r\n    MutableRefObject,\r\n    useRef,\r\n    useState,\r\n    useEffect,\r\n} from 'react';\r\nimport {CustomSlider} from '../custom_slider/CustomSlider';\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\ntype SyncSlidersProps = {\r\n    isModalOpen?: boolean;\r\n    initialSlide?: number;\r\n    handleOpenModal?: () => void;\r\n    setInitialSlide: Dispatch<SetStateAction<number>>;\r\n    imgs: {\r\n        alt: string;\r\n        url: { default: string }\r\n    }[];\r\n};\r\n\r\nexport const SyncSliders: FC<SyncSlidersProps> = (props) => {\r\n    const {\r\n        imgs,\r\n        setInitialSlide,\r\n        initialSlide = 0,\r\n        isModalOpen = false,\r\n        handleOpenModal = null,\r\n    } = props;\r\n\r\n    const [slidersNav, setSlidersNav] = useState({nav1: null, nav2: null});\r\n    const slider1: MutableRefObject<unknown> = useRef();\r\n    const slider2: MutableRefObject<unknown> = useRef();\r\n\r\n    const handleAfterChange = (newIndex) => {\r\n        setInitialSlide(\r\n            !!newIndex\r\n                ? newIndex + 1\r\n                : newIndex\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        setSlidersNav({\r\n            nav1: slider1.current,\r\n            nav2: slider2.current,\r\n        });\r\n    }, []);\r\n\r\n    const classes = useStyles(isModalOpen);\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.firstSlider}>\r\n                <CustomSlider\r\n                    ref={slider1}\r\n                    asNavFor={slidersNav.nav2}\r\n                    centerMode={imgs.length === 1}\r\n                    variableWidth={!isModalOpen}\r\n                    focusOnSelect={true}\r\n                    afterChange={handleAfterChange}\r\n                    initialSlide={initialSlide}\r\n                >\r\n                    {imgs.map((img, i) => (\r\n                        <img\r\n                            key={i}\r\n                            alt={img.alt}\r\n                            src={img.url.default}\r\n                            onClick={handleOpenModal}\r\n                        />\r\n                    ))}\r\n                </CustomSlider>\r\n            </div>\r\n            <div className={classes.secondSlider}>\r\n                <CustomSlider\r\n                    ref={slider2}\r\n                    asNavFor={slidersNav.nav1}\r\n                    slidesToShow={4}\r\n                    slidesToScroll={1}\r\n                    arrows={false}\r\n                    focusOnSelect={true}\r\n                    initialSlide={initialSlide}\r\n                >\r\n                    {imgs.map(({url, alt}, i) => (\r\n                        <img\r\n                            key={i}\r\n                            alt={alt}\r\n                            src={url.default}\r\n                        />\r\n                    ))}\r\n                </CustomSlider>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}