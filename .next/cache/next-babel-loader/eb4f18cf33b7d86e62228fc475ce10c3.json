{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nvar serverUrl = process.env.SERVER_URL;\nvar port = process.env.PORT;\nvar apolloClient;\n\nfunction createIsomorphLink() {\n  if (false) {\n    var _require = require('@apollo/client/link/schema'),\n        SchemaLink = _require.SchemaLink;\n\n    var _require2 = require('./schema'),\n        schema = _require2.schema;\n\n    return new SchemaLink({\n      schema: schema\n    });\n  } else {\n    var _require3 = require('@apollo/client/link/http'),\n        HttpLink = _require3.HttpLink;\n\n    return new HttpLink({\n      uri: \"\".concat(serverUrl).concat(port, \"/api/graphql\"),\n      credentials: 'same-origin'\n    });\n  }\n}\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: false,\n    link: createIsomorphLink(),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo() {\n  var _apolloClient2;\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (false) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  _s();\n\n  var store = useMemo(function () {\n    return initializeApollo(initialState);\n  }, [initialState]);\n  return store;\n}\n\n_s(useApollo, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/apollo/client.js"],"names":["useMemo","ApolloClient","InMemoryCache","serverUrl","process","env","SERVER_URL","port","PORT","apolloClient","createIsomorphLink","require","SchemaLink","schema","HttpLink","uri","credentials","createApolloClient","ssrMode","link","cache","initializeApollo","initialState","_apolloClient","restore","useApollo","store"],"mappings":";;AAAA,SAAQA,OAAR,QAAsB,OAAtB;AACA,SAAQC,YAAR,EAAsBC,aAAtB,QAA0C,gBAA1C;AAEA,IAAMC,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAA9B;AACA,IAAMC,IAAI,GAAGH,OAAO,CAACC,GAAR,CAAYG,IAAzB;AACA,IAAIC,YAAJ;;AAEA,SAASC,kBAAT,GAA8B;AAC1B,aAAmC;AAAA,mBACVC,OAAO,CAAC,4BAAD,CADG;AAAA,QACxBC,UADwB,YACxBA,UADwB;;AAAA,oBAEdD,OAAO,CAAC,UAAD,CAFO;AAAA,QAExBE,MAFwB,aAExBA,MAFwB;;AAG/B,WAAO,IAAID,UAAJ,CAAe;AAACC,MAAAA,MAAM,EAANA;AAAD,KAAf,CAAP;AACH,GAJD,MAIO;AAAA,oBACgBF,OAAO,CAAC,0BAAD,CADvB;AAAA,QACIG,QADJ,aACIA,QADJ;;AAEH,WAAO,IAAIA,QAAJ,CAAa;AAChBC,MAAAA,GAAG,YAAKZ,SAAL,SAAiBI,IAAjB,iBADa;AAEhBS,MAAAA,WAAW,EAAE;AAFG,KAAb,CAAP;AAIH;AACJ;;AAED,SAASC,kBAAT,GAA8B;AAC1B,SAAO,IAAIhB,YAAJ,CAAiB;AACpBiB,IAAAA,OAAO,OADa;AAEpBC,IAAAA,IAAI,EAAET,kBAAkB,EAFJ;AAGpBU,IAAAA,KAAK,EAAE,IAAIlB,aAAJ;AAHa,GAAjB,CAAP;AAKH;;AAED,OAAO,SAASmB,gBAAT,GAA+C;AAAA;;AAAA,MAArBC,YAAqB,uEAAN,IAAM;;AAClD,MAAMC,aAAa,qBAAGd,YAAH,2DAAmBQ,kBAAkB,EAAxD,CADkD,CAGlD;AACA;;;AACA,MAAIK,YAAJ,EAAkB;AACdC,IAAAA,aAAa,CAACH,KAAd,CAAoBI,OAApB,CAA4BF,YAA5B;AACH,GAPiD,CAQlD;;;AACA,aAAmC,OAAOC,aAAP,CATe,CAUlD;;AACA,MAAI,CAACd,YAAL,EAAmBA,YAAY,GAAGc,aAAf;AAEnB,SAAOA,aAAP;AACH;AAED,OAAO,SAASE,SAAT,CAAmBH,YAAnB,EAAiC;AAAA;;AACpC,MAAMI,KAAK,GAAG1B,OAAO,CAAC;AAAA,WAAMqB,gBAAgB,CAACC,YAAD,CAAtB;AAAA,GAAD,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOI,KAAP;AACH;;GAHeD,S","sourcesContent":["import {useMemo} from 'react'\r\nimport {ApolloClient, InMemoryCache} from '@apollo/client'\r\n\r\nconst serverUrl = process.env.SERVER_URL\r\nconst port = process.env.PORT\r\nlet apolloClient\r\n\r\nfunction createIsomorphLink() {\r\n    if (typeof window === 'undefined') {\r\n        const {SchemaLink} = require('@apollo/client/link/schema')\r\n        const {schema} = require('./schema')\r\n        return new SchemaLink({schema})\r\n    } else {\r\n        const {HttpLink} = require('@apollo/client/link/http')\r\n        return new HttpLink({\r\n            uri: `${serverUrl}${port}/api/graphql`,\r\n            credentials: 'same-origin',\r\n        })\r\n    }\r\n}\r\n\r\nfunction createApolloClient() {\r\n    return new ApolloClient({\r\n        ssrMode: typeof window === 'undefined',\r\n        link: createIsomorphLink(),\r\n        cache: new InMemoryCache(),\r\n    })\r\n}\r\n\r\nexport function initializeApollo(initialState = null) {\r\n    const _apolloClient = apolloClient ?? createApolloClient()\r\n    \r\n    // If your page has Next.js data fetching methods that use Apollo Client, the initial state\r\n    // gets hydrated here\r\n    if (initialState) {\r\n        _apolloClient.cache.restore(initialState)\r\n    }\r\n    // For SSG and SSR always create a new Apollo Client\r\n    if (typeof window === 'undefined') return _apolloClient\r\n    // Create the Apollo Client once in the client\r\n    if (!apolloClient) apolloClient = _apolloClient\r\n    \r\n    return _apolloClient\r\n}\r\n\r\nexport function useApollo(initialState) {\r\n    const store = useMemo(() => initializeApollo(initialState), [initialState])\r\n    return store\r\n}"]},"metadata":{},"sourceType":"module"}