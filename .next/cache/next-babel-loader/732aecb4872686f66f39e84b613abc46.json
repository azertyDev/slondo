{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from \"@src/api/api\";\nconst initialState = {\n  isFetch: false,\n  error: null,\n  isLot: false,\n  category: {\n    id: null,\n    name: null,\n    childs: [{\n      id: null,\n      name: \"\",\n      image: {\n        id: null,\n        url: \"\"\n      },\n      icons: {\n        id: null,\n        url: \"\"\n      }\n    }]\n  }\n};\nexport const fetchAd = createAsyncThunk('adOrLot/fetchAd', async ({\n  ctgryID,\n  subCtgryID\n}, {\n  rejectWithValue\n}) => {\n  try {\n    return await userAPI.getAdOrLot(ctgryID, subCtgryID, false);\n  } catch (e) {\n    return rejectWithValue(e.message);\n  }\n});\nexport const fetchLot = createAsyncThunk('adOrLot/fetchLot', async ({\n  ctgryID,\n  subCtgryID\n}, {\n  rejectWithValue\n}) => {\n  try {\n    return await userAPI.getAdOrLot(ctgryID, subCtgryID, true);\n  } catch (e) {\n    return rejectWithValue(e.message);\n  }\n});\nconst createAdOrLotSlice = createSlice({\n  name: 'adOrLot',\n  initialState,\n  reducers: {\n    setAdOrLotCtgryAction: (state, action) => {\n      state.category = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAd.pending, state => {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchAd.fulfilled, (state, action) => {\n      state.isFetch = false;\n      state.isLot = false;\n    });\n    builder.addCase(fetchAd.rejected, (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n    builder.addCase(fetchLot.pending, state => {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchLot.fulfilled, (state, action) => {\n      state.isFetch = false;\n      state.isLot = true;\n    });\n    builder.addCase(fetchLot.rejected, (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  setAdOrLotCtgryAction\n} = createAdOrLotSlice.actions;\nexport const createAdOrLotReducer = createAdOrLotSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/createAdOrLotSlice.ts"],"names":["createAsyncThunk","createSlice","userAPI","initialState","isFetch","error","isLot","category","id","name","childs","image","url","icons","fetchAd","ctgryID","subCtgryID","rejectWithValue","getAdOrLot","e","message","fetchLot","createAdOrLotSlice","reducers","setAdOrLotCtgryAction","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","createAdOrLotReducer","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AAEA,SAAQC,OAAR,QAAsB,cAAtB;AAIA,MAAMC,YAAsB,GAAG;AAC3BC,EAAAA,OAAO,EAAE,KADkB;AAE3BC,EAAAA,KAAK,EAAE,IAFoB;AAG3BC,EAAAA,KAAK,EAAE,KAHoB;AAI3BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,EAAE,EAAE,IADE;AAENC,IAAAA,IAAI,EAAE,IAFA;AAGNC,IAAAA,MAAM,EAAE,CAAC;AACLF,MAAAA,EAAE,EAAE,IADC;AAELC,MAAAA,IAAI,EAAE,EAFD;AAGLE,MAAAA,KAAK,EAAE;AACHH,QAAAA,EAAE,EAAE,IADD;AAEHI,QAAAA,GAAG,EAAE;AAFF,OAHF;AAOLC,MAAAA,KAAK,EAAE;AACHL,QAAAA,EAAE,EAAE,IADD;AAEHI,QAAAA,GAAG,EAAE;AAFF;AAPF,KAAD;AAHF;AAJiB,CAA/B;AAsBA,OAAO,MAAME,OAAO,GAAGd,gBAAgB,CACnC,iBADmC,EAEnC,OAAO;AAACe,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAP,EAA8B;AAACC,EAAAA;AAAD,CAA9B,KAAoD;AAChD,MAAI;AACA,WAAO,MAAMf,OAAO,CAACgB,UAAR,CAAmBH,OAAnB,EAA4BC,UAA5B,EAAwC,KAAxC,CAAb;AACH,GAFD,CAEE,OAAOG,CAAP,EAAU;AACR,WAAOF,eAAe,CAACE,CAAC,CAACC,OAAH,CAAtB;AACH;AACJ,CARkC,CAAhC;AAWP,OAAO,MAAMC,QAAQ,GAAGrB,gBAAgB,CACpC,kBADoC,EAEpC,OAAO;AAACe,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAP,EAA8B;AAACC,EAAAA;AAAD,CAA9B,KAAoD;AAChD,MAAI;AACA,WAAO,MAAMf,OAAO,CAACgB,UAAR,CAAmBH,OAAnB,EAA4BC,UAA5B,EAAwC,IAAxC,CAAb;AACH,GAFD,CAEE,OAAOG,CAAP,EAAU;AACR,WAAOF,eAAe,CAACE,CAAC,CAACC,OAAH,CAAtB;AACH;AACJ,CARmC,CAAjC;AAWP,MAAME,kBAAkB,GAAGrB,WAAW,CAAC;AACnCQ,EAAAA,IAAI,EAAE,SAD6B;AAEnCN,EAAAA,YAFmC;AAGnCoB,EAAAA,QAAQ,EAAE;AACNC,IAAAA,qBAAqB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtCD,MAAAA,KAAK,CAAClB,QAAN,GAAiBmB,MAAM,CAACC,OAAxB;AACH;AAHK,GAHyB;AAQnCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBhB,OAAO,CAACiB,OAAxB,EAAkCN,KAAD,IAAW;AACxCA,MAAAA,KAAK,CAACrB,OAAN,GAAgB,IAAhB;AACAqB,MAAAA,KAAK,CAACpB,KAAN,GAAc,IAAd;AACH,KAHD;AAIAwB,IAAAA,OAAO,CAACC,OAAR,CAAgBhB,OAAO,CAACkB,SAAxB,EAAmC,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAClDD,MAAAA,KAAK,CAACrB,OAAN,GAAgB,KAAhB;AACAqB,MAAAA,KAAK,CAACnB,KAAN,GAAc,KAAd;AACH,KAHD;AAIAuB,IAAAA,OAAO,CAACC,OAAR,CAAgBhB,OAAO,CAACmB,QAAxB,EAAkC,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACjDD,MAAAA,KAAK,CAACrB,OAAN,GAAgB,KAAhB;AACAqB,MAAAA,KAAK,CAACpB,KAAN,GAAcqB,MAAM,CAACC,OAArB;AACH,KAHD;AAIAE,IAAAA,OAAO,CAACC,OAAR,CAAgBT,QAAQ,CAACU,OAAzB,EAAmCN,KAAD,IAAW;AACzCA,MAAAA,KAAK,CAACrB,OAAN,GAAgB,IAAhB;AACAqB,MAAAA,KAAK,CAACpB,KAAN,GAAc,IAAd;AACH,KAHD;AAIAwB,IAAAA,OAAO,CAACC,OAAR,CAAgBT,QAAQ,CAACW,SAAzB,EAAoC,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACnDD,MAAAA,KAAK,CAACrB,OAAN,GAAgB,KAAhB;AACAqB,MAAAA,KAAK,CAACnB,KAAN,GAAc,IAAd;AACH,KAHD;AAIAuB,IAAAA,OAAO,CAACC,OAAR,CAAgBT,QAAQ,CAACY,QAAzB,EAAmC,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAClDD,MAAAA,KAAK,CAACrB,OAAN,GAAgB,KAAhB;AACAqB,MAAAA,KAAK,CAACpB,KAAN,GAAcqB,MAAM,CAACC,OAArB;AACH,KAHD;AAIH;AAjCkC,CAAD,CAAtC;AAoCA,OAAO,MAAM;AAACH,EAAAA;AAAD,IAA0BF,kBAAkB,CAACY,OAAnD;AACP,OAAO,MAAMC,oBAAoB,GAAGb,kBAAkB,CAACc,OAAhD","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {IAdOrLot} from '@root/interfaces/IAdOrLot';\r\nimport {userAPI} from \"@src/api/api\";\r\nimport {CategoryIDsTypes} from \"@root/types/CategoryTypes\";\r\n\r\n\r\nconst initialState: IAdOrLot = {\r\n    isFetch: false,\r\n    error: null,\r\n    isLot: false,\r\n    category: {\r\n        id: null,\r\n        name: null,\r\n        childs: [{\r\n            id: null,\r\n            name: \"\",\r\n            image: {\r\n                id: null,\r\n                url: \"\"\r\n            },\r\n            icons: {\r\n                id: null,\r\n                url: \"\"\r\n            }\r\n        }]\r\n    }\r\n};\r\n\r\nexport const fetchAd = createAsyncThunk<any, CategoryIDsTypes>(\r\n    'adOrLot/fetchAd',\r\n    async ({ctgryID, subCtgryID}, {rejectWithValue}) => {\r\n        try {\r\n            return await userAPI.getAdOrLot(ctgryID, subCtgryID, false);\r\n        } catch (e) {\r\n            return rejectWithValue(e.message);\r\n        }\r\n    }\r\n);\r\n\r\nexport const fetchLot = createAsyncThunk<any, CategoryIDsTypes>(\r\n    'adOrLot/fetchLot',\r\n    async ({ctgryID, subCtgryID}, {rejectWithValue}) => {\r\n        try {\r\n            return await userAPI.getAdOrLot(ctgryID, subCtgryID, true);\r\n        } catch (e) {\r\n            return rejectWithValue(e.message);\r\n        }\r\n    }\r\n);\r\n\r\nconst createAdOrLotSlice = createSlice({\r\n    name: 'adOrLot',\r\n    initialState,\r\n    reducers: {\r\n        setAdOrLotCtgryAction: (state, action) => {\r\n            state.category = action.payload;\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchAd.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        })\r\n        builder.addCase(fetchAd.fulfilled, (state, action) => {\r\n            state.isFetch = false;\r\n            state.isLot = false;\r\n        })\r\n        builder.addCase(fetchAd.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        })\r\n        builder.addCase(fetchLot.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        })\r\n        builder.addCase(fetchLot.fulfilled, (state, action) => {\r\n            state.isFetch = false;\r\n            state.isLot = true;\r\n        })\r\n        builder.addCase(fetchLot.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport const {setAdOrLotCtgryAction} = createAdOrLotSlice.actions;\r\nexport const createAdOrLotReducer = createAdOrLotSlice.reducer;"]},"metadata":{},"sourceType":"module"}