{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport CyrillicToTranslit from 'cyrillic-to-translit-js';\nexport const transformTitle = title => {\n  const transform = new CyrillicToTranslit().transform;\n  const formatRegEx = /[\\-\\,\\.\\;\\\"\\']+/g;\n  return transform(title).toLowerCase().replace(formatRegEx, ' ').replace(/\\s+/g, '-');\n};\nexport const numberRegEx = /^[0-9]*$/;\n\nconst addParents = (list, parents) => list.map(ctgr => {\n  if (ctgr.type) {\n    const type = addParents(ctgr.type, [...parents, {\n      id: ctgr.id,\n      name: ctgr.name\n    }]);\n    return _objectSpread(_objectSpread({}, ctgr), {}, {\n      type,\n      parents\n    });\n  } else {\n    return _objectSpread(_objectSpread({}, ctgr), {}, {\n      parents\n    });\n  }\n});\n\nexport const categoryDataNormalization = categoryList => categoryList.map(ctgr => {\n  if (ctgr.model) {\n    const model = addParents(ctgr.model, [{\n      id: ctgr.id,\n      name: ctgr.name\n    }]);\n    return _objectSpread(_objectSpread({}, ctgr), {}, {\n      model\n    });\n  } else {\n    return ctgr;\n  }\n});\nexport const categorySearchHelper = (text, categoryList) => {\n  const searchRegExp = RegExp(text, 'i');\n  return categoryList.reduce((list, category) => {\n    category.model.forEach(sub_ctgr => {\n      if (searchRegExp.test(sub_ctgr.name)) {\n        list.push(sub_ctgr);\n      }\n    });\n    return list;\n  }, []);\n};\nexport const prepareCreateAncmnt = (data, adParams) => Object.keys(data).reduce((acc, key) => {\n  if (Array.isArray(data[key]) || data[key] === '') {\n    acc[key] = data[key];\n  }\n\n  if (Array.isArray(data[key]) && data[key].length && adParams !== undefined && adParams[key]) {\n    acc = _objectSpread(_objectSpread({}, acc), prepareCreateAncmnt(adParams[key]));\n  }\n\n  return acc;\n}, {});\nexport const pricePrettier = price => price && price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");","map":null,"metadata":{},"sourceType":"module"}