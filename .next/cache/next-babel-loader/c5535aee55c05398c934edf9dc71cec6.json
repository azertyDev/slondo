{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { Fragment } from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { CustomCheckbox } from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\nimport { CustomFormikField } from \"@src/components/elements/custom_formik_field/CustomFormikField\";\nimport { requiredFields } from '@root/validation_schemas/createAdvrtSchema';\nimport { useStyles } from './useStyles';\nexport var AdvrtParamsBlock = function AdvrtParamsBlock(props) {\n  _s();\n\n  var isPreview = props.isPreview,\n      createAdvrt = props.createAdvrt,\n      values = props.values,\n      onBlur = props.onBlur,\n      handleMenuItem = props.handleMenuItem,\n      handleListItem = props.handleListItem,\n      handleParamsInput = props.handleParamsInput,\n      handleParamsCheckbox = props.handleParamsCheckbox;\n  var adParams = values.adParams;\n  var data = isPreview ? adParams : createAdvrt.subCategory.data;\n  var classes = useStyles({\n    isPreview: isPreview\n  });\n  return __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    className: classes.root\n  }, Object.keys(data).map(function (key) {\n    var _adParams$year, _adParams$mileage;\n\n    return __jsx(Fragment, {\n      key: key\n    }, !isPreview && adParams[key] ? __jsx(React.Fragment, null, listGenerator(data[key], key), Object.keys(adParams[key]).map(function (innerKey) {\n      if (Array.isArray(adParams[key][innerKey]) && adParams[key][innerKey].length) {\n        return listGenerator(adParams[key][innerKey], innerKey);\n      }\n    })) : listGenerator(data[key], key), key === 'body' && __jsx(React.Fragment, null, __jsx(Grid, {\n      item: true,\n      container: true,\n      xs: 12,\n      sm: 6,\n      className: classes.gridItem\n    }, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, \"year\", requiredFields[key] && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\")), isPreview ? __jsx(Typography, null, adParams.year) : __jsx(CustomFormikField, {\n      name: \"year\",\n      placeholder: \"\\u0413\\u043E\\u0434 \\u0432\\u044B\\u043F\\u0443\\u0441\\u043A\\u0430\",\n      value: (_adParams$year = adParams.year) !== null && _adParams$year !== void 0 ? _adParams$year : '',\n      onChange: handleParamsInput('year')\n    })), __jsx(Grid, {\n      item: true,\n      container: true,\n      xs: 12,\n      sm: 6,\n      className: classes.gridItem\n    }, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, \"mileage\", requiredFields[key] && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\")), isPreview ? __jsx(Typography, null, adParams.mileage) : __jsx(CustomFormikField, {\n      name: \"mileage\",\n      placeholder: \"\\u041F\\u0440\\u043E\\u0431\\u0435\\u0433\",\n      value: (_adParams$mileage = adParams.mileage) !== null && _adParams$mileage !== void 0 ? _adParams$mileage : '',\n      onChange: handleParamsInput('mileage')\n    }))));\n  }));\n\n  function listGenerator(data, key) {\n    var fields;\n    var isExcludedRows = key !== 'id' && key !== 'name' && key !== 'adsParams';\n    var isOptions = key === 'safety' || key === 'multimedia' || key === 'assistant' || key === 'exterior';\n    var isSpecialRows = key === 'body' || key === 'colors' || isOptions;\n\n    if (isExcludedRows && data) {\n      data = data;\n\n      if (isSpecialRows && data.length) {\n        fields = __jsx(React.Fragment, null, __jsx(Typography, {\n          variant: \"subtitle1\"\n        }, key, requiredFields[key] && __jsx(\"span\", {\n          className: \"error-text\"\n        }, \"*\")), __jsx(\"div\", {\n          className: \"row-list\"\n        }, data.map(function (item) {\n          return __jsx(\"div\", {\n            key: item.id\n          }, key === 'body' ? __jsx(\"div\", {\n            onClick: !isPreview ? handleListItem(key, item) : null,\n            className: adParams[key] && adParams[key].id === item.id ? classes.selected : ''\n          }, __jsx(\"img\", {\n            src: item.icon.url,\n            alt: item.name\n          }), __jsx(Typography, null, item.name)) : key === 'colors' ? __jsx(\"div\", {\n            onClick: !isPreview ? handleListItem(key, item) : null,\n            className: adParams[key] && adParams[key].id === item.id ? classes.selected : '',\n            style: {\n              width: '50px',\n              height: '50px',\n              backgroundColor: \"\".concat(item.hex_color_code)\n            }\n          }) : __jsx(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center'\n            }\n          }, __jsx(CustomCheckbox, {\n            disabled: isPreview,\n            checked: adParams[key] && adParams[key].some(function (val) {\n              return val.id === item.id;\n            }),\n            onChange: handleParamsCheckbox(key, item)\n          }), __jsx(Typography, null, item.name)));\n        })));\n      } else {\n        if (!Array.isArray(data)) {\n          data = data;\n          fields = __jsx(React.Fragment, null, __jsx(Typography, {\n            variant: \"subtitle1\"\n          }, key, requiredFields[key] && __jsx(\"span\", {\n            className: \"error-text\"\n          }, \"*\")), key === 'body' ? __jsx(Typography, null, data.name) : key === 'colors' ? __jsx(\"div\", {\n            style: {\n              width: '50px',\n              height: '50px',\n              backgroundColor: \"\".concat(data.hex_color_code)\n            }\n          }) : __jsx(Typography, null, data.name));\n        } else if (data.length) {\n          data = [{\n            id: null,\n            name: 'Не выбрано'\n          }].concat(_toConsumableArray(data));\n          fields = __jsx(React.Fragment, null, __jsx(Typography, {\n            variant: \"subtitle1\"\n          }, key, requiredFields[key] && __jsx(\"span\", {\n            className: \"error-text\"\n          }, \"*\")), __jsx(CustomMenu, {\n            valueName: adParams[key] ? adParams[key].name : data[0].name,\n            items: data,\n            onBlur: onBlur,\n            onClick: handleMenuItem(key)\n          }));\n        }\n      }\n\n      return __jsx(Grid, {\n        item: true,\n        container: true,\n        className: classes.gridItem,\n        key: key,\n        xs: 12,\n        sm: isSpecialRows && !isPreview || isOptions ? 12 : 6\n      }, fields);\n    }\n  }\n};\n\n_s(AdvrtParamsBlock, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = AdvrtParamsBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdvrtParamsBlock\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_params_block/AdvrtParamsBlock.tsx"],"names":["React","Fragment","Grid","Typography","CustomMenu","CustomCheckbox","CustomFormikField","requiredFields","useStyles","AdvrtParamsBlock","props","isPreview","createAdvrt","values","onBlur","handleMenuItem","handleListItem","handleParamsInput","handleParamsCheckbox","adParams","data","subCategory","classes","root","Object","keys","map","key","listGenerator","innerKey","Array","isArray","length","gridItem","year","mileage","fields","isExcludedRows","isOptions","isSpecialRows","item","id","selected","icon","url","name","width","height","backgroundColor","hex_color_code","display","alignItems","some","val"],"mappings":"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","sourcesContent":["import React, {FC, Fragment} from \"react\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {ItemsType} from \"@root/interfaces/CustomMenuProps\";\r\nimport {CustomCheckbox} from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\r\nimport {CustomFormikField} from \"@src/components/elements/custom_formik_field/CustomFormikField\";\r\nimport {requiredFields} from '@root/validation_schemas/createAdvrtSchema';\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const AdvrtParamsBlock: FC<any> = (props) => {\r\n    const {\r\n        isPreview,\r\n        createAdvrt,\r\n        values,\r\n        onBlur,\r\n        handleMenuItem,\r\n        handleListItem,\r\n        handleParamsInput,\r\n        handleParamsCheckbox\r\n    } = props;\r\n\r\n    const adParams = values.adParams;\r\n\r\n    const data = isPreview ? adParams : createAdvrt.subCategory.data;\r\n\r\n    const classes = useStyles({isPreview});\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={1}\r\n            className={classes.root}\r\n        >\r\n            {\r\n                Object.keys(data).map(key => {\r\n                    return (\r\n                        <Fragment key={key}>\r\n                            {\r\n                                !isPreview && adParams[key]\r\n                                    ? (\r\n                                        <>\r\n                                            {listGenerator(data[key], key)}\r\n                                            {\r\n                                                Object.keys(adParams[key]).map(innerKey => {\r\n                                                    if (Array.isArray(adParams[key][innerKey]) && adParams[key][innerKey].length) {\r\n                                                        return listGenerator(adParams[key][innerKey], innerKey)\r\n                                                    }\r\n                                                })\r\n                                            }\r\n                                        </>\r\n                                    )\r\n                                    : listGenerator(data[key], key)\r\n                            }\r\n                            {\r\n                                key === 'body' && (\r\n                                    <>\r\n                                        <Grid\r\n                                            item\r\n                                            container\r\n                                            xs={12}\r\n                                            sm={6}\r\n                                            className={classes.gridItem}\r\n                                        >\r\n                                            <Typography variant=\"subtitle1\">\r\n                                                year\r\n                                                {requiredFields[key] && (\r\n                                                    <span className='error-text'>\r\n                                                        *\r\n                                                    </span>\r\n                                                )}\r\n                                            </Typography>\r\n                                            {\r\n                                                isPreview\r\n                                                    ? <Typography>{adParams.year}</Typography>\r\n                                                    : <CustomFormikField\r\n                                                        name='year'\r\n                                                        placeholder='Год выпуска'\r\n                                                        value={adParams.year ?? ''}\r\n                                                        onChange={handleParamsInput('year')}\r\n                                                    />\r\n                                            }\r\n                                        </Grid>\r\n                                        <Grid\r\n                                            item\r\n                                            container\r\n                                            xs={12}\r\n                                            sm={6}\r\n                                            className={classes.gridItem}\r\n                                        >\r\n                                            <Typography variant=\"subtitle1\">\r\n                                                mileage\r\n                                                {requiredFields[key] && (\r\n                                                    <span className='error-text'>\r\n                                                        *\r\n                                                    </span>\r\n                                                )}\r\n                                            </Typography>\r\n                                            {\r\n                                                isPreview\r\n                                                    ? <Typography>{adParams.mileage}</Typography>\r\n                                                    : <CustomFormikField\r\n                                                        name='mileage'\r\n                                                        placeholder='Пробег'\r\n                                                        value={adParams.mileage ?? ''}\r\n                                                        onChange={handleParamsInput('mileage')}\r\n                                                    />\r\n                                            }\r\n                                        </Grid>\r\n                                    </>\r\n                                )\r\n                            }\r\n                        </Fragment>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    )\r\n\r\n    function listGenerator(data: ItemsType | ItemsType[], key: string) {\r\n        let fields;\r\n\r\n        const isExcludedRows = key !== 'id'\r\n            && key !== 'name'\r\n            && key !== 'adsParams'\r\n\r\n        const isOptions = key === 'safety'\r\n            || key === 'multimedia'\r\n            || key === 'assistant'\r\n            || key === 'exterior';\r\n\r\n        const isSpecialRows = key === 'body'\r\n            || key === 'colors'\r\n            || isOptions;\r\n\r\n        if (isExcludedRows && data) {\r\n            data = data as ItemsType[];\r\n            if (isSpecialRows && data.length) {\r\n                fields = (\r\n                    <>\r\n                        <Typography variant=\"subtitle1\">\r\n                            {key}\r\n                            {requiredFields[key] && (\r\n                                <span className='error-text'>\r\n                                    *\r\n                                </span>\r\n                            )}\r\n                        </Typography>\r\n                        <div className='row-list'>\r\n                            {\r\n                                data.map(item => (\r\n                                    <div key={item.id}>\r\n                                        {\r\n                                            key === 'body'\r\n                                                ? (\r\n                                                    <div\r\n                                                        onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                                        className={\r\n                                                            adParams[key] && adParams[key].id === item.id\r\n                                                                ? classes.selected\r\n                                                                : ''\r\n                                                        }\r\n                                                    >\r\n                                                        <img src={item.icon.url} alt={item.name}/>\r\n                                                        <Typography>{item.name}</Typography>\r\n                                                    </div>\r\n                                                )\r\n                                                : key === 'colors'\r\n                                                ? (\r\n                                                    <div\r\n                                                        onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                                        className={adParams[key] && adParams[key].id === item.id ? classes.selected : ''}\r\n                                                        style={{\r\n                                                            width: '50px',\r\n                                                            height: '50px',\r\n                                                            backgroundColor: `${item.hex_color_code}`,\r\n                                                        }}\r\n                                                    />\r\n                                                )\r\n                                                : (\r\n                                                    <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                        <CustomCheckbox\r\n                                                            disabled={isPreview}\r\n                                                            checked={\r\n                                                                adParams[key]\r\n                                                                && adParams[key].some(val => val.id === item.id)\r\n                                                            }\r\n                                                            onChange={handleParamsCheckbox(key, item)}\r\n                                                        />\r\n                                                        <Typography>{item.name}</Typography>\r\n                                                    </div>\r\n                                                )\r\n                                        }\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </>\r\n                );\r\n            } else {\r\n                if (!Array.isArray(data)) {\r\n                    data = data as ItemsType;\r\n                    fields = (\r\n                        <>\r\n                            <Typography variant=\"subtitle1\">\r\n                                {key}\r\n                                {requiredFields[key] && (\r\n                                    <span className='error-text'>\r\n                                        *\r\n                                    </span>\r\n                                )}\r\n                            </Typography>\r\n                            {\r\n                                key === 'body'\r\n                                    ? <Typography>{data.name}</Typography>\r\n                                    : key === 'colors'\r\n                                    ? <div\r\n                                        style={{\r\n                                            width: '50px',\r\n                                            height: '50px',\r\n                                            backgroundColor: `${data.hex_color_code}`\r\n                                        }}\r\n                                    />\r\n                                    : <Typography>{data.name}</Typography>\r\n                            }\r\n                        </>\r\n                    );\r\n                } else if (data.length) {\r\n                    data = [{id: null, name: 'Не выбрано'}, ...data];\r\n                    fields = (\r\n                        <>\r\n                            <Typography variant=\"subtitle1\">\r\n                                {key}\r\n                                {requiredFields[key] && (\r\n                                    <span className='error-text'>\r\n                                        *\r\n                                    </span>\r\n                                )}\r\n                            </Typography>\r\n                            <CustomMenu\r\n                                valueName={adParams[key] ? adParams[key].name : data[0].name}\r\n                                items={data}\r\n                                onBlur={onBlur}\r\n                                onClick={handleMenuItem(key)}\r\n                            />\r\n                        </>\r\n                    );\r\n                }\r\n            }\r\n            return (\r\n                <Grid\r\n                    item\r\n                    container\r\n                    className={classes.gridItem}\r\n                    key={key}\r\n                    xs={12}\r\n                    sm={isSpecialRows && !isPreview || isOptions ? 12 : 6}\r\n                >\r\n                    {fields}\r\n                </Grid>\r\n            )\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}