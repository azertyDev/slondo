{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from \"@src/api/api\";\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\nconst initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null,\n  isAuthModalOpen: false\n}; // Async thunk\n\nexport const fetchToken = createAsyncThunk('authReg/fetchTokenByLogin', async ({\n  phone,\n  password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const token = await userAPI.login(phone, password);\n    cookies.set('token', token, {\n      maxAge: 2 * 3600\n    });\n  } catch (e) {\n    return rejectWithValue(e.message);\n  }\n}); // Slice\n\nconst authRegSlice = createSlice({\n  name: 'authReg',\n  initialState,\n  reducers: {\n    setIsAuthAction: (state, action) => {\n      state.isAuth = action.payload;\n    },\n    setIsAuthModalOpen: (state, action) => {\n      state.isAuthModalOpen = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchToken.pending, state => {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchToken.fulfilled, state => {\n      state.isFetch = false;\n      state.error = null;\n      state.isAuth = true;\n    });\n    builder.addCase(fetchToken.rejected, (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  setIsAuthAction,\n  setIsAuthModalOpen\n} = authRegSlice.actions;\nexport const authReducer = authRegSlice.reducer;","map":null,"metadata":{},"sourceType":"module"}