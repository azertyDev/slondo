{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from '@src/api/api';\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\nexport const fetchToken = createAsyncThunk('auth/fetchTokenByLogin', async ({\n  phone,\n  password\n}) => {\n  const token = await userAPI.login(phone, password);\n  cookies.set('token', token, {\n    maxAge: 2 * 3600\n  });\n});\nconst initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setIsAuth: (state, action) => {\n      state.isAuth = action.payload;\n    }\n  },\n  extraReducers: {\n    [fetchToken.pending.type]: state => {\n      state.isFetch = true;\n      state.error = null;\n    },\n    [fetchToken.fulfilled.type]: state => {\n      state.isFetch = false;\n      state.isAuth = true;\n    },\n    [fetchToken.rejected.type]: (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  setIsAuth\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/authReducer.ts"],"names":["createAsyncThunk","createSlice","userAPI","Cookies","cookies","fetchToken","phone","password","token","login","set","maxAge","initialState","isFetch","isAuth","error","authSlice","name","reducers","setIsAuth","state","action","payload","extraReducers","pending","type","fulfilled","rejected","actions","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAAQC,OAAR,QAAsB,cAAtB;AAEA,OAAOC,OAAP,MAAoB,kBAApB;AACA,MAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;AAGA,OAAO,MAAME,UAAU,GAAGL,gBAAgB,CACtC,wBADsC,EAEtC,OAAO;AAACM,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAP,KAA6B;AACzB,QAAMC,KAAK,GAAG,MAAMN,OAAO,CAACO,KAAR,CAAcH,KAAd,EAAqBC,QAArB,CAApB;AACAH,EAAAA,OAAO,CAACM,GAAR,CAAY,OAAZ,EAAqBF,KAArB,EAA4B;AAACG,IAAAA,MAAM,EAAE,IAAI;AAAb,GAA5B;AACH,CALqC,CAAnC;AAcP,MAAMC,YAAuB,GAAG;AAC5BC,EAAAA,OAAO,EAAE,KADmB;AAE5BC,EAAAA,MAAM,EAAE,KAFoB;AAG5BC,EAAAA,KAAK,EAAE;AAHqB,CAAhC;AAMA,MAAMC,SAAS,GAAGf,WAAW,CAAC;AAC1BgB,EAAAA,IAAI,EAAE,MADoB;AAE1BL,EAAAA,YAF0B;AAG1BM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1BD,MAAAA,KAAK,CAACN,MAAN,GAAeO,MAAM,CAACC,OAAtB;AACH;AAHK,GAHgB;AAQ1BC,EAAAA,aAAa,EAAE;AACX,KAAClB,UAAU,CAACmB,OAAX,CAAmBC,IAApB,GAA4BL,KAAD,IAAW;AAClCA,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACH,KAJU;AAKX,KAACV,UAAU,CAACqB,SAAX,CAAqBD,IAAtB,GAA8BL,KAAD,IAAW;AACpCA,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,MAAN,GAAe,IAAf;AACH,KARU;AASX,KAACT,UAAU,CAACsB,QAAX,CAAoBF,IAArB,GAA4B,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC3CD,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAArB;AACH;AAZU;AARW,CAAD,CAA7B;AAwBA,OAAO,MAAM;AAACH,EAAAA;AAAD,IAAcH,SAAS,CAACY,OAA9B;AACP,eAAeZ,SAAS,CAACa,OAAzB","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {userAPI} from '@src/api/api'\r\nimport {AuthInputVals} from \"@src/components/elements/auth_reg_form/AuthRegForm\";\r\nimport Cookies from \"universal-cookie\";\r\nconst cookies = new Cookies();\r\n\r\n\r\nexport const fetchToken = createAsyncThunk<any, AuthInputVals>(\r\n    'auth/fetchTokenByLogin',\r\n    async ({phone, password}) => {\r\n        const token = await userAPI.login(phone, password);\r\n        cookies.set('token', token, {maxAge: 2 * 3600})\r\n    }\r\n)\r\n\r\nexport type AuthTypes = {\r\n    isFetch: boolean,\r\n    isAuth: boolean,\r\n    error?: any\r\n};\r\n\r\nconst initialState: AuthTypes = {\r\n    isFetch: false,\r\n    isAuth: false,\r\n    error: null\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        setIsAuth: (state, action) => {\r\n            state.isAuth = action.payload\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [fetchToken.pending.type]: (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        },\r\n        [fetchToken.fulfilled.type]: (state) => {\r\n            state.isFetch = false;\r\n            state.isAuth = true;\r\n        },\r\n        [fetchToken.rejected.type]: (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const {setIsAuth} = authSlice.actions;\r\nexport default authSlice.reducer;"]},"metadata":{},"sourceType":"module"}