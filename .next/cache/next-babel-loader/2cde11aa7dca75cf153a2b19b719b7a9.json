{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { isRequired } from \"@root/validation_schemas/createAdvrtSchema\";\nimport { CustomCheckbox } from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { CustomFormikField } from \"@src/components/elements/custom_formik_field/CustomFormikField\";\nimport { useStyles } from \"./useStyles\";\nexport const AdvrtParams = props => {\n  const {\n    list,\n    errors,\n    onBlur,\n    values,\n    touched,\n    isPreview,\n    handleMenuItem,\n    handleListItem,\n    handleParamsInput,\n    handleParamsCheckbox\n  } = props;\n  let {\n    key,\n    data\n  } = list;\n  const {\n    adParams\n  } = values;\n\n  if (key === 'adsParams' && data.length) {\n    key = 'condition';\n    data = data[0][key];\n  } // const isExcludedRows = key !== 'year' && key !== 'mileage';\n\n\n  const isOptions = key === 'safety' || key === 'multimedia' || key === 'assistant' || key === 'exterior';\n  const isSpecialRows = key === 'body' || key === 'colors' || isOptions;\n  let fields = null;\n  const classes = useStyles({\n    isPreview\n  });\n\n  if (data) {\n    if (isSpecialRows && data.length) {\n      fields = __jsx(React.Fragment, null, __jsx(Typography, {\n        variant: \"subtitle1\"\n      }, key, isRequired(key) && __jsx(\"span\", {\n        className: \"error-text\"\n      }, \"*\"), errors.adParams && errors.adParams[key] && touched.adParams && touched.adParams[key] && touched.adParams[key].id && __jsx(\"span\", {\n        className: \"error-text\"\n      }, \" \", errors.adParams[key].id)), __jsx(\"div\", {\n        className: \"row-list\"\n      }, data.map(item => __jsx(\"div\", {\n        key: item.id\n      }, key === 'body' ? __jsx(\"div\", {\n        onClick: !isPreview ? handleListItem(key, item) : null,\n        className: adParams[key] && adParams[key].id === item.id ? classes.selected : ''\n      }, __jsx(Typography, null, item.name)) : __jsx(React.Fragment, null, key === 'colors' ? __jsx(\"div\", {\n        onClick: !isPreview ? handleListItem(key, item) : null,\n        className: adParams[key] && adParams[key].id === item.id ? classes.selected : '',\n        style: {\n          width: '50px',\n          height: '50px',\n          backgroundColor: `${item.hex_color_code}`\n        }\n      }) : __jsx(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        }\n      }, __jsx(CustomCheckbox, {\n        disabled: isPreview,\n        checked: adParams[key] && adParams[key].some(val => val.id === item.id),\n        onChange: handleParamsCheckbox(key, item)\n      }), __jsx(Typography, null, item.name)))))));\n    } else if (Array.isArray(data)) {\n      if (key !== 'condition') data = [{\n        id: null,\n        name: 'Не выбрано'\n      }, ...data];\n      fields = __jsx(React.Fragment, null, __jsx(Typography, {\n        variant: \"subtitle1\"\n      }, __jsx(\"strong\", null, key, isRequired(key) && __jsx(\"span\", {\n        className: \"error-text\"\n      }, \"*\")), errors.adParams && touched.adParams && errors.adParams[key] && touched.adParams[key] && touched.adParams[key].id && __jsx(\"span\", {\n        className: \"error-text\"\n      }, \" \", errors.adParams[key].id)), __jsx(CustomMenu, {\n        className: errors.adParams && touched.adParams && errors.adParams[key] && touched.adParams[key] ? 'error-border' : '',\n        name: key,\n        onBlur: onBlur,\n        items: data,\n        valueName: adParams[key] ? adParams[key].name : data[0].name,\n        onClick: handleMenuItem(key)\n      }));\n    } else {\n      var _adParams$key;\n\n      fields = isPreview ? __jsx(Typography, null, adParams[key]) : __jsx(CustomFormikField, {\n        className: errors[key] && touched[key] ? 'error-border' : '',\n        name: key,\n        placeholder: \"\\u0413\\u043E\\u0434 \\u0432\\u044B\\u043F\\u0443\\u0441\\u043A\\u0430\",\n        value: (_adParams$key = adParams[key]) !== null && _adParams$key !== void 0 ? _adParams$key : '',\n        onChange: handleParamsInput('year')\n      });\n    }\n\n    fields = fields ? __jsx(Grid, {\n      item: true,\n      container: true,\n      className: classes.gridItem,\n      key: key,\n      xs: 12,\n      sm: isSpecialRows && !isPreview || isOptions ? 12 : 6\n    }, fields) : __jsx(React.Fragment, null);\n  }\n\n  return fields;\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_params/AdvrtParams.tsx"],"names":["React","Grid","Typography","isRequired","CustomCheckbox","CustomMenu","CustomFormikField","useStyles","AdvrtParams","props","list","errors","onBlur","values","touched","isPreview","handleMenuItem","handleListItem","handleParamsInput","handleParamsCheckbox","key","data","adParams","length","isOptions","isSpecialRows","fields","classes","id","map","item","selected","name","width","height","backgroundColor","hex_color_code","display","alignItems","some","val","Array","isArray","gridItem"],"mappings":"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","sourcesContent":["import React, {FC} from \"react\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {isRequired} from \"@root/validation_schemas/createAdvrtSchema\";\r\nimport {CustomCheckbox} from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {CustomFormikField} from \"@src/components/elements/custom_formik_field/CustomFormikField\";\r\nimport {useStyles} from \"./useStyles\";\r\n\r\n\r\nexport const AdvrtParams: FC<any> = (props) => {\r\n    const {\r\n        list,\r\n        errors,\r\n        onBlur,\r\n        values,\r\n        touched,\r\n        isPreview,\r\n        handleMenuItem,\r\n        handleListItem,\r\n        handleParamsInput,\r\n        handleParamsCheckbox,\r\n    } = props;\r\n\r\n    let {key, data} = list;\r\n    const {adParams} = values;\r\n\r\n    if (key === 'adsParams' && data.length) {\r\n        key = 'condition';\r\n        data = data[0][key];\r\n    }\r\n\r\n    // const isExcludedRows = key !== 'year' && key !== 'mileage';\r\n\r\n    const isOptions = key === 'safety'\r\n        || key === 'multimedia'\r\n        || key === 'assistant'\r\n        || key === 'exterior';\r\n\r\n    const isSpecialRows = key === 'body' || key === 'colors' || isOptions;\r\n\r\n    let fields = null;\r\n\r\n    const classes = useStyles({isPreview});\r\n    if (data) {\r\n        if (isSpecialRows && data.length) {\r\n            fields = (\r\n                <>\r\n                    <Typography variant=\"subtitle1\">\r\n                        {key}\r\n                        {\r\n                            isRequired(key)\r\n                            && <span className='error-text'>*</span>\r\n                        }\r\n                        {\r\n                            errors.adParams\r\n                            && errors.adParams[key]\r\n                            && touched.adParams\r\n                            && touched.adParams[key]\r\n                            && touched.adParams[key].id\r\n                            && <span className='error-text'> {errors.adParams[key].id}</span>\r\n                        }\r\n                    </Typography>\r\n                    <div className='row-list'>\r\n                        {data.map(item => (\r\n                            <div key={item.id}>\r\n                                {\r\n                                    key === 'body'\r\n                                        ? <div\r\n                                            onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                            className={\r\n                                                adParams[key]\r\n                                                && adParams[key].id === item.id\r\n                                                    ? classes.selected : ''\r\n                                            }\r\n                                        >\r\n                                            {/*<img src={item.icon.url} alt={item.name}/>*/}\r\n                                            <Typography>{item.name}</Typography>\r\n                                        </div>\r\n                                        : <>\r\n                                            {key === 'colors'\r\n                                                ? <div\r\n                                                    onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                                    className={adParams[key] && adParams[key].id === item.id ? classes.selected : ''}\r\n                                                    style={{\r\n                                                        width: '50px',\r\n                                                        height: '50px',\r\n                                                        backgroundColor: `${item.hex_color_code}`,\r\n                                                    }}\r\n                                                />\r\n                                                : <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                    <CustomCheckbox\r\n                                                        disabled={isPreview}\r\n                                                        checked={\r\n                                                            adParams[key] && adParams[key].some(val => val.id === item.id)\r\n                                                        }\r\n                                                        onChange={handleParamsCheckbox(key, item)}\r\n                                                    />\r\n                                                    <Typography>{item.name}</Typography>\r\n                                                </div>}\r\n                                        </>\r\n                                }\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            );\r\n        } else if (Array.isArray(data)) {\r\n            if (key !== 'condition') data = [{id: null, name: 'Не выбрано'}, ...data];\r\n            fields = (\r\n                <>\r\n                    <Typography variant=\"subtitle1\">\r\n                        <strong>\r\n                            {key}\r\n                            {\r\n                                isRequired(key)\r\n                                && <span className='error-text'>*</span>\r\n                            }\r\n                        </strong>\r\n                        {\r\n                            errors.adParams\r\n                            && touched.adParams\r\n                            && errors.adParams[key]\r\n                            && touched.adParams[key]\r\n                            && touched.adParams[key].id\r\n                            && <span className='error-text'> {errors.adParams[key].id}</span>\r\n                        }\r\n                    </Typography>\r\n                    <CustomMenu\r\n                        className={\r\n                            errors.adParams\r\n                            && touched.adParams\r\n                            && errors.adParams[key]\r\n                            && touched.adParams[key] ? 'error-border' : ''\r\n                        }\r\n                        name={key}\r\n                        onBlur={onBlur}\r\n                        items={data}\r\n                        valueName={adParams[key] ? adParams[key].name : data[0].name}\r\n                        onClick={handleMenuItem(key)}\r\n                    />\r\n                </>\r\n            );\r\n        } else {\r\n            fields = isPreview\r\n                ? <Typography>{adParams[key]}</Typography>\r\n                : <CustomFormikField\r\n                    className={\r\n                        errors[key] && touched[key] ? 'error-border' : ''\r\n                    }\r\n                    name={key}\r\n                    placeholder='Год выпуска'\r\n                    value={adParams[key] ?? ''}\r\n                    onChange={handleParamsInput('year')}\r\n                />\r\n        }\r\n        fields = fields\r\n            ? <Grid\r\n                item\r\n                container\r\n                className={classes.gridItem}\r\n                key={key}\r\n                xs={12}\r\n                sm={isSpecialRows && !isPreview || isOptions ? 12 : 6}\r\n            >\r\n                {fields}\r\n            </Grid>\r\n            : <></>\r\n    }\r\n\r\n    return fields;\r\n}"]},"metadata":{},"sourceType":"module"}