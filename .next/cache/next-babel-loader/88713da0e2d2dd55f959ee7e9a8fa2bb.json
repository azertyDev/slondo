{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from \"@src/api/api\";\nvar initialState = {\n  isFetch: false,\n  error: null,\n  list: [{\n    id: null,\n    name: '',\n    images: {\n      id: null,\n      url: {\n        extra: ''\n      }\n    },\n    icons: {\n      id: null,\n      url: {\n        extra: ''\n      }\n    },\n    childs: [],\n    has_auction: null\n  }]\n}; // Async thunk\n\nexport var fetchCategories = createAsyncThunk('categories/fetchCategories', /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(lang, _ref) {\n    var rejectWithValue;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            rejectWithValue = _ref.rejectWithValue;\n            _context.prev = 1;\n            _context.next = 4;\n            return userAPI.getCategories(lang);\n\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](1);\n            return _context.abrupt(\"return\", rejectWithValue(_context.t0.message));\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 7]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nvar advertisementSlice = createSlice({\n  name: 'categories',\n  initialState: initialState,\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchCategories.pending, function (state) {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchCategories.fulfilled, function (state, action) {\n      state.isFetch = false;\n      state.error = null;\n      state.list = action.payload;\n    });\n    builder.addCase(fetchCategories.rejected, function (state, action) {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport var categoriesReducer = advertisementSlice.reducer;","map":null,"metadata":{},"sourceType":"module"}