{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abror\\\\Documents\\\\projects\\\\slondo\\\\src\\\\components\\\\header\\\\sliders\\\\categoriesSlider\\\\CategoriesSlider.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { CustomSlider } from \"@src/components/elements/custom_slider/CustomSlider\";\nimport { settings } from './sliderSettings';\nimport { Link } from \"@root/i18n\";\nimport { useStyles } from './useStyles';\nimport { Skeleton } from \"@material-ui/lab\";\nexport const CategoriesSlider = props => {\n  const {\n    t,\n    categories\n  } = props;\n  const classes = useStyles();\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    variant: \"h4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }, t('popularCategories')), __jsx(\"div\", {\n    className: \"category-slider\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }, __jsx(CustomSlider, _extends({}, settings, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 17\n    }\n  }), categories.error ? __jsx(Typography, {\n    className: \"error-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 27\n    }\n  }, categories.error) : categories.list.map(category => __jsx(Link, {\n    href: \"#\",\n    key: category.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 29\n    }\n  }, __jsx(\"a\", {\n    title: category.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 33\n    }\n  }, categories.isFetch ? __jsx(React.Fragment, null, __jsx(Skeleton, {\n    variant: \"circle\",\n    width: 100,\n    height: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 45\n    }\n  }), __jsx(Skeleton, {\n    variant: \"text\",\n    width: 100,\n    height: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 45\n    }\n  })) : __jsx(React.Fragment, null, __jsx(\"img\", {\n    src: category.images.url.default,\n    alt: \"category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 45\n    }\n  }), __jsx(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 45\n    }\n  }, category.name))))))));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/header/sliders/categoriesSlider/CategoriesSlider.tsx"],"names":["React","Typography","CustomSlider","settings","Link","useStyles","Skeleton","CategoriesSlider","props","t","categories","classes","root","error","list","map","category","id","name","isFetch","images","url","default"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAwB,OAAxB;AAEA,SAAQC,UAAR,QAAyB,mBAAzB;AACA,SAAQC,YAAR,QAA2B,qDAA3B;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AACA,SAAQC,IAAR,QAAmB,YAAnB;AACA,SAAQC,SAAR,QAAwB,aAAxB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AAIA,OAAO,MAAMC,gBAAwD,GAAIC,KAAD,IAAW;AAC/E,QAAM;AAACC,IAAAA,CAAD;AAAIC,IAAAA;AAAJ,MAAkBF,KAAxB;AAEA,QAAMG,OAAO,GAAGN,SAAS,EAAzB;AACA,SACI;AAAK,IAAA,SAAS,EAAEM,OAAO,CAACC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BH,CAAC,CAAC,mBAAD,CAA3B,CADJ,EAEI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,YAAD,eAAkBN,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACKO,UAAU,CAACG,KAAX,GACK,MAAC,UAAD;AAAY,IAAA,SAAS,EAAC,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCH,UAAU,CAACG,KAA/C,CADL,GAEKH,UAAU,CAACI,IAAX,CAAgBC,GAAhB,CAAoBC,QAAQ,IAC1B,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,GAAX;AAAe,IAAA,GAAG,EAAEA,QAAQ,CAACC,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,KAAK,EAAED,QAAQ,CAACE,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKR,UAAU,CAACS,OAAX,GACK,4BACE,MAAC,QAAD;AAAU,IAAA,OAAO,EAAC,QAAlB;AAA2B,IAAA,KAAK,EAAE,GAAlC;AAAuC,IAAA,MAAM,EAAE,GAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,QAAD;AAAU,IAAA,OAAO,EAAC,MAAlB;AAAyB,IAAA,KAAK,EAAE,GAAhC;AAAqC,IAAA,MAAM,EAAE,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADL,GAKK,4BACE;AAAK,IAAA,GAAG,EAAEH,QAAQ,CAACI,MAAT,CAAgBC,GAAhB,CAAoBC,OAA9B;AAAuC,IAAA,GAAG,EAAC,UAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaN,QAAQ,CAACE,IAAtB,CAFF,CANV,CADJ,CADF,CAHV,CADJ,CAFJ,CADJ;AA0BH,CA9BM","sourcesContent":["import React, {FC} from 'react';\r\nimport {WithT} from \"i18next\";\r\nimport {Typography} from '@material-ui/core';\r\nimport {CustomSlider} from \"@src/components/elements/custom_slider/CustomSlider\";\r\nimport {settings} from './sliderSettings';\r\nimport {Link} from \"@root/i18n\";\r\nimport {useStyles} from './useStyles';\r\nimport {Skeleton} from \"@material-ui/lab\";\r\nimport {Categories} from \"@root/interfaces/Categories\";\r\n\r\n\r\nexport const CategoriesSlider: FC<WithT & { categories: Categories }> = (props) => {\r\n    const {t, categories} = props;\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography variant=\"h4\">{t('popularCategories')}</Typography>\r\n            <div className=\"category-slider\">\r\n                <CustomSlider {...settings}>\r\n                    {categories.error\r\n                        ? <Typography className=\"error-text\">{categories.error}</Typography>\r\n                        : categories.list.map(category => (\r\n                            <Link href=\"#\" key={category.id}>\r\n                                <a title={category.name}>\r\n                                    {categories.isFetch\r\n                                        ? <>\r\n                                            <Skeleton variant=\"circle\" width={100} height={100}/>\r\n                                            <Skeleton variant=\"text\" width={100} height={16}/>\r\n                                        </>\r\n                                        : <>\r\n                                            <img src={category.images.url.default} alt=\"category\"/>\r\n                                            <Typography>{category.name}</Typography>\r\n                                        </>}\r\n                                </a>\r\n                            </Link>\r\n                        ))\r\n                    }</CustomSlider>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n"]},"metadata":{},"sourceType":"module"}