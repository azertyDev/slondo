{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Fragment, useEffect } from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CustomFormikField } from \"@src/components/elements/custom_formik_field/CustomFormikField\";\nimport { isRequired } from '@root/validation_schemas/createAdvrtSchema';\nimport { AdvrtParams } from './AdvrtParams';\nimport { useStyles } from './useStyles';\nexport var AdvrtParamsBlock = function AdvrtParamsBlock(props) {\n  _s();\n\n  var isPreview = props.isPreview,\n      createAdvrt = props.createAdvrt,\n      values = props.values,\n      setValues = props.setValues,\n      errors = props.errors,\n      touched = props.touched,\n      handleParamsInput = props.handleParamsInput;\n  var initReqFields = {};\n  var subCategory = createAdvrt.subCategory;\n  var adParams = values.adParams;\n  var adParamsLen = Object.keys(values).length;\n  var data = isPreview ? adParams : subCategory.data;\n  useEffect(function () {\n    console.log(adParamsLen);\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      adParams: _objectSpread(_objectSpread({}, adParams), initReqFields)\n    }));\n  }, [adParamsLen]);\n  var classes = useStyles({\n    isPreview: isPreview\n  });\n  return __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    className: classes.root\n  }, Object.keys(data).map(function (key) {\n    var _adParams$year, _adParams$mileage;\n\n    return __jsx(Fragment, {\n      key: key\n    }, !isPreview && adParams[key] ? __jsx(React.Fragment, null, listGenerator(data[key], key), Object.keys(adParams[key]).map(function (innerKey) {\n      if (Array.isArray(adParams[key][innerKey]) && adParams[key][innerKey].length) {\n        return listGenerator(adParams[key][innerKey], innerKey);\n      }\n    }), __jsx(AdvrtParams, props)) : listGenerator(data[key], key), key === 'body' && __jsx(React.Fragment, null, __jsx(Grid, {\n      item: true,\n      container: true,\n      xs: 12,\n      sm: 6,\n      className: classes.gridItem\n    }, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, __jsx(\"strong\", null, \"year\", isRequired(key) && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\")), errors.adParams && errors.adParams.year && touched.year && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \" \", errors.adParams.year)), isPreview ? __jsx(Typography, null, adParams.year) : __jsx(CustomFormikField, {\n      className: errors.adParams && errors.adParams.year && touched.year ? 'error-border' : '',\n      name: \"year\",\n      placeholder: \"\\u0413\\u043E\\u0434 \\u0432\\u044B\\u043F\\u0443\\u0441\\u043A\\u0430\",\n      value: (_adParams$year = adParams.year) !== null && _adParams$year !== void 0 ? _adParams$year : '',\n      onChange: handleParamsInput('year')\n    })), __jsx(Grid, {\n      item: true,\n      container: true,\n      xs: 12,\n      sm: 6,\n      className: classes.gridItem\n    }, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, __jsx(\"strong\", null, \"mileage\", isRequired(key) && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\")), errors.adParams && errors.adParams.mileage && touched.mileage && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \" \", errors.adParams.mileage)), isPreview ? __jsx(Typography, null, adParams.mileage) : __jsx(CustomFormikField, {\n      className: errors.adParams && errors.adParams.mileage && touched.mileage ? 'error-border' : '',\n      name: \"mileage\",\n      placeholder: \"\\u041F\\u0440\\u043E\\u0431\\u0435\\u0433\",\n      value: (_adParams$mileage = adParams.mileage) !== null && _adParams$mileage !== void 0 ? _adParams$mileage : '',\n      onChange: handleParamsInput('mileage')\n    }))));\n  }));\n};\n\n_s(AdvrtParamsBlock, \"v7TDUGheAkBmKIQo9Gj65jeexyQ=\", false, function () {\n  return [useStyles];\n});\n\n_c = AdvrtParamsBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdvrtParamsBlock\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_params_block/AdvrtParamsBlock.tsx"],"names":["React","Fragment","useEffect","Grid","Typography","CustomFormikField","isRequired","AdvrtParams","useStyles","AdvrtParamsBlock","props","isPreview","createAdvrt","values","setValues","errors","touched","handleParamsInput","initReqFields","subCategory","adParams","adParamsLen","Object","keys","length","data","console","log","classes","root","map","key","listGenerator","innerKey","Array","isArray","gridItem","year","mileage"],"mappings":"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","sourcesContent":["import React, {FC, Fragment, useEffect} from \"react\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {CustomFormikField} from \"@src/components/elements/custom_formik_field/CustomFormikField\";\r\nimport {isRequired} from '@root/validation_schemas/createAdvrtSchema';\r\nimport {AdvrtParams} from './AdvrtParams';\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const AdvrtParamsBlock: FC<any> = (props) => {\r\n    const {\r\n        isPreview,\r\n        createAdvrt,\r\n        values,\r\n        setValues,\r\n        errors,\r\n        touched,\r\n        handleParamsInput,\r\n    } = props;\r\n\r\n    const initReqFields = {};\r\n\r\n    const {subCategory} = createAdvrt;\r\n\r\n    const {adParams} = values;\r\n    const adParamsLen = Object.keys(values).length;\r\n\r\n    const data = isPreview ? adParams : subCategory.data;\r\n\r\n    useEffect(() => {\r\n        console.log(adParamsLen)\r\n        setValues({...values, adParams: {...adParams, ...initReqFields}});\r\n    }, [adParamsLen]);\r\n\r\n    const classes = useStyles({isPreview});\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={1}\r\n            className={classes.root}\r\n        >\r\n            {\r\n                Object.keys(data).map(key => {\r\n                    return (\r\n                        <Fragment key={key}>\r\n                            {\r\n                                !isPreview && adParams[key]\r\n                                    ? (\r\n                                        <>\r\n                                            {listGenerator(data[key], key)}\r\n                                            {\r\n                                                Object.keys(adParams[key]).map(innerKey => {\r\n                                                    if (Array.isArray(adParams[key][innerKey]) && adParams[key][innerKey].length) {\r\n                                                        return listGenerator(adParams[key][innerKey], innerKey)\r\n                                                    }\r\n                                                })\r\n                                            }\r\n                                            <AdvrtParams {...props} />\r\n                                        </>\r\n                                    )\r\n                                    : listGenerator(data[key], key)\r\n                            }\r\n                            {\r\n                                key === 'body' && (\r\n                                    <>\r\n                                        <Grid\r\n                                            item\r\n                                            container\r\n                                            xs={12}\r\n                                            sm={6}\r\n                                            className={classes.gridItem}\r\n                                        >\r\n                                            <Typography variant=\"subtitle1\">\r\n                                                <strong>\r\n                                                    year\r\n                                                    {\r\n                                                        isRequired(key)\r\n                                                        && <span className='error-text'>*</span>\r\n                                                    }\r\n                                                </strong>\r\n                                                {\r\n                                                    errors.adParams\r\n                                                    && errors.adParams.year\r\n                                                    && touched.year\r\n                                                    && <span className='error-text'> {errors.adParams.year}</span>\r\n                                                }\r\n                                            </Typography>\r\n                                            {\r\n                                                isPreview\r\n                                                    ? <Typography>{adParams.year}</Typography>\r\n                                                    : <CustomFormikField\r\n                                                        className={\r\n                                                            errors.adParams\r\n                                                            && errors.adParams.year\r\n                                                            && touched.year ? 'error-border' : ''\r\n                                                        }\r\n                                                        name='year'\r\n                                                        placeholder='Год выпуска'\r\n                                                        value={adParams.year ?? ''}\r\n                                                        onChange={handleParamsInput('year')}\r\n                                                    />\r\n                                            }\r\n                                        </Grid>\r\n                                        <Grid\r\n                                            item\r\n                                            container\r\n                                            xs={12}\r\n                                            sm={6}\r\n                                            className={classes.gridItem}\r\n                                        >\r\n                                            <Typography variant=\"subtitle1\">\r\n                                                <strong>\r\n                                                    mileage\r\n                                                    {\r\n                                                        isRequired(key)\r\n                                                        && <span className='error-text'>*</span>\r\n                                                    }\r\n                                                </strong>\r\n                                                {\r\n                                                    errors.adParams\r\n                                                    && errors.adParams.mileage\r\n                                                    && touched.mileage\r\n                                                    && <span className='error-text'> {errors.adParams.mileage}</span>\r\n                                                }\r\n                                            </Typography>\r\n                                            {\r\n                                                isPreview\r\n                                                    ? <Typography>{adParams.mileage}</Typography>\r\n                                                    : <CustomFormikField\r\n                                                        className={\r\n                                                            errors.adParams\r\n                                                            && errors.adParams.mileage\r\n                                                            && touched.mileage ? 'error-border' : ''\r\n                                                        }\r\n                                                        name='mileage'\r\n                                                        placeholder='Пробег'\r\n                                                        value={adParams.mileage ?? ''}\r\n                                                        onChange={handleParamsInput('mileage')}\r\n                                                    />\r\n                                            }\r\n                                        </Grid>\r\n                                    </>\r\n                                )\r\n                            }\r\n                        </Fragment>\r\n                    )\r\n                })\r\n            }\r\n        </Grid>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}