{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { Grid, Hidden, Container, Typography } from '@material-ui/core';\nimport { AdvrtForm } from './advrtForm/AdvrtForm';\nimport { SuccessAdvrt } from './successAdvrt/SuccessAdvrt';\nimport { Form, Formik } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport { ButtonComponent } from \"@src/components/elements/button/Button\";\nimport { MainLayout } from \"@src/components/MainLayout\"; // styles\n\nimport { useStyles } from './useStyles';\nexport const CreateAdvrt = () => {\n  const {\n    createAdvrt\n  } = useSelector(store => store);\n  const {\n    0: isPreview,\n    1: setIsPreview\n  } = useState(false);\n  const {\n    0: isSuccess,\n    1: setIsSuccess\n  } = useState(false);\n\n  const handlePreview = value => () => {\n    setIsPreview(value);\n  };\n\n  const initVals = {\n    title: '',\n    safe_deal: false,\n    delivery: false,\n    exchange: false,\n    location: '',\n    files: [],\n    description: '',\n    phone: '',\n    adsParams: {}\n  };\n\n  const submit = () => {\n    isPreview ? console.log('submit') : setIsPreview(true);\n  };\n\n  const classes = useStyles();\n  return __jsx(MainLayout, null, __jsx(Container, {\n    maxWidth: \"lg\"\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 1\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 9\n  }, __jsx(Formik, {\n    initialValues: initVals // validationSchema={createAdvrtSchema}\n    ,\n    onSubmit: submit\n  }, ({\n    errors,\n    touched,\n    values,\n    setValues,\n    handleBlur\n  }) => {\n    console.log(values);\n\n    const handleCheckboxChange = valName => ({\n      target\n    }) => {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        [valName]: target.checked\n      }));\n    };\n\n    const handleClickMenuItem = valueName => (newValue, setAnchor) => () => {\n      setAnchor(null);\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        adsParams: _objectSpread(_objectSpread({}, values.adsParams), {}, {\n          [valueName]: newValue\n        })\n      })); // Reset sub props in values\n\n      Object.keys(newValue).map(key => {\n        if (values.adsParams[key]) {\n          setValues(_objectSpread(_objectSpread({}, values), {}, {\n            adsParams: _objectSpread(_objectSpread({}, values.adsParams), {}, {\n              [valueName]: newValue,\n              [key]: _objectSpread({\n                id: null,\n                name: 'Не выбрано'\n              }, newValue[key])\n            })\n          }));\n        }\n      });\n    };\n\n    const resetValues = () => {\n      setValues(initVals);\n    };\n\n    return __jsx(Form, null, isSuccess ? __jsx(SuccessAdvrt, null) : __jsx(AdvrtForm, {\n      isPreview: isPreview,\n      handlePreview: handlePreview,\n      createAdvrt: createAdvrt,\n      errors: errors,\n      touched: touched,\n      values: values,\n      resetValues: resetValues,\n      handleBlur: handleBlur,\n      handleClickMenuItem: handleClickMenuItem,\n      handleCheckboxChange: handleCheckboxChange\n    }), __jsx(\"div\", {\n      className: classes.nextButtonBlock\n    }, isPreview && __jsx(ButtonComponent, {\n      className: classes.nextButton,\n      onClick: handlePreview(false)\n    }, __jsx(Typography, null, \"\\u041D\\u0430\\u0437\\u0430\\u0434\")), __jsx(ButtonComponent, {\n      type: \"submit\",\n      className: classes.nextButton\n    }, __jsx(Typography, null, isPreview ? 'Создать' : 'Далее'))));\n  })), __jsx(Hidden, {\n    smDown: true\n  }, __jsx(Grid, {\n    item: true,\n    md: 3,\n    container: true,\n    justify: \"flex-end\",\n    className: classes.adBanner\n  }, __jsx(Grid, {\n    item: true,\n    md: 12\n  }, __jsx(\"div\", {\n    className: \"right-banner\"\n  })))))));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/CreateAdvrt.tsx"],"names":["React","useState","Grid","Hidden","Container","Typography","AdvrtForm","SuccessAdvrt","Form","Formik","useSelector","ButtonComponent","MainLayout","useStyles","CreateAdvrt","createAdvrt","store","isPreview","setIsPreview","isSuccess","setIsSuccess","handlePreview","value","initVals","title","safe_deal","delivery","exchange","location","files","description","phone","adsParams","submit","console","log","classes","errors","touched","values","setValues","handleBlur","handleCheckboxChange","valName","target","checked","handleClickMenuItem","valueName","newValue","setAnchor","Object","keys","map","key","id","name","resetValues","nextButtonBlock","nextButton","adBanner"],"mappings":"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","sourcesContent":["import React, {FC, useState} from 'react';\r\nimport {Grid, Hidden, Container, Typography} from '@material-ui/core';\r\nimport {AdvrtForm} from './advrtForm/AdvrtForm';\r\nimport {SuccessAdvrt} from './successAdvrt/SuccessAdvrt';\r\nimport {AdvertisementProps} from \"@root/interfaces/Advertisement\";\r\nimport {createAdvrtSchema} from \"@src/validationSchemas\";\r\nimport {Form, Formik} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"@src/redux/rootReducer\";\r\nimport {ButtonComponent} from \"@src/components/elements/button/Button\";\r\nimport {MainLayout} from \"@src/components/MainLayout\";\r\n// styles\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const CreateAdvrt: FC<AdvertisementProps> = () => {\r\n    const {createAdvrt} = useSelector((store: RootState) => store);\r\n\r\n    const [isPreview, setIsPreview] = useState(false);\r\n    const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n\r\n    const handlePreview = (value) => () => {\r\n        setIsPreview(value)\r\n    };\r\n\r\n    const initVals = {\r\n        title: '',\r\n        safe_deal: false,\r\n        delivery: false,\r\n        exchange: false,\r\n        location: '',\r\n        files: [],\r\n        description: '',\r\n        phone: '',\r\n        adsParams: {}\r\n    };\r\n\r\n    const submit = () => {\r\n        isPreview\r\n            ? console.log('submit')\r\n            : setIsPreview(true)\r\n    };\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <MainLayout>\r\n            <Container maxWidth=\"lg\">\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={12} md={9}>\r\n                        <Formik\r\n                            initialValues={initVals}\r\n                            // validationSchema={createAdvrtSchema}\r\n                            onSubmit={submit}\r\n                        >\r\n                            {\r\n                                ({\r\n                                     errors,\r\n                                     touched,\r\n                                     values,\r\n                                     setValues,\r\n                                     handleBlur,\r\n                                 }) => {\r\n                                    console.log(values)\r\n                                    const handleCheckboxChange = (valName) => ({target}) => {\r\n                                        setValues({...values, [valName]: target.checked});\r\n                                    };\r\n\r\n                                    const handleClickMenuItem = (valueName) => (newValue, setAnchor) => () => {\r\n                                        setAnchor(null);\r\n\r\n                                        setValues({\r\n                                            ...values,\r\n                                            adsParams: {\r\n                                                ...values.adsParams,\r\n                                                [valueName]: newValue\r\n                                            }\r\n                                        });\r\n\r\n                                        // Reset sub props in values\r\n                                        Object.keys(newValue).map(key => {\r\n                                            if (values.adsParams[key]) {\r\n                                                setValues({\r\n                                                    ...values,\r\n                                                    adsParams: {\r\n                                                        ...values.adsParams,\r\n                                                        [valueName]: newValue,\r\n                                                        [key]: {id: null, name: 'Не выбрано', ...newValue[key]}\r\n                                                    }\r\n                                                })\r\n                                            }\r\n                                        });\r\n                                    };\r\n\r\n                                    const resetValues = () => {\r\n                                        setValues(initVals);\r\n                                    };\r\n\r\n                                    return (\r\n                                        <Form>\r\n                                            {\r\n                                                isSuccess\r\n                                                    ? <SuccessAdvrt/>\r\n                                                    : (\r\n                                                        <AdvrtForm\r\n                                                            isPreview={isPreview}\r\n                                                            handlePreview={handlePreview}\r\n                                                            createAdvrt={createAdvrt}\r\n                                                            errors={errors}\r\n                                                            touched={touched}\r\n                                                            values={values}\r\n                                                            resetValues={resetValues}\r\n                                                            handleBlur={handleBlur}\r\n                                                            handleClickMenuItem={handleClickMenuItem}\r\n                                                            handleCheckboxChange={handleCheckboxChange}\r\n                                                        />\r\n                                                    )\r\n                                            }\r\n                                            <div className={classes.nextButtonBlock}>\r\n                                                {\r\n                                                    isPreview && (\r\n                                                        <ButtonComponent\r\n                                                            className={classes.nextButton}\r\n                                                            onClick={handlePreview(false)}\r\n                                                        >\r\n                                                            <Typography>\r\n                                                                Назад\r\n                                                            </Typography>\r\n                                                        </ButtonComponent>\r\n                                                    )\r\n                                                }\r\n                                                <ButtonComponent\r\n                                                    type='submit'\r\n                                                    className={classes.nextButton}\r\n                                                >\r\n                                                    <Typography>\r\n                                                        {\r\n                                                            isPreview\r\n                                                                ? 'Создать'\r\n                                                                : 'Далее'\r\n                                                        }\r\n                                                    </Typography>\r\n                                                </ButtonComponent>\r\n                                            </div>\r\n                                        </Form>\r\n                                    )\r\n                                }\r\n                            }\r\n                        </Formik>\r\n                    </Grid>\r\n                    <Hidden smDown>\r\n                        <Grid\r\n                            item\r\n                            md={3}\r\n                            container\r\n                            justify=\"flex-end\"\r\n                            className={classes.adBanner}\r\n                        >\r\n                            <Grid item md={12}>\r\n                                <div className=\"right-banner\"/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Hidden>\r\n                </Grid>\r\n            </Container>\r\n        </MainLayout>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}