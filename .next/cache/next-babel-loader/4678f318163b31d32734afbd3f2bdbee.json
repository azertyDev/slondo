{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(workerAuth),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAuth);\n\nimport { userApi } from '../../api/api';\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport Cookies from 'universal-cookie';\nimport { FETCH_TOKEN, authActions } from \"../actions/authActions\"; // Auth saga\n\nvar fetchTokenBegin = authActions.fetchTokenBegin,\n    fetchTokenSuccess = authActions.fetchTokenSuccess,\n    fetchTokenFailure = authActions.fetchTokenFailure;\n\nfunction workerAuth(actions) {\n  var payload, cookies, _yield$call, token;\n\n  return _regeneratorRuntime.wrap(function workerAuth$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = actions.payload;\n          cookies = new Cookies();\n          _context.prev = 2;\n          _context.next = 5;\n          return put(fetchTokenBegin());\n\n        case 5:\n          _context.next = 7;\n          return call(userApi.login, payload.phone, payload.password);\n\n        case 7:\n          _yield$call = _context.sent;\n          token = _yield$call.token;\n          cookies.set('token', token);\n          _context.next = 12;\n          return put(fetchTokenSuccess({\n            isAuth: true,\n            isFetch: false\n          }));\n\n        case 12:\n          _context.next = 18;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](2);\n          _context.next = 18;\n          return put(fetchTokenFailure(_context.t0.message));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 14]]);\n}\n\nexport function watchAuth() {\n  return _regeneratorRuntime.wrap(function watchAuth$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(FETCH_TOKEN, workerAuth);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/sagas/authSaga.ts"],"names":["workerAuth","watchAuth","userApi","call","put","takeLatest","Cookies","FETCH_TOKEN","authActions","fetchTokenBegin","fetchTokenSuccess","fetchTokenFailure","actions","payload","cookies","login","phone","password","token","set","isAuth","isFetch","message"],"mappings":";;oDASUA,U;qDAcOC,S;;AAvBjB,SAAQC,OAAR,QAAsB,eAAtB;AACA,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,wBAAvC,C,CAGA;;IACOC,e,GAAyDD,W,CAAzDC,e;IAAiBC,iB,GAAwCF,W,CAAxCE,iB;IAAmBC,iB,GAAqBH,W,CAArBG,iB;;AAE3C,SAAUX,UAAV,CAAqBY,OAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACWC,UAAAA,OADX,GACsBD,OADtB,CACWC,OADX;AAEUC,UAAAA,OAFV,GAEoB,IAAIR,OAAJ,EAFpB;AAAA;AAAA;AAKQ,iBAAMF,GAAG,CAACK,eAAe,EAAhB,CAAT;;AALR;AAAA;AAMwB,iBAAMN,IAAI,CAACD,OAAO,CAACa,KAAT,EAAgBF,OAAO,CAACG,KAAxB,EAA+BH,OAAO,CAACI,QAAvC,CAAV;;AANxB;AAAA;AAMeC,UAAAA,KANf,eAMeA,KANf;AAOQJ,UAAAA,OAAO,CAACK,GAAR,CAAY,OAAZ,EAAqBD,KAArB;AAPR;AAQQ,iBAAMd,GAAG,CAACM,iBAAiB,CAAC;AAACU,YAAAA,MAAM,EAAE,IAAT;AAAeC,YAAAA,OAAO,EAAE;AAAxB,WAAD,CAAlB,CAAT;;AARR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUQ,iBAAMjB,GAAG,CAACO,iBAAiB,CAAC,YAAEW,OAAH,CAAlB,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,OAAO,SAAUrB,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMI,UAAU,CAACE,WAAD,EAAcP,UAAd,CAAhB;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {userApi} from '../../api/api'\r\nimport {call, put, takeLatest} from \"redux-saga/effects\"\r\nimport Cookies from 'universal-cookie';\r\nimport {FETCH_TOKEN, authActions} from \"../actions/authActions\"\r\n\r\n\r\n// Auth saga\r\nconst {fetchTokenBegin, fetchTokenSuccess, fetchTokenFailure} = authActions;\r\n\r\nfunction* workerAuth(actions) {\r\n    const {payload} = actions;\r\n    const cookies = new Cookies();\r\n\r\n    try {\r\n        yield put(fetchTokenBegin());\r\n        const {token} = yield call(userApi.login, payload.phone, payload.password);\r\n        cookies.set('token', token);\r\n        yield put(fetchTokenSuccess({isAuth: true, isFetch: false}));\r\n    } catch (e) {\r\n        yield put(fetchTokenFailure(e.message));\r\n    }\r\n}\r\n\r\nexport function* watchAuth() {\r\n    yield takeLatest(FETCH_TOKEN, workerAuth);\r\n}"]},"metadata":{},"sourceType":"module"}