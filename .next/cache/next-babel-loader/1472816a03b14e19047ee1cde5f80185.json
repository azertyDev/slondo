{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { TextField } from \"@material-ui/core\";\n\nconst option = ({\n  area,\n  city,\n  district\n}) => {\n  return `${district ? `${district}, ` : ''}${city}, ${area}`;\n};\n\nconst formatData = list => {\n  return list.reduce((acc, row) => {\n    row.cities.forEach(city => {\n      if (city.district.length) {\n        city.district.forEach(dis => {\n          acc = [...acc, {\n            area: row.name,\n            city: city.name,\n            district: dis.name\n          }];\n        });\n      } else {\n        acc = [...acc, {\n          area: row.name,\n          city: city.name\n        }];\n      }\n    });\n    return acc;\n  }, []);\n};\n\nexport const AddressAutocomplete = props => {\n  return __jsx(Autocomplete, {\n    noOptionsText: \"\\u0413\\u043E\\u0440\\u043E\\u0434 \\u0438\\u043B\\u0438 \\u0440\\u0435\\u0433\\u0438\\u043E\\u043D \\u0441 \\u0442\\u0430\\u043A\\u0438\\u043C \\u0438\\u043C\\u0435\\u043D\\u0435\\u043C \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\",\n    options: formatData(props.list),\n    getOptionLabel: option,\n    renderInput: params => {\n      console.log(params);\n      return __jsx(TextField, _extends({\n        fullWidth: true,\n        focused: false,\n        variant: \"outlined\"\n      }, params, props));\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/address_autocomplete/AddressAutocomplete.tsx"],"names":["React","Autocomplete","TextField","option","area","city","district","formatData","list","reduce","acc","row","cities","forEach","length","dis","name","AddressAutocomplete","props","params","console","log"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAwC,OAAxC;AACA,SAAQC,YAAR,QAA2B,kBAA3B;AAEA,SAAQC,SAAR,QAAwB,mBAAxB;;AAUA,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,IAAP;AAAaC,EAAAA;AAAb,CAAD,KAA4B;AACvC,SAAQ,GAAEA,QAAQ,GAAI,GAAEA,QAAS,IAAf,GAAqB,EAAG,GAAED,IAAK,KAAID,IAAK,EAA1D;AACH,CAFD;;AAIA,MAAMG,UAAU,GAAIC,IAAD,IAAU;AACzB,SAAOA,IAAI,CAACC,MAAL,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7BA,IAAAA,GAAG,CAACC,MAAJ,CAAWC,OAAX,CAAoBR,IAAD,IAAU;AACzB,UAAIA,IAAI,CAACC,QAAL,CAAcQ,MAAlB,EAA0B;AACtBT,QAAAA,IAAI,CAACC,QAAL,CAAcO,OAAd,CAAuBE,GAAD,IAAS;AAC3BL,UAAAA,GAAG,GAAG,CACF,GAAGA,GADD,EAEF;AACIN,YAAAA,IAAI,EAAEO,GAAG,CAACK,IADd;AAEIX,YAAAA,IAAI,EAAEA,IAAI,CAACW,IAFf;AAGIV,YAAAA,QAAQ,EAAES,GAAG,CAACC;AAHlB,WAFE,CAAN;AAQH,SATD;AAUH,OAXD,MAWO;AACHN,QAAAA,GAAG,GAAG,CACF,GAAGA,GADD,EAEF;AACIN,UAAAA,IAAI,EAAEO,GAAG,CAACK,IADd;AAEIX,UAAAA,IAAI,EAAEA,IAAI,CAACW;AAFf,SAFE,CAAN;AAOH;AACJ,KArBD;AAsBA,WAAON,GAAP;AACH,GAxBM,EAwBJ,EAxBI,CAAP;AAyBH,CA1BD;;AA4BA,OAAO,MAAMO,mBAA4C,GAAIC,KAAD,IAAW;AACnE,SACI,MAAC,YAAD;AACI,IAAA,aAAa,EAAC,qNADlB;AAEI,IAAA,OAAO,EAAEX,UAAU,CAACW,KAAK,CAACV,IAAP,CAFvB;AAGI,IAAA,cAAc,EAAEL,MAHpB;AAII,IAAA,WAAW,EAAGgB,MAAD,IAAY;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,aAAO,MAAC,SAAD;AACH,QAAA,SAAS,MADN;AAEH,QAAA,OAAO,EAAE,KAFN;AAGH,QAAA,OAAO,EAAC;AAHL,SAICA,MAJD,EAKCD,KALD,EAAP;AAOH;AAbL,IADJ;AAiBH,CAlBM","sourcesContent":["import React, {FC, SetStateAction} from \"react\";\r\nimport {Autocomplete} from \"@material-ui/lab\";\r\nimport {CustomFormikField} from \"@src/components/elements/custom_formik_field/CustomFormikField\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport interface AddressAutocomplete {\r\n    placeholder: string;\r\n    name: string;\r\n    value: string;\r\n    setValues: (values: SetStateAction<unknown>, shouldValidate?: boolean | undefined) => any;\r\n    list: { id: number, name: string, cities: [{ id: number, name: string, districts: [{ id: number, city_id: number, name: string }] }] }[];\r\n}\r\n\r\nconst option = ({area, city, district}) => {\r\n    return `${district ? `${district}, ` : ''}${city}, ${area}`;\r\n};\r\n\r\nconst formatData = (list) => {\r\n    return list.reduce((acc, row) => {\r\n        row.cities.forEach((city) => {\r\n            if (city.district.length) {\r\n                city.district.forEach((dis) => {\r\n                    acc = [\r\n                        ...acc,\r\n                        {\r\n                            area: row.name,\r\n                            city: city.name,\r\n                            district: dis.name\r\n                        }\r\n                    ];\r\n                });\r\n            } else {\r\n                acc = [\r\n                    ...acc,\r\n                    {\r\n                        area: row.name,\r\n                        city: city.name\r\n                    }\r\n                ];\r\n            }\r\n        });\r\n        return acc;\r\n    }, []);\r\n}\r\n\r\nexport const AddressAutocomplete: FC<AddressAutocomplete> = (props) => {\r\n    return (\r\n        <Autocomplete\r\n            noOptionsText='Город или регион с таким именем не найден'\r\n            options={formatData(props.list)}\r\n            getOptionLabel={option}\r\n            renderInput={(params) => {\r\n                console.log(params)\r\n                return <TextField\r\n                    fullWidth\r\n                    focused={false}\r\n                    variant='outlined'\r\n                    {...params}\r\n                    {...props}\r\n                />\r\n            }}\r\n        />\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}