{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport { Router } from \"@root/i18n\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setAdvrtCtgryAction } from '@src/redux/slices/createAdvrtSlice';\nimport { Menu, MenuItem, Typography } from \"@material-ui/core\";\nimport { ButtonComponent } from \"@src/components/elements/button/Button\";\nimport { adTypeAndCtgrySchema } from \"@src/validation_schemas/validationSchemas\";\nimport { useStyles } from './useStyles';\nexport const adTypes = [{\n  id: 1,\n  name: 'Объявление'\n}, {\n  id: 2,\n  name: 'Торг'\n}, {\n  id: 3,\n  name: 'Продвинутый торг'\n}];\nconst initValues = {\n  adType: {\n    id: null,\n    name: 'Выберите тип'\n  },\n  adCategory: {\n    id: null,\n    name: 'Выберите категорию'\n  }\n};\nexport const CreateAdModalForm = props => {\n  const {\n    handleCloseModal\n  } = props;\n  const dispatch = useDispatch();\n  const categoriesList = useSelector(({\n    categories\n  }) => categories.list);\n  const {\n    0: typeAnchor,\n    1: setTypeAnchor\n  } = useState(null);\n  const {\n    0: estateAnchor,\n    1: setEstateAnchor\n  } = useState(null);\n\n  const handleMenuOpen = anchor => e => {\n    anchor(e.currentTarget);\n  };\n\n  const handleMenuClose = anchor => () => {\n    anchor(null);\n  };\n\n  const handleClickMenuItem = (handleSetValue, values, newValue) => () => {\n    handleSetValue(_objectSpread(_objectSpread({}, values), newValue));\n  };\n\n  const submit = values => {\n    dispatch(setAdvrtCtgryAction(values));\n    Router.push('/create_advertisement');\n    handleCloseModal();\n  };\n\n  const classes = useStyles();\n  return __jsx(Formik, {\n    initialValues: initValues,\n    validationSchema: adTypeAndCtgrySchema,\n    onSubmit: submit\n  }, ({\n    errors,\n    touched,\n    values,\n    setValues,\n    handleBlur\n  }) => __jsx(Form, {\n    className: classes.root\n  }, __jsx(\"div\", {\n    className: \"menu-btns\"\n  }, __jsx(\"div\", null, __jsx(Typography, null, errors.adType && touched.adType ? errors.adType.id : ''), __jsx(ButtonComponent, {\n    onClick: handleMenuOpen(setTypeAnchor)\n  }, values.adType.name), __jsx(Menu, {\n    className: classes.menu,\n    anchorEl: typeAnchor,\n    open: Boolean(typeAnchor),\n    onClose: handleMenuClose(setTypeAnchor)\n  }, adTypes.map(ad => __jsx(MenuItem, {\n    key: ad.id,\n    id: ad.name,\n    onBlur: handleBlur,\n    onClick: handleClickMenuItem(setValues, values, {\n      adType: ad\n    })\n  }, __jsx(Typography, null, ad.name))))), __jsx(\"div\", null, __jsx(Typography, null, errors.adCategory && touched.adCategory ? errors.adCategory.id : ''), __jsx(ButtonComponent, {\n    onClick: handleMenuOpen(setEstateAnchor)\n  }, values.adCategory.name), __jsx(Menu, {\n    anchorEl: estateAnchor,\n    open: Boolean(estateAnchor),\n    onClose: handleMenuClose(setEstateAnchor)\n  }, categoriesList.map(adCategory => {\n    const {\n      id,\n      name\n    } = adCategory;\n    return __jsx(MenuItem, {\n      key: id,\n      id: name,\n      value: id,\n      onBlur: handleBlur,\n      onClick: handleClickMenuItem(setValues, values, {\n        adCategory\n      })\n    }, __jsx(Typography, null, name));\n  })))), __jsx(\"div\", {\n    className: \"form-btns\"\n  }, __jsx(ButtonComponent, {\n    onClick: handleCloseModal\n  }, __jsx(Typography, null, \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0430\")), __jsx(ButtonComponent, {\n    type: \"submit\"\n  }, __jsx(Typography, null, \"\\u041F\\u0440\\u043E\\u0434\\u043E\\u043B\\u0436\\u0438\\u0442\\u044C\")))));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/createAdModalForm/CreateAdModalForm.tsx"],"names":["React","useState","Formik","Form","Router","useDispatch","useSelector","setAdvrtCtgryAction","Menu","MenuItem","Typography","ButtonComponent","adTypeAndCtgrySchema","useStyles","adTypes","id","name","initValues","adType","adCategory","CreateAdModalForm","props","handleCloseModal","dispatch","categoriesList","categories","list","typeAnchor","setTypeAnchor","estateAnchor","setEstateAnchor","handleMenuOpen","anchor","e","currentTarget","handleMenuClose","handleClickMenuItem","handleSetValue","values","newValue","submit","push","classes","errors","touched","setValues","handleBlur","root","menu","Boolean","map","ad"],"mappings":"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","sourcesContent":["import React, {FC, useState} from \"react\";\r\nimport {Formik, Form, FormikProps} from \"formik\";\r\nimport {Router} from \"@root/i18n\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setAdvrtCtgryAction} from '@src/redux/slices/createAdvrtSlice';\r\nimport {Menu, MenuItem, Typography} from \"@material-ui/core\";\r\nimport {ButtonComponent} from \"@src/components/elements/button/Button\";\r\nimport {adTypeAndCtgrySchema} from \"@src/validation_schemas/validationSchemas\";\r\nimport {RootState} from \"@src/redux/rootReducer\";\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const adTypes = [\r\n    {id: 1, name: 'Объявление'},\r\n    {id: 2, name: 'Торг'},\r\n    {id: 3, name: 'Продвинутый торг'},\r\n];\r\n\r\nconst initValues = {\r\n    adType: {\r\n        id: null,\r\n        name: 'Выберите тип'\r\n    },\r\n    adCategory: {\r\n        id: null,\r\n        name: 'Выберите категорию'\r\n    }\r\n};\r\n\r\nexport const CreateAdModalForm: FC<any> = (props) => {\r\n    const {handleCloseModal} = props;\r\n\r\n    const dispatch = useDispatch();\r\n    const categoriesList = useSelector(({categories}: RootState) => categories.list);\r\n\r\n    const [typeAnchor, setTypeAnchor] = useState(null);\r\n    const [estateAnchor, setEstateAnchor] = useState(null);\r\n\r\n    const handleMenuOpen = (anchor) => (e) => {\r\n        anchor(e.currentTarget)\r\n    };\r\n\r\n    const handleMenuClose = (anchor) => () => {\r\n        anchor(null);\r\n    };\r\n\r\n    const handleClickMenuItem = (handleSetValue, values, newValue) => () => {\r\n        handleSetValue({...values, ...newValue});\r\n    };\r\n\r\n    const submit = (values) => {\r\n        dispatch(setAdvrtCtgryAction(values));\r\n        Router.push('/create_advertisement');\r\n        handleCloseModal();\r\n    };\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <Formik initialValues={initValues} validationSchema={adTypeAndCtgrySchema} onSubmit={submit}>\r\n            {\r\n                ({\r\n                     errors,\r\n                     touched,\r\n                     values,\r\n                     setValues,\r\n                     handleBlur\r\n                 }: FormikProps<any> & { errors: any }) => (\r\n                    <Form className={classes.root}>\r\n                        <div className='menu-btns'>\r\n                            <div>\r\n                                <Typography>{errors.adType && touched.adType ? errors.adType.id : ''}</Typography>\r\n                                <ButtonComponent onClick={handleMenuOpen(setTypeAnchor)}>\r\n                                    {values.adType.name}\r\n                                </ButtonComponent>\r\n                                <Menu\r\n                                    className={classes.menu}\r\n                                    anchorEl={typeAnchor}\r\n                                    open={Boolean(typeAnchor)}\r\n                                    onClose={handleMenuClose(setTypeAnchor)}\r\n                                >\r\n                                    {\r\n                                        adTypes.map(ad => (\r\n                                            <MenuItem\r\n                                                key={ad.id}\r\n                                                id={ad.name}\r\n                                                onBlur={handleBlur}\r\n                                                onClick={\r\n                                                    handleClickMenuItem(setValues, values, {adType: ad})\r\n                                                }\r\n                                            >\r\n                                                <Typography>{ad.name}</Typography>\r\n                                            </MenuItem>\r\n                                        ))\r\n                                    }\r\n                                </Menu>\r\n                            </div>\r\n                            <div>\r\n                                <Typography>{errors.adCategory && touched.adCategory ? errors.adCategory.id : ''}</Typography>\r\n                                <ButtonComponent onClick={handleMenuOpen(setEstateAnchor)}>\r\n                                    {values.adCategory.name}\r\n                                </ButtonComponent>\r\n                                <Menu\r\n                                    anchorEl={estateAnchor}\r\n                                    open={Boolean(estateAnchor)}\r\n                                    onClose={handleMenuClose(setEstateAnchor)}\r\n                                >\r\n                                    {\r\n                                        categoriesList.map((adCategory) => {\r\n                                            const {id, name} = adCategory\r\n                                            return (\r\n                                                <MenuItem\r\n                                                    key={id}\r\n                                                    id={name}\r\n                                                    value={id}\r\n                                                    onBlur={handleBlur}\r\n                                                    onClick={\r\n                                                        handleClickMenuItem(setValues, values, {adCategory})\r\n                                                    }\r\n                                                >\r\n                                                    <Typography>{name}</Typography>\r\n                                                </MenuItem>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Menu>\r\n                            </div>\r\n                        </div>\r\n                        <div className='form-btns'>\r\n                            <ButtonComponent onClick={handleCloseModal}>\r\n                                <Typography>Отмена</Typography>\r\n                            </ButtonComponent>\r\n                            <ButtonComponent type='submit'>\r\n                                <Typography>Продолжить</Typography>\r\n                            </ButtonComponent>\r\n                        </div>\r\n                    </Form>\r\n                )\r\n            }\r\n        </Formik>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}