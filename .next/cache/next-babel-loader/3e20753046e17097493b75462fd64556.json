{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Fragment } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { ButtonComponent } from \"@src/components/elements/button/Button\";\nexport const CustomDroppable = props => {\n  const {\n    droppableId,\n    files,\n    isPreview,\n    removeFile\n  } = props;\n  return __jsx(Droppable, {\n    isCombineEnabled: true,\n    droppableId: droppableId,\n    direction: \"horizontal\"\n  }, provided => __jsx(Grid, _extends({\n    container: true,\n    className: \"images-wrapper\"\n  }, provided.droppableProps, {\n    ref: provided.innerRef\n  }), files.map(({\n    url,\n    file\n  }, index) => {\n    const isUrl = typeof url === 'string';\n\n    if (droppableId === 'firstRow' && index <= 3 || droppableId === 'secondRow' && index > 3) {\n      return isUrl ? __jsx(Draggable, {\n        key: index,\n        index: index,\n        draggableId: index.toString(),\n        isDragDisabled: isPreview || !isUrl\n      }, provided => __jsx(Grid, _extends({\n        item: true,\n        xs: 4,\n        md: 3,\n        ref: provided.innerRef\n      }, provided.draggableProps, provided.dragHandleProps), __jsx(\"img\", {\n        src: url,\n        style: {\n          width: '160px',\n          height: '120px',\n          objectFit: 'cover'\n        },\n        alt: file.name\n      }), __jsx(ButtonComponent, {\n        disabled: isPreview,\n        onClick: removeFile(url)\n      }, \"X\"))) : !isPreview && __jsx(Fragment, {\n        key: index\n      }, url);\n    }\n  }), provided.placeholder));\n};","map":null,"metadata":{},"sourceType":"module"}