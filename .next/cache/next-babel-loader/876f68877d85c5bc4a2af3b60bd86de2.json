{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { Grid, TextField, Typography } from \"@material-ui/core\";\nimport { isRequired } from \"@root/validation_schemas/createAdvrtSchema\";\nimport { CustomCheckbox } from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { autoSelectKeys, textFieldKeys } from \"../AncmntFormContainer\";\nimport { useStyles } from \"./useStyles\";\nexport const AncmntParameter = props => {\n  const {\n    t,\n    keyName,\n    data,\n    errors,\n    onBlur,\n    values,\n    touched,\n    isPreview,\n    handleMenuItem,\n    handleListItem,\n    handleInput,\n    handleParamsCheckbox\n  } = props;\n  const {\n    adParams\n  } = values;\n  const adParamsError = errors.adParams;\n  const adParamsTouched = touched.adParams;\n  const isOptions = keyName === 'safety' || keyName === 'multimedia' || keyName === 'assistant' || keyName === 'exterior' || keyName === 'car_climate' || keyName === 'airbags';\n  const isSpecialRows = keyName === 'body' || keyName === 'colors' || isOptions;\n  const isNotEmptyArray = Array.isArray(data) && data.length !== 0;\n  const isTextFieldKey = textFieldKeys.some(k => k === keyName);\n  let fields;\n  const classes = useStyles({\n    isPreview\n  });\n\n  if (isSpecialRows && isNotEmptyArray) {\n    fields = __jsx(React.Fragment, null, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, __jsx(\"strong\", null, t(keyName)), isRequired(keyName) && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\"), adParamsError && adParamsTouched && adParamsError[keyName] && adParamsTouched[keyName] && adParamsTouched[keyName].id && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \" \", adParamsError[keyName].id)), __jsx(\"div\", {\n      className: \"row-list\"\n    }, data.map(item => __jsx(\"div\", {\n      key: item.id\n    }, keyName === 'body' ? __jsx(\"div\", {\n      onClick: !isPreview ? handleListItem(keyName, item) : null,\n      className: adParams[keyName] && adParams[keyName].id === item.id ? classes.selected : ''\n    }, __jsx(Typography, null, item.name)) : keyName === 'colors' ? __jsx(\"div\", {\n      onClick: !isPreview ? handleListItem(keyName, item) : null,\n      className: adParams[keyName] && adParams[keyName].id === item.id ? classes.selected : '',\n      style: {\n        width: '50px',\n        height: '50px',\n        backgroundColor: `${item.hex_color_code}`\n      }\n    }) : __jsx(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center'\n      }\n    }, __jsx(CustomCheckbox, {\n      disabled: isPreview,\n      checked: adParams[keyName] && adParams[keyName].some(val => val.id === item.id),\n      onChange: handleParamsCheckbox(keyName, item)\n    }), __jsx(Typography, null, item.name))))));\n  } else if (isNotEmptyArray) {\n    var _adParams$newKey;\n\n    const list = autoSelectKeys.some(k => k === keyName) ? data : [{\n      id: null,\n      name: 'Не выбрано'\n    }, ...data];\n    const newKey = isTextFieldKey ? `${keyName}_value` : keyName;\n    fields = __jsx(React.Fragment, null, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, __jsx(\"strong\", null, t(newKey), isRequired(newKey) && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\")), adParamsError && adParamsTouched && adParamsError[newKey] && adParamsTouched[newKey] && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \" \", adParamsError[newKey].id)), __jsx(Grid, {\n      container: true\n    }, isTextFieldKey && __jsx(Grid, {\n      item: true,\n      xs: 9\n    }, __jsx(TextField, {\n      fullWidth: true,\n      variant: \"outlined\",\n      value: (_adParams$newKey = adParams[newKey]) !== null && _adParams$newKey !== void 0 ? _adParams$newKey : '',\n      onChange: handleInput(newKey),\n      className: adParamsError && adParamsTouched && adParamsError[newKey] && adParamsTouched[newKey] ? 'error-border' : ''\n    })), __jsx(Grid, {\n      item: true,\n      xs: isTextFieldKey ? 3 : 12\n    }, __jsx(CustomMenu, {\n      name: keyName,\n      onBlur: onBlur,\n      onClick: handleMenuItem(keyName),\n      className: adParamsError && adParamsTouched && adParamsError[keyName] && adParamsTouched[keyName] ? 'error-border' : '',\n      valueName: adParams[keyName] ? adParams[keyName].name : list[0].name,\n      items: list\n    }))));\n  } else if (!Array.isArray(data)) {\n    var _adParams$keyName;\n\n    fields = __jsx(React.Fragment, null, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, t(keyName), isRequired(keyName) && !isPreview && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \"*\"), adParamsError && adParamsTouched && adParamsError[keyName] && adParamsTouched[keyName] && __jsx(\"span\", {\n      className: \"error-text\"\n    }, \" \", adParamsError[keyName])), isPreview ? __jsx(Typography, null, typeof adParams[keyName] === 'string' ? adParams[keyName] : adParams[keyName].name) : __jsx(TextField, {\n      fullWidth: true,\n      name: keyName,\n      variant: \"outlined\",\n      value: (_adParams$keyName = adParams[keyName]) !== null && _adParams$keyName !== void 0 ? _adParams$keyName : '',\n      onChange: handleInput(keyName),\n      className: adParamsError && adParamsTouched && adParamsError[keyName] && adParamsTouched[keyName] ? 'error-border' : ''\n    }));\n  }\n\n  fields = fields ? __jsx(Grid, {\n    item: true,\n    container: true,\n    xs: 12,\n    className: classes.gridItem,\n    sm: isSpecialRows && !isPreview || isOptions ? 12 : 6\n  }, fields) : __jsx(React.Fragment, null);\n  return fields;\n};","map":null,"metadata":{},"sourceType":"module"}