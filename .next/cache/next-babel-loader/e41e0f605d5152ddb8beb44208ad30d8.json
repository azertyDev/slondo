{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _extraReducers;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice } from '@reduxjs/toolkit';\nvar initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null\n};\nvar authSlice = createSlice({\n  name: 'auth',\n  initialState: initialState,\n  extraReducers: (_extraReducers = {}, _defineProperty(_extraReducers, setIsAuthAction, function (state, action) {\n    return state.isAuth = action.payload;\n  }), _defineProperty(_extraReducers, \"fetchTokenBeginAction\", function fetchTokenBeginAction(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      isFetch: true,\n      error: null\n    });\n  }), _defineProperty(_extraReducers, \"fetchTokenSuccessAction\", function fetchTokenSuccessAction(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      isFetch: false\n    }, action.payload);\n  }), _defineProperty(_extraReducers, \"fetchTokenFailureAction\", function fetchTokenFailureAction(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      isFetch: false,\n      error: action.payload\n    });\n  }), _extraReducers)\n});\nexport var auth = function auth(state) {\n  return state.auth;\n};\nvar setIsAuthAction = authSlice.actions.setIsAuthAction;\nexport { setIsAuthAction };\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/authReducer.ts"],"names":["createSlice","initialState","isFetch","isAuth","error","authSlice","name","extraReducers","setIsAuthAction","state","action","payload","auth","actions","reducer"],"mappings":";;;;;;;;AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AASA,IAAMC,YAAuB,GAAG;AAC5BC,EAAAA,OAAO,EAAE,KADmB;AAE5BC,EAAAA,MAAM,EAAE,KAFoB;AAG5BC,EAAAA,KAAK,EAAE;AAHqB,CAAhC;AAMA,IAAMC,SAAS,GAAGL,WAAW,CAAC;AAC1BM,EAAAA,IAAI,EAAE,MADoB;AAE1BL,EAAAA,YAAY,EAAZA,YAF0B;AAG1BM,EAAAA,aAAa,wDACRC,eADQ,EACU,UAACC,KAAD,EAAQC,MAAR;AAAA,WAAmBD,KAAK,CAACN,MAAN,GAAeO,MAAM,CAACC,OAAzC;AAAA,GADV,4DAEc,+BAACF,KAAD;AAAA,2CAChBA,KADgB;AAEnBP,MAAAA,OAAO,EAAE,IAFU;AAGnBE,MAAAA,KAAK,EAAE;AAHY;AAAA,GAFd,8DAOgB,iCAACK,KAAD,EAAQC,MAAR;AAAA,2CAClBD,KADkB;AAErBP,MAAAA,OAAO,EAAE;AAFY,OAGlBQ,MAAM,CAACC,OAHW;AAAA,GAPhB,8DAYgB,iCAACF,KAAD,EAAQC,MAAR;AAAA,2CAClBD,KADkB;AAErBP,MAAAA,OAAO,EAAE,KAFY;AAGrBE,MAAAA,KAAK,EAAEM,MAAM,CAACC;AAHO;AAAA,GAZhB;AAHa,CAAD,CAA7B;AAuBA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACH,KAAD;AAAA,SAAWA,KAAK,CAACG,IAAjB;AAAA,CAAb;IAEOJ,e,GAAmBH,SAAS,CAACQ,O,CAA7BL,e;;AAEd,eAAeH,SAAS,CAACS,OAAzB","sourcesContent":["import {createSlice} from '@reduxjs/toolkit'\r\n\r\n\r\nexport type AuthTypes = {\r\n    isFetch: boolean,\r\n    isAuth: boolean,\r\n    error?: any\r\n};\r\n\r\nconst initialState: AuthTypes = {\r\n    isFetch: false,\r\n    isAuth: false,\r\n    error: null\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    extraReducers: {\r\n        [setIsAuthAction]: (state, action) => state.isAuth = action.payload,\r\n        fetchTokenBeginAction: (state) => ({\r\n            ...state,\r\n            isFetch: true,\r\n            error: null\r\n        }),\r\n        fetchTokenSuccessAction: (state, action) => ({\r\n            ...state,\r\n            isFetch: false,\r\n            ...action.payload\r\n        }),\r\n        fetchTokenFailureAction: (state, action) => ({\r\n            ...state,\r\n            isFetch: false,\r\n            error: action.payload\r\n        })\r\n    }\r\n});\r\n\r\nexport const auth = (state) => state.auth;\r\n\r\nexport const {setIsAuthAction} = authSlice.actions;\r\n\r\nexport default authSlice.reducer;"]},"metadata":{},"sourceType":"module"}