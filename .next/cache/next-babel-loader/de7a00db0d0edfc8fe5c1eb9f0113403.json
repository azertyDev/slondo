{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { SchemaLink } from '@apollo/client/link/schema';\nimport { HttpLink } from '@apollo/client/link/http';\nvar apolloClient;\n\nfunction createIsomorphLink() {\n  if (false) {\n    var _require = require('./schema'),\n        schema = _require.schema;\n\n    return new SchemaLink({\n      schema: schema\n    });\n  } else {\n    return new HttpLink({\n      uri: \"/api/graphql\",\n      credentials: 'same-origin'\n    });\n  }\n}\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: false,\n    link: createIsomorphLink(),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo() {\n  var _apolloClient2;\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (false) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  _s();\n\n  return useMemo(function () {\n    return initializeApollo(initialState);\n  }, [initialState]);\n}\n\n_s(useApollo, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/apollo/client.js"],"names":["useMemo","ApolloClient","InMemoryCache","SchemaLink","HttpLink","apolloClient","createIsomorphLink","require","schema","uri","credentials","createApolloClient","ssrMode","link","cache","initializeApollo","initialState","_apolloClient","restore","useApollo"],"mappings":";;AAAA,SAAQA,OAAR,QAAsB,OAAtB;AACA,SAAQC,YAAR,EAAsBC,aAAtB,QAA0C,gBAA1C;AACA,SAAQC,UAAR,QAAyB,4BAAzB;AACA,SAAQC,QAAR,QAAuB,0BAAvB;AAEA,IAAIC,YAAJ;;AAEA,SAASC,kBAAT,GAA8B;AAC1B,aAAmC;AAAA,mBACdC,OAAO,CAAC,UAAD,CADO;AAAA,QACxBC,MADwB,YACxBA,MADwB;;AAE/B,WAAO,IAAIL,UAAJ,CAAe;AAACK,MAAAA,MAAM,EAANA;AAAD,KAAf,CAAP;AACH,GAHD,MAGO;AACH,WAAO,IAAIJ,QAAJ,CAAa;AAChBK,MAAAA,GAAG,gBADa;AAEhBC,MAAAA,WAAW,EAAE;AAFG,KAAb,CAAP;AAIH;AACJ;;AAED,SAASC,kBAAT,GAA8B;AAC1B,SAAO,IAAIV,YAAJ,CAAiB;AACpBW,IAAAA,OAAO,OADa;AAEpBC,IAAAA,IAAI,EAAEP,kBAAkB,EAFJ;AAGpBQ,IAAAA,KAAK,EAAE,IAAIZ,aAAJ;AAHa,GAAjB,CAAP;AAKH;;AAED,OAAO,SAASa,gBAAT,GAA+C;AAAA;;AAAA,MAArBC,YAAqB,uEAAN,IAAM;;AAClD,MAAMC,aAAa,qBAAGZ,YAAH,2DAAmBM,kBAAkB,EAAxD,CADkD,CAGlD;AACA;;;AACA,MAAIK,YAAJ,EAAkB;AACdC,IAAAA,aAAa,CAACH,KAAd,CAAoBI,OAApB,CAA4BF,YAA5B;AACH,GAPiD,CAQlD;;;AACA,aAAmC,OAAOC,aAAP,CATe,CAUlD;;AACA,MAAI,CAACZ,YAAL,EAAmBA,YAAY,GAAGY,aAAf;AAEnB,SAAOA,aAAP;AACH;AAED,OAAO,SAASE,SAAT,CAAmBH,YAAnB,EAAiC;AAAA;;AACpC,SAAOhB,OAAO,CAAC;AAAA,WAAMe,gBAAgB,CAACC,YAAD,CAAtB;AAAA,GAAD,EAAuC,CAACA,YAAD,CAAvC,CAAd;AACH;;GAFeG,S","sourcesContent":["import {useMemo} from 'react'\r\nimport {ApolloClient, InMemoryCache} from '@apollo/client'\r\nimport {SchemaLink} from '@apollo/client/link/schema'\r\nimport {HttpLink} from '@apollo/client/link/http'\r\n\r\nlet apolloClient\r\n\r\nfunction createIsomorphLink() {\r\n    if (typeof window === 'undefined') {\r\n        const {schema} = require('./schema')\r\n        return new SchemaLink({schema})\r\n    } else {\r\n        return new HttpLink({\r\n            uri: `/api/graphql`,\r\n            credentials: 'same-origin',\r\n        })\r\n    }\r\n}\r\n\r\nfunction createApolloClient() {\r\n    return new ApolloClient({\r\n        ssrMode: typeof window === 'undefined',\r\n        link: createIsomorphLink(),\r\n        cache: new InMemoryCache(),\r\n    })\r\n}\r\n\r\nexport function initializeApollo(initialState = null) {\r\n    const _apolloClient = apolloClient ?? createApolloClient()\r\n\r\n    // If your page has Next.js data fetching methods that use Apollo Client, the initial state\r\n    // gets hydrated here\r\n    if (initialState) {\r\n        _apolloClient.cache.restore(initialState)\r\n    }\r\n    // For SSG and SSR always create a new Apollo Client\r\n    if (typeof window === 'undefined') return _apolloClient\r\n    // Create the Apollo Client once in the client\r\n    if (!apolloClient) apolloClient = _apolloClient\r\n\r\n    return _apolloClient\r\n}\r\n\r\nexport function useApollo(initialState) {\r\n    return useMemo(() => initializeApollo(initialState), [initialState])\r\n}"]},"metadata":{},"sourceType":"module"}