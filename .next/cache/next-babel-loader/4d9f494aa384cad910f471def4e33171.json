{"ast":null,"code":"import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { mainSlider } from \"./reducers/mainSlider\";\nvar rootReducer = combineReducers({\n  mainSlider: mainSlider\n});\nvar enhancer = composeWithDevTools(applyMiddleware(thunkMiddleware)); // create a makeStore function\n\nvar makeStore = function makeStore(context) {\n  return createStore(rootReducer, enhancer);\n};\n\n// export an assembled wrapper\nexport var wrapper = createWrapper(makeStore);","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/store.ts"],"names":["createStore","applyMiddleware","combineReducers","thunkMiddleware","composeWithDevTools","createWrapper","mainSlider","rootReducer","enhancer","makeStore","context","wrapper"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,EAAsCC,eAAtC,QAA4D,OAA5D;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,SAAmBC,aAAnB,QAAgD,oBAAhD;AAEA,SAAQC,UAAR,QAAgC,uBAAhC;AAEA,IAAMC,WAAW,GAAGL,eAAe,CAAC;AAChCI,EAAAA,UAAU,EAAVA;AADgC,CAAD,CAAnC;AAGA,IAAME,QAAQ,GAAGJ,mBAAmB,CAChCH,eAAe,CAACE,eAAD,CADiB,CAApC,C,CAIA;;AACA,IAAMM,SAAoB,GAAG,SAAvBA,SAAuB,CAACC,OAAD;AAAA,SAAsBV,WAAW,CAACO,WAAD,EAAcC,QAAd,CAAjC;AAAA,CAA7B;;AAIA;AACA,OAAO,IAAMG,OAAO,GAAGN,aAAa,CAAQI,SAAR,CAA7B","sourcesContent":["import {createStore, applyMiddleware, combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport {MakeStore, createWrapper, Context} from 'next-redux-wrapper'\r\n\r\nimport {mainSlider, State} from \"./reducers/mainSlider\";\r\n\r\nconst rootReducer = combineReducers({\r\n    mainSlider,\r\n});\r\nconst enhancer = composeWithDevTools(\r\n    applyMiddleware(thunkMiddleware),\r\n);\r\n\r\n// create a makeStore function\r\nconst makeStore: MakeStore = (context: Context) => createStore(rootReducer, enhancer);\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\n// export an assembled wrapper\r\nexport const wrapper = createWrapper<State>(makeStore);"]},"metadata":{},"sourceType":"module"}