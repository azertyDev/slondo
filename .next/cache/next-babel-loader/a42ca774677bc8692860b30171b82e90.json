{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Container } from '@material-ui/core';\nimport { useSelector } from \"react-redux\";\nimport { useFormik } from \"formik\";\nimport { i18n } from \"@root/i18n\";\nimport { userAPI } from '@src/api/api';\nimport { MainLayout } from \"@src/components/MainLayout\";\nimport { CreateAdvrt } from \"./CreateAdvrt\";\nimport { createAdvrtSchema, isRequired } from \"@root/validation_schemas/createAdvrtSchema\";\nimport { autoSelectKeys, textFieldKeys } from \"../create_advrt/advrt_form/AdvrtFormContainer\";\nimport { CameraIcon } from \"@src/components/elements/icons\";\nimport { TOTAL_FILES_LIMIT } from \"@src/constants\";\nexport const initUrl = {\n  url: __jsx(\"div\", {\n    style: {\n      width: '140px',\n      height: '140px',\n      margin: 'auto'\n    }\n  }, __jsx(CameraIcon, null))\n};\nexport const CreateAdvrtContainer = () => {\n  const lang = i18n.language;\n  const initCreateAdState = {\n    isFetch: false,\n    error: null,\n    adType: {\n      id: null,\n      name: '',\n      currency: [],\n      expired: []\n    },\n    category: {\n      id: null,\n      name: '',\n      childs: []\n    },\n    subCategory: {\n      id: null,\n      name: '',\n      data: {}\n    }\n  };\n  const initPhotos = Array.from({\n    length: TOTAL_FILES_LIMIT\n  }).map(() => initUrl);\n  const initFormFields = {\n    isFetch: false,\n    error: null,\n    title: '',\n    safe_deal: false,\n    delivery: false,\n    exchange: false,\n    location: null,\n    files: initPhotos,\n    description: '',\n    phone: '',\n    price: '',\n    currency: {\n      id: null,\n      name: ''\n    },\n    avalTime: {\n      isActive: false,\n      start_time: '00:00',\n      end_time: '00:00',\n      week: [{\n        id: 1,\n        name: 'Пн'\n      }, {\n        id: 2,\n        name: 'Вт'\n      }, {\n        id: 3,\n        name: 'Ср'\n      }, {\n        id: 4,\n        name: 'Чт'\n      }, {\n        id: 5,\n        name: 'Пт'\n      }, {\n        id: 6,\n        name: 'Сб'\n      }, {\n        id: 7,\n        name: 'Вс'\n      }]\n    },\n    auction: {\n      duration: {\n        id: null,\n        expiration_at: null\n      },\n      offer_the_price: false,\n      auto_renewal: false,\n      reserve_price: '',\n      price_by_now: {\n        isActive: false,\n        value: ''\n      },\n      display_phone: false\n    },\n    adParams: {\n      safety: [],\n      multimedia: [],\n      assistant: [],\n      exterior: [],\n      car_climate: [],\n      airbags: []\n    }\n  };\n  const categoriesList = useSelector(({\n    categories\n  }) => categories.list);\n  const {\n    0: tabValue,\n    1: setTabValue\n  } = useState(1);\n  const {\n    0: adTypes,\n    1: setAdTypes\n  } = useState([]);\n  const {\n    0: createAdvrt,\n    1: setCreateAdvrt\n  } = useState(initCreateAdState);\n  const {\n    adType,\n    category,\n    subCategory\n  } = createAdvrt;\n  const {\n    0: isForm,\n    1: setIsForm\n  } = useState(false);\n  const {\n    0: isPreview,\n    1: setIsPreview\n  } = useState(false);\n  const {\n    0: isSuccess,\n    1: setIsSuccess\n  } = useState(false);\n  const formik = useFormik({\n    initialValues: initFormFields,\n    validationSchema: createAdvrtSchema,\n    onSubmit\n  });\n  const {\n    values,\n    setValues,\n    setErrors,\n    setTouched\n  } = formik;\n  const {\n    adParams\n  } = values;\n\n  const getAdTypes = async () => {\n    try {\n      setCreateAdvrt(_objectSpread(_objectSpread({}, createAdvrt), {}, {\n        isFetch: true\n      }));\n      const adTypes = await userAPI.getAdTypes(lang);\n      setCreateAdvrt(_objectSpread(_objectSpread({}, createAdvrt), {}, {\n        isFetch: false\n      }));\n      setAdTypes(adTypes);\n      setCreateAdvrt(_objectSpread(_objectSpread({}, createAdvrt), {}, {\n        adType: adTypes[0]\n      }));\n    } catch (error) {\n      setCreateAdvrt(_objectSpread(_objectSpread({}, createAdvrt), {}, {\n        error\n      }));\n    }\n  };\n\n  const handleTab = (_, newValue) => {\n    setTabValue(newValue);\n  };\n\n  const setAdType = () => {\n    const [selectedAdType] = adTypes.filter(type => type.id === tabValue);\n    setCreateAdvrt(_objectSpread(_objectSpread({}, createAdvrt), {}, {\n      adType: selectedAdType\n    }));\n  };\n\n  const handleCategory = category => () => {\n    setCreateAdvrt(_objectSpread(_objectSpread({}, createAdvrt), {}, {\n      error: null,\n      category\n    }));\n  };\n\n  const handleSubCategory = (id, name) => async () => {\n    try {\n      if (id !== undefined) {\n        setCreateAdvrt(_objectSpread(_objectSpread({}, createAdvrt), {}, {\n          isFetch: true\n        }));\n        const data = await userAPI.getAdDataForCreate(category.id, id, lang);\n        setIsForm(true);\n        setCreateAdvrt(_objectSpread(_objectSpread({}, createAdvrt), {}, {\n          isFetch: false,\n          subCategory: {\n            id,\n            name,\n            data\n          }\n        }));\n      } else {\n        setIsForm(true);\n        setCreateAdvrt(_objectSpread(_objectSpread({}, initCreateAdState), {}, {\n          adType: createAdvrt.adType,\n          category: createAdvrt.category\n        }));\n      }\n    } catch ({\n      message\n    }) {\n      setCreateAdvrt(_objectSpread(_objectSpread({}, createAdvrt), {}, {\n        error: message\n      }));\n    }\n  };\n\n  const handleCreateNew = () => {\n    setErrors({});\n    setTouched({});\n    setValues(initFormFields);\n    isForm && setIsForm(false);\n    isSuccess && setIsSuccess(false);\n  };\n\n  const handleBackBtn = () => {\n    if (isPreview) {\n      setIsPreview(false);\n    } else {\n      handleCreateNew();\n    }\n  };\n\n  const getFormData = data => {\n    const form = new FormData();\n    const {\n      avalTime,\n      location,\n      files,\n      adParams,\n      auction\n    } = data;\n    form.set('ads_type_id', adType.id.toString());\n    form.set('parent_categories_id', category.id.toString());\n\n    if (subCategory.id) {\n      form.set('child_categories_id', subCategory.id.toString());\n    }\n\n    form.set('title', data.title);\n    form.set('safe_deal', Number(data.safe_deal).toString());\n    form.set('delivery', Number(data.delivery).toString());\n    form.set('exchange', Number(data.exchange).toString());\n    form.set('phone', data.phone);\n    form.set('description', data.description);\n    form.set('price', data.price);\n    form.set('currency_id', data.currency.id.toString());\n    files.forEach(({\n      file\n    }) => {\n      if (file) form.append('files[]', file, file.name);\n    });\n\n    if (avalTime.isActive) {\n      avalTime.week.forEach((day, i) => form.append(`week[${i}]`, day.id.toString()));\n      form.set('start_time', avalTime.start_time.toString());\n      form.set('end_time', avalTime.end_time.toString());\n    }\n\n    for (const key in location) {\n      if (typeof location[key] === 'number') {\n        form.set(key, Number(location[key]).toString());\n      }\n    }\n\n    for (let key in adParams) {\n      const value = adParams[key];\n\n      if (value) {\n        if (typeof value === 'string') {\n          const validKey = key.replace('_value', '');\n\n          if (textFieldKeys.some(k => k === validKey)) {\n            key = validKey;\n          }\n\n          form.set(key, value);\n        } else if (Array.isArray(value)) {\n          value.forEach((value, i) => form.append(`${key}[${i}]`, value.id));\n        } else {\n          if (value.id) {\n            switch (key) {\n              case 'models':\n                key = 'model';\n                break;\n\n              case 'colors':\n                key = 'color';\n            }\n\n            form.set(`${key}_id`, value.id);\n          }\n        }\n      }\n    }\n\n    if (adType.id !== 1) {\n      form.set('duration_id', auction.duration.id.toString());\n      form.set('display_phone', Number(auction.display_phone).toString());\n\n      if (adType.id === 3) {\n        form.set('reserve_price', auction.reserve_price);\n        form.set('auto_renewal', Number(auction.auto_renewal).toString());\n        form.set('offer_the_price', Number(auction.offer_the_price).toString());\n\n        if (auction.price_by_now.isActive) {\n          form.set('price_by_now', auction.price_by_now.value);\n        }\n      }\n    } // for (const key of form.entries()) {\n    //     console.log(key[0] + '-' + key[1]);\n    // }\n\n\n    return form;\n  };\n\n  async function onSubmit(values) {\n    try {\n      if (!isPreview) {\n        setIsPreview(true);\n      } else {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          isFetch: true\n        }));\n        const data = getFormData(values);\n        await userAPI.createAdvrt(data);\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          isFetch: false\n        }));\n        setIsSuccess(true);\n        setIsPreview(false);\n      }\n    } catch (e) {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        error: e.message\n      }));\n    }\n  }\n\n  const setReqValues = () => {\n    const reqVals = {};\n    const reqParamsVals = {};\n    const adParamsVals = subCategory.data;\n\n    if (category.id === 11) {\n      reqVals['price'] = '0';\n    }\n\n    if (adType.currency.length !== 0) {\n      reqVals['currency'] = adType.currency.filter(cur => cur.name === 'sum')[0];\n    }\n\n    if (adType.id !== 1 && adType.expired.length !== 0) {\n      reqVals['auction'] = _objectSpread(_objectSpread({}, values.auction), {}, {\n        duration: adType.expired[0]\n      });\n    }\n\n    Object.keys(adParamsVals).forEach(key => {\n      if (isRequired(key) && adParams[key] === undefined) {\n        if (key === 'manufacturer' && subCategory.id == 1) {\n          reqParamsVals['models'] = {\n            id: null,\n            name: 'Не выбрано'\n          };\n        }\n\n        if (Array.isArray(adParamsVals[key])) {\n          reqParamsVals[key] = {\n            id: null,\n            name: 'Не выбрано'\n          };\n        } else {\n          reqParamsVals[key] = adParamsVals[key];\n        }\n      } else if (autoSelectKeys.some(k => k === key)) {\n        if (textFieldKeys.some(k => k === key)) {\n          reqParamsVals[`${key}_value`] = '';\n        }\n\n        reqParamsVals[key] = adParamsVals[key][0];\n      }\n    });\n    setValues(_objectSpread(_objectSpread(_objectSpread({}, values), reqVals), {}, {\n      adParams: _objectSpread(_objectSpread({}, adParams), reqParamsVals)\n    }));\n  };\n\n  useEffect(() => {\n    getAdTypes();\n  }, []);\n  useEffect(() => {\n    adTypes.length && setAdType();\n  }, [tabValue]);\n  useEffect(() => {\n    setReqValues();\n  }, [subCategory.name, adType.id]);\n  console.log(initPhotos); // console.log(createAdvrt)\n\n  console.log(values);\n  return __jsx(MainLayout, null, __jsx(Container, {\n    maxWidth: \"lg\"\n  }, __jsx(CreateAdvrt, {\n    formik: formik,\n    isForm: isForm,\n    setIsForm: setIsForm,\n    isSuccess: isSuccess,\n    setIsSuccess: setIsSuccess,\n    isPreview: isPreview,\n    setIsPreview: setIsPreview,\n    adTypes: adTypes,\n    tabValue: tabValue,\n    createAdvrt: createAdvrt,\n    categoriesList: categoriesList,\n    handleCreateNew: handleCreateNew,\n    handleBackBtn: handleBackBtn,\n    handleTab: handleTab,\n    handleCategory: handleCategory,\n    handleSubCategory: handleSubCategory\n  })));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/CreateAdvrtContainer.tsx"],"names":["React","useEffect","useState","Container","useSelector","useFormik","i18n","userAPI","MainLayout","CreateAdvrt","createAdvrtSchema","isRequired","autoSelectKeys","textFieldKeys","CameraIcon","TOTAL_FILES_LIMIT","initUrl","url","width","height","margin","CreateAdvrtContainer","lang","language","initCreateAdState","isFetch","error","adType","id","name","currency","expired","category","childs","subCategory","data","initPhotos","Array","from","length","map","initFormFields","title","safe_deal","delivery","exchange","location","files","description","phone","price","avalTime","isActive","start_time","end_time","week","auction","duration","expiration_at","offer_the_price","auto_renewal","reserve_price","price_by_now","value","display_phone","adParams","safety","multimedia","assistant","exterior","car_climate","airbags","categoriesList","categories","list","tabValue","setTabValue","adTypes","setAdTypes","createAdvrt","setCreateAdvrt","isForm","setIsForm","isPreview","setIsPreview","isSuccess","setIsSuccess","formik","initialValues","validationSchema","onSubmit","values","setValues","setErrors","setTouched","getAdTypes","handleTab","_","newValue","setAdType","selectedAdType","filter","type","handleCategory","handleSubCategory","undefined","getAdDataForCreate","message","handleCreateNew","handleBackBtn","getFormData","form","FormData","set","toString","Number","forEach","file","append","day","i","key","validKey","replace","some","k","isArray","e","setReqValues","reqVals","reqParamsVals","adParamsVals","cur","Object","keys","console","log"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAmBC,SAAnB,EAA8BC,QAA9B,QAA6C,OAA7C;AACA,SAAQC,SAAR,QAAwB,mBAAxB;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,SAAR,QAAwB,QAAxB;AACA,SAAQC,IAAR,QAAmB,YAAnB;AACA,SAAQC,OAAR,QAAsB,cAAtB;AAEA,SAAQC,UAAR,QAAyB,4BAAzB;AACA,SAAQC,WAAR,QAA0B,eAA1B;AAEA,SAAQC,iBAAR,EAA2BC,UAA3B,QAA4C,4CAA5C;AACA,SAAQC,cAAR,EAAwBC,aAAxB,QAA4C,+CAA5C;AACA,SAAQC,UAAR,QAAyB,gCAAzB;AACA,SAAQC,iBAAR,QAAgC,gBAAhC;AAGA,OAAO,MAAMC,OAAiB,GAAG;AAC7BC,EAAAA,GAAG,EACC;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAE,OAAR;AAAiBC,MAAAA,MAAM,EAAE,OAAzB;AAAkCC,MAAAA,MAAM,EAAE;AAA1C;AAAZ,KACI,MAAC,UAAD,OADJ;AAFyB,CAA1B;AAQP,OAAO,MAAMC,oBAA8B,GAAG,MAAM;AAChD,QAAMC,IAAI,GAAGhB,IAAI,CAACiB,QAAlB;AAEA,QAAMC,iBAAiB,GAAG;AACtBC,IAAAA,OAAO,EAAE,KADa;AAEtBC,IAAAA,KAAK,EAAE,IAFe;AAGtBC,IAAAA,MAAM,EAAE;AACJC,MAAAA,EAAE,EAAE,IADA;AAEJC,MAAAA,IAAI,EAAE,EAFF;AAGJC,MAAAA,QAAQ,EAAE,EAHN;AAIJC,MAAAA,OAAO,EAAE;AAJL,KAHc;AAStBC,IAAAA,QAAQ,EAAE;AACNJ,MAAAA,EAAE,EAAE,IADE;AAENC,MAAAA,IAAI,EAAE,EAFA;AAGNI,MAAAA,MAAM,EAAE;AAHF,KATY;AActBC,IAAAA,WAAW,EAAE;AACTN,MAAAA,EAAE,EAAE,IADK;AAETC,MAAAA,IAAI,EAAE,EAFG;AAGTM,MAAAA,IAAI,EAAE;AAHG;AAdS,GAA1B;AAqBA,QAAMC,UAAsB,GAAGC,KAAK,CAACC,IAAN,CAAW;AACtCC,IAAAA,MAAM,EAAExB;AAD8B,GAAX,EAE5ByB,GAF4B,CAExB,MAAMxB,OAFkB,CAA/B;AAIA,QAAMyB,cAA8B,GAAG;AACnChB,IAAAA,OAAO,EAAE,KAD0B;AAEnCC,IAAAA,KAAK,EAAE,IAF4B;AAGnCgB,IAAAA,KAAK,EAAE,EAH4B;AAInCC,IAAAA,SAAS,EAAE,KAJwB;AAKnCC,IAAAA,QAAQ,EAAE,KALyB;AAMnCC,IAAAA,QAAQ,EAAE,KANyB;AAOnCC,IAAAA,QAAQ,EAAE,IAPyB;AAQnCC,IAAAA,KAAK,EAAEX,UAR4B;AASnCY,IAAAA,WAAW,EAAE,EATsB;AAUnCC,IAAAA,KAAK,EAAE,EAV4B;AAWnCC,IAAAA,KAAK,EAAE,EAX4B;AAYnCpB,IAAAA,QAAQ,EAAE;AACNF,MAAAA,EAAE,EAAE,IADE;AAENC,MAAAA,IAAI,EAAE;AAFA,KAZyB;AAgBnCsB,IAAAA,QAAQ,EAAE;AACNC,MAAAA,QAAQ,EAAE,KADJ;AAENC,MAAAA,UAAU,EAAE,OAFN;AAGNC,MAAAA,QAAQ,EAAE,OAHJ;AAINC,MAAAA,IAAI,EAAE,CACF;AAAC3B,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,IAAI,EAAE;AAAd,OADE,EAEF;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,IAAI,EAAE;AAAd,OAFE,EAGF;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,IAAI,EAAE;AAAd,OAHE,EAIF;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,IAAI,EAAE;AAAd,OAJE,EAKF;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,IAAI,EAAE;AAAd,OALE,EAMF;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,IAAI,EAAE;AAAd,OANE,EAOF;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,IAAI,EAAE;AAAd,OAPE;AAJA,KAhByB;AA8BnC2B,IAAAA,OAAO,EAAE;AACLC,MAAAA,QAAQ,EAAE;AACN7B,QAAAA,EAAE,EAAE,IADE;AAEN8B,QAAAA,aAAa,EAAE;AAFT,OADL;AAKLC,MAAAA,eAAe,EAAE,KALZ;AAMLC,MAAAA,YAAY,EAAE,KANT;AAOLC,MAAAA,aAAa,EAAE,EAPV;AAQLC,MAAAA,YAAY,EAAE;AACVV,QAAAA,QAAQ,EAAE,KADA;AAEVW,QAAAA,KAAK,EAAE;AAFG,OART;AAYLC,MAAAA,aAAa,EAAE;AAZV,KA9B0B;AA4CnCC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,MAAM,EAAE,EADF;AAENC,MAAAA,UAAU,EAAE,EAFN;AAGNC,MAAAA,SAAS,EAAE,EAHL;AAINC,MAAAA,QAAQ,EAAE,EAJJ;AAKNC,MAAAA,WAAW,EAAE,EALP;AAMNC,MAAAA,OAAO,EAAE;AANH;AA5CyB,GAAvC;AAsDA,QAAMC,cAAc,GAAGpE,WAAW,CAAC,CAAC;AAACqE,IAAAA;AAAD,GAAD,KAA6BA,UAAU,CAACC,IAAzC,CAAlC;AAEA,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0B1E,QAAQ,CAAC,CAAD,CAAxC;AAEA,QAAM;AAAA,OAAC2E,OAAD;AAAA,OAAUC;AAAV,MAAwB5E,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAM;AAAA,OAAC6E,WAAD;AAAA,OAAcC;AAAd,MAAgC9E,QAAQ,CAACsB,iBAAD,CAA9C;AACA,QAAM;AAACG,IAAAA,MAAD;AAASK,IAAAA,QAAT;AAAmBE,IAAAA;AAAnB,MAAkC6C,WAAxC;AAEA,QAAM;AAAA,OAACE,MAAD;AAAA,OAASC;AAAT,MAAsBhF,QAAQ,CAAC,KAAD,CAApC;AAEA,QAAM;AAAA,OAACiF,SAAD;AAAA,OAAYC;AAAZ,MAA4BlF,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAM;AAAA,OAACmF,SAAD;AAAA,OAAYC;AAAZ,MAA4BpF,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMqF,MAAM,GAAGlF,SAAS,CAAC;AACrBmF,IAAAA,aAAa,EAAE/C,cADM;AAErBgD,IAAAA,gBAAgB,EAAE/E,iBAFG;AAGrBgF,IAAAA;AAHqB,GAAD,CAAxB;AAMA,QAAM;AAACC,IAAAA,MAAD;AAASC,IAAAA,SAAT;AAAoBC,IAAAA,SAApB;AAA+BC,IAAAA;AAA/B,MAA6CP,MAAnD;AACA,QAAM;AAACtB,IAAAA;AAAD,MAAa0B,MAAnB;;AAEA,QAAMI,UAAU,GAAG,YAAY;AAC3B,QAAI;AACAf,MAAAA,cAAc,iCAAKD,WAAL;AAAkBtD,QAAAA,OAAO,EAAE;AAA3B,SAAd;AAEA,YAAMoD,OAAO,GAAG,MAAMtE,OAAO,CAACwF,UAAR,CAAmBzE,IAAnB,CAAtB;AAEA0D,MAAAA,cAAc,iCAAKD,WAAL;AAAkBtD,QAAAA,OAAO,EAAE;AAA3B,SAAd;AAEAqD,MAAAA,UAAU,CAACD,OAAD,CAAV;AACAG,MAAAA,cAAc,iCACPD,WADO;AAEVpD,QAAAA,MAAM,EAAEkD,OAAO,CAAC,CAAD;AAFL,SAAd;AAIH,KAZD,CAYE,OAAOnD,KAAP,EAAc;AACZsD,MAAAA,cAAc,iCAAKD,WAAL;AAAkBrD,QAAAA;AAAlB,SAAd;AACH;AACJ,GAhBD;;AAkBA,QAAMsE,SAAS,GAAG,CAACC,CAAD,EAAIC,QAAJ,KAAiB;AAC/BtB,IAAAA,WAAW,CAACsB,QAAD,CAAX;AACH,GAFD;;AAIA,QAAMC,SAAS,GAAG,MAAM;AACpB,UAAM,CAACC,cAAD,IAAmBvB,OAAO,CAACwB,MAAR,CAAeC,IAAI,IAAIA,IAAI,CAAC1E,EAAL,KAAY+C,QAAnC,CAAzB;AAEAK,IAAAA,cAAc,iCACPD,WADO;AAEVpD,MAAAA,MAAM,EAAEyE;AAFE,OAAd;AAIH,GAPD;;AASA,QAAMG,cAAc,GAAIvE,QAAD,IAAc,MAAM;AACvCgD,IAAAA,cAAc,iCACPD,WADO;AAEVrD,MAAAA,KAAK,EAAE,IAFG;AAGVM,MAAAA;AAHU,OAAd;AAKH,GAND;;AAQA,QAAMwE,iBAAiB,GAAG,CAAC5E,EAAD,EAAKC,IAAL,KAAc,YAAY;AAChD,QAAI;AACA,UAAID,EAAE,KAAK6E,SAAX,EAAsB;AAClBzB,QAAAA,cAAc,iCACPD,WADO;AAEVtD,UAAAA,OAAO,EAAE;AAFC,WAAd;AAKA,cAAMU,IAAI,GAAG,MAAM5B,OAAO,CAACmG,kBAAR,CAA2B1E,QAAQ,CAACJ,EAApC,EAAwCA,EAAxC,EAA4CN,IAA5C,CAAnB;AAEA4D,QAAAA,SAAS,CAAC,IAAD,CAAT;AAEAF,QAAAA,cAAc,iCACPD,WADO;AAEVtD,UAAAA,OAAO,EAAE,KAFC;AAGVS,UAAAA,WAAW,EAAE;AAACN,YAAAA,EAAD;AAAKC,YAAAA,IAAL;AAAWM,YAAAA;AAAX;AAHH,WAAd;AAKH,OAfD,MAeO;AACH+C,QAAAA,SAAS,CAAC,IAAD,CAAT;AACAF,QAAAA,cAAc,iCACPxD,iBADO;AAEVG,UAAAA,MAAM,EAAEoD,WAAW,CAACpD,MAFV;AAGVK,UAAAA,QAAQ,EAAE+C,WAAW,CAAC/C;AAHZ,WAAd;AAKH;AACJ,KAxBD,CAwBE,OAAO;AAAC2E,MAAAA;AAAD,KAAP,EAAkB;AAChB3B,MAAAA,cAAc,iCACPD,WADO;AAEVrD,QAAAA,KAAK,EAAEiF;AAFG,SAAd;AAIH;AACJ,GA/BD;;AAiCA,QAAMC,eAAe,GAAG,MAAM;AAC1Bf,IAAAA,SAAS,CAAC,EAAD,CAAT;AACAC,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAF,IAAAA,SAAS,CAACnD,cAAD,CAAT;AACAwC,IAAAA,MAAM,IAAIC,SAAS,CAAC,KAAD,CAAnB;AACAG,IAAAA,SAAS,IAAIC,YAAY,CAAC,KAAD,CAAzB;AACH,GAND;;AAQA,QAAMuB,aAAa,GAAG,MAAM;AACxB,QAAI1B,SAAJ,EAAe;AACXC,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAFD,MAEO;AACHwB,MAAAA,eAAe;AAClB;AACJ,GAND;;AAQA,QAAME,WAAW,GAAI3E,IAAD,IAA0B;AAC1C,UAAM4E,IAAI,GAAG,IAAIC,QAAJ,EAAb;AACA,UAAM;AACF7D,MAAAA,QADE;AAEFL,MAAAA,QAFE;AAGFC,MAAAA,KAHE;AAIFkB,MAAAA,QAJE;AAKFT,MAAAA;AALE,QAMFrB,IANJ;AAQA4E,IAAAA,IAAI,CAACE,GAAL,CAAS,aAAT,EAAwBtF,MAAM,CAACC,EAAP,CAAUsF,QAAV,EAAxB;AACAH,IAAAA,IAAI,CAACE,GAAL,CAAS,sBAAT,EAAiCjF,QAAQ,CAACJ,EAAT,CAAYsF,QAAZ,EAAjC;;AACA,QAAIhF,WAAW,CAACN,EAAhB,EAAoB;AAChBmF,MAAAA,IAAI,CAACE,GAAL,CAAS,qBAAT,EAAgC/E,WAAW,CAACN,EAAZ,CAAesF,QAAf,EAAhC;AACH;;AACDH,IAAAA,IAAI,CAACE,GAAL,CAAS,OAAT,EAAkB9E,IAAI,CAACO,KAAvB;AACAqE,IAAAA,IAAI,CAACE,GAAL,CAAS,WAAT,EAAsBE,MAAM,CAAChF,IAAI,CAACQ,SAAN,CAAN,CAAuBuE,QAAvB,EAAtB;AACAH,IAAAA,IAAI,CAACE,GAAL,CAAS,UAAT,EAAqBE,MAAM,CAAChF,IAAI,CAACS,QAAN,CAAN,CAAsBsE,QAAtB,EAArB;AACAH,IAAAA,IAAI,CAACE,GAAL,CAAS,UAAT,EAAqBE,MAAM,CAAChF,IAAI,CAACU,QAAN,CAAN,CAAsBqE,QAAtB,EAArB;AACAH,IAAAA,IAAI,CAACE,GAAL,CAAS,OAAT,EAAkB9E,IAAI,CAACc,KAAvB;AACA8D,IAAAA,IAAI,CAACE,GAAL,CAAS,aAAT,EAAwB9E,IAAI,CAACa,WAA7B;AACA+D,IAAAA,IAAI,CAACE,GAAL,CAAS,OAAT,EAAkB9E,IAAI,CAACe,KAAvB;AACA6D,IAAAA,IAAI,CAACE,GAAL,CAAS,aAAT,EAAwB9E,IAAI,CAACL,QAAL,CAAcF,EAAd,CAAiBsF,QAAjB,EAAxB;AAEAnE,IAAAA,KAAK,CAACqE,OAAN,CACI,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAiB;AACb,UAAIA,IAAJ,EAAUN,IAAI,CAACO,MAAL,CAAY,SAAZ,EAAuBD,IAAvB,EAA6BA,IAAI,CAACxF,IAAlC;AACb,KAHL;;AAKA,QAAIsB,QAAQ,CAACC,QAAb,EAAuB;AACnBD,MAAAA,QAAQ,CAACI,IAAT,CAAc6D,OAAd,CAAsB,CAACG,GAAD,EAAMC,CAAN,KAClBT,IAAI,CAACO,MAAL,CAAa,QAAOE,CAAE,GAAtB,EAA0BD,GAAG,CAAC3F,EAAJ,CAAOsF,QAAP,EAA1B,CADJ;AAGAH,MAAAA,IAAI,CAACE,GAAL,CAAS,YAAT,EAAuB9D,QAAQ,CAACE,UAAT,CAAoB6D,QAApB,EAAvB;AACAH,MAAAA,IAAI,CAACE,GAAL,CAAS,UAAT,EAAqB9D,QAAQ,CAACG,QAAT,CAAkB4D,QAAlB,EAArB;AACH;;AAED,SAAK,MAAMO,GAAX,IAAkB3E,QAAlB,EAA4B;AACxB,UAAI,OAAOA,QAAQ,CAAC2E,GAAD,CAAf,KAAyB,QAA7B,EAAuC;AACnCV,QAAAA,IAAI,CAACE,GAAL,CAASQ,GAAT,EAAcN,MAAM,CAACrE,QAAQ,CAAC2E,GAAD,CAAT,CAAN,CAAsBP,QAAtB,EAAd;AACH;AACJ;;AAED,SAAK,IAAIO,GAAT,IAAgBxD,QAAhB,EAA0B;AACtB,YAAMF,KAAK,GAAGE,QAAQ,CAACwD,GAAD,CAAtB;;AACA,UAAI1D,KAAJ,EAAW;AACP,YAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,gBAAM2D,QAAQ,GAAGD,GAAG,CAACE,OAAJ,CAAY,QAAZ,EAAsB,EAAtB,CAAjB;;AACA,cAAI9G,aAAa,CAAC+G,IAAd,CAAmBC,CAAC,IAAIA,CAAC,KAAKH,QAA9B,CAAJ,EAA6C;AACzCD,YAAAA,GAAG,GAAGC,QAAN;AACH;;AACDX,UAAAA,IAAI,CAACE,GAAL,CAASQ,GAAT,EAAc1D,KAAd;AACH,SAND,MAMO,IAAI1B,KAAK,CAACyF,OAAN,CAAc/D,KAAd,CAAJ,EAA0B;AAC7BA,UAAAA,KAAK,CAACqD,OAAN,CAAc,CAACrD,KAAD,EAAQyD,CAAR,KACVT,IAAI,CAACO,MAAL,CAAa,GAAEG,GAAI,IAAGD,CAAE,GAAxB,EAA4BzD,KAAK,CAACnC,EAAlC,CADJ;AAGH,SAJM,MAIA;AACH,cAAImC,KAAK,CAACnC,EAAV,EAAc;AACV,oBAAQ6F,GAAR;AACI,mBAAK,QAAL;AACIA,gBAAAA,GAAG,GAAG,OAAN;AACA;;AACJ,mBAAK,QAAL;AACIA,gBAAAA,GAAG,GAAG,OAAN;AALR;;AAOAV,YAAAA,IAAI,CAACE,GAAL,CAAU,GAAEQ,GAAI,KAAhB,EAAsB1D,KAAK,CAACnC,EAA5B;AACH;AACJ;AACJ;AACJ;;AAED,QAAID,MAAM,CAACC,EAAP,KAAc,CAAlB,EAAqB;AACjBmF,MAAAA,IAAI,CAACE,GAAL,CAAS,aAAT,EAAwBzD,OAAO,CAACC,QAAR,CAAiB7B,EAAjB,CAAoBsF,QAApB,EAAxB;AACAH,MAAAA,IAAI,CAACE,GAAL,CAAS,eAAT,EAA0BE,MAAM,CAAC3D,OAAO,CAACQ,aAAT,CAAN,CAA8BkD,QAA9B,EAA1B;;AACA,UAAIvF,MAAM,CAACC,EAAP,KAAc,CAAlB,EAAqB;AACjBmF,QAAAA,IAAI,CAACE,GAAL,CAAS,eAAT,EAA0BzD,OAAO,CAACK,aAAlC;AACAkD,QAAAA,IAAI,CAACE,GAAL,CAAS,cAAT,EAAyBE,MAAM,CAAC3D,OAAO,CAACI,YAAT,CAAN,CAA6BsD,QAA7B,EAAzB;AACAH,QAAAA,IAAI,CAACE,GAAL,CAAS,iBAAT,EAA4BE,MAAM,CAAC3D,OAAO,CAACG,eAAT,CAAN,CAAgCuD,QAAhC,EAA5B;;AACA,YAAI1D,OAAO,CAACM,YAAR,CAAqBV,QAAzB,EAAmC;AAC/B2D,UAAAA,IAAI,CAACE,GAAL,CAAS,cAAT,EAAyBzD,OAAO,CAACM,YAAR,CAAqBC,KAA9C;AACH;AACJ;AACJ,KAlFyC,CAoF1C;AACA;AACA;;;AAEA,WAAOgD,IAAP;AACH,GAzFD;;AA2FA,iBAAerB,QAAf,CAAwBC,MAAxB,EAAgD;AAC5C,QAAI;AACA,UAAI,CAACR,SAAL,EAAgB;AACZC,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,OAFD,MAEO;AACHQ,QAAAA,SAAS,iCAAKD,MAAL;AAAalE,UAAAA,OAAO,EAAE;AAAtB,WAAT;AAEA,cAAMU,IAAI,GAAG2E,WAAW,CAACnB,MAAD,CAAxB;AACA,cAAMpF,OAAO,CAACwE,WAAR,CAAoB5C,IAApB,CAAN;AAEAyD,QAAAA,SAAS,iCAAKD,MAAL;AAAalE,UAAAA,OAAO,EAAE;AAAtB,WAAT;AAEA6D,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACAF,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,KAdD,CAcE,OAAO2C,CAAP,EAAU;AACRnC,MAAAA,SAAS,iCAAKD,MAAL;AAAajE,QAAAA,KAAK,EAAEqG,CAAC,CAACpB;AAAtB,SAAT;AACH;AACJ;;AAED,QAAMqB,YAAY,GAAG,MAAM;AACvB,UAAMC,OAAO,GAAG,EAAhB;AACA,UAAMC,aAAa,GAAG,EAAtB;AAEA,UAAMC,YAAY,GAAGjG,WAAW,CAACC,IAAjC;;AAEA,QAAIH,QAAQ,CAACJ,EAAT,KAAgB,EAApB,EAAwB;AACpBqG,MAAAA,OAAO,CAAC,OAAD,CAAP,GAAmB,GAAnB;AACH;;AAED,QAAItG,MAAM,CAACG,QAAP,CAAgBS,MAAhB,KAA2B,CAA/B,EAAkC;AAC9B0F,MAAAA,OAAO,CAAC,UAAD,CAAP,GAAsBtG,MAAM,CAACG,QAAP,CAAgBuE,MAAhB,CAAuB+B,GAAG,IAAIA,GAAG,CAACvG,IAAJ,KAAa,KAA3C,EAAkD,CAAlD,CAAtB;AACH;;AAED,QAAIF,MAAM,CAACC,EAAP,KAAc,CAAd,IAAmBD,MAAM,CAACI,OAAP,CAAeQ,MAAf,KAA0B,CAAjD,EAAoD;AAChD0F,MAAAA,OAAO,CAAC,SAAD,CAAP,mCACOtC,MAAM,CAACnC,OADd;AAEIC,QAAAA,QAAQ,EAAE9B,MAAM,CAACI,OAAP,CAAe,CAAf;AAFd;AAIH;;AAEDsG,IAAAA,MAAM,CAACC,IAAP,CAAYH,YAAZ,EAA0Bf,OAA1B,CAAkCK,GAAG,IAAI;AACrC,UAAI9G,UAAU,CAAC8G,GAAD,CAAV,IAAmBxD,QAAQ,CAACwD,GAAD,CAAR,KAAkBhB,SAAzC,EAAoD;AAChD,YAAIgB,GAAG,KAAK,cAAR,IAA0BvF,WAAW,CAACN,EAAZ,IAAkB,CAAhD,EAAmD;AAC/CsG,UAAAA,aAAa,CAAC,QAAD,CAAb,GAA0B;AAACtG,YAAAA,EAAE,EAAE,IAAL;AAAWC,YAAAA,IAAI,EAAE;AAAjB,WAA1B;AACH;;AACD,YAAIQ,KAAK,CAACyF,OAAN,CAAcK,YAAY,CAACV,GAAD,CAA1B,CAAJ,EAAsC;AAClCS,UAAAA,aAAa,CAACT,GAAD,CAAb,GAAqB;AAAC7F,YAAAA,EAAE,EAAE,IAAL;AAAWC,YAAAA,IAAI,EAAE;AAAjB,WAArB;AACH,SAFD,MAEO;AACHqG,UAAAA,aAAa,CAACT,GAAD,CAAb,GAAqBU,YAAY,CAACV,GAAD,CAAjC;AACH;AACJ,OATD,MASO,IAAI7G,cAAc,CAACgH,IAAf,CAAoBC,CAAC,IAAIA,CAAC,KAAKJ,GAA/B,CAAJ,EAAyC;AAC5C,YAAI5G,aAAa,CAAC+G,IAAd,CAAmBC,CAAC,IAAIA,CAAC,KAAKJ,GAA9B,CAAJ,EAAwC;AACpCS,UAAAA,aAAa,CAAE,GAAET,GAAI,QAAR,CAAb,GAAgC,EAAhC;AACH;;AACDS,QAAAA,aAAa,CAACT,GAAD,CAAb,GAAqBU,YAAY,CAACV,GAAD,CAAZ,CAAkB,CAAlB,CAArB;AACH;AACJ,KAhBD;AAkBA7B,IAAAA,SAAS,+CACFD,MADE,GAEFsC,OAFE;AAGLhE,MAAAA,QAAQ,kCACDA,QADC,GAEDiE,aAFC;AAHH,OAAT;AAQH,GA/CD;;AAiDAjI,EAAAA,SAAS,CAAC,MAAM;AACZ8F,IAAAA,UAAU;AACb,GAFQ,EAEN,EAFM,CAAT;AAIA9F,EAAAA,SAAS,CAAC,MAAM;AACZ4E,IAAAA,OAAO,CAACtC,MAAR,IAAkB4D,SAAS,EAA3B;AACH,GAFQ,EAEN,CAACxB,QAAD,CAFM,CAAT;AAIA1E,EAAAA,SAAS,CAAC,MAAM;AACZ+H,IAAAA,YAAY;AACf,GAFQ,EAEN,CAAC9F,WAAW,CAACL,IAAb,EAAmBF,MAAM,CAACC,EAA1B,CAFM,CAAT;AAIA2G,EAAAA,OAAO,CAACC,GAAR,CAAYpG,UAAZ,EA9WgD,CA+WhD;;AACAmG,EAAAA,OAAO,CAACC,GAAR,CAAY7C,MAAZ;AACA,SACI,MAAC,UAAD,QACI,MAAC,SAAD;AAAW,IAAA,QAAQ,EAAC;AAApB,KACI,MAAC,WAAD;AACI,IAAA,MAAM,EAAEJ,MADZ;AAEI,IAAA,MAAM,EAAEN,MAFZ;AAGI,IAAA,SAAS,EAAEC,SAHf;AAII,IAAA,SAAS,EAAEG,SAJf;AAKI,IAAA,YAAY,EAAEC,YALlB;AAMI,IAAA,SAAS,EAAEH,SANf;AAOI,IAAA,YAAY,EAAEC,YAPlB;AAQI,IAAA,OAAO,EAAEP,OARb;AASI,IAAA,QAAQ,EAAEF,QATd;AAUI,IAAA,WAAW,EAAEI,WAVjB;AAWI,IAAA,cAAc,EAAEP,cAXpB;AAYI,IAAA,eAAe,EAAEoC,eAZrB;AAaI,IAAA,aAAa,EAAEC,aAbnB;AAcI,IAAA,SAAS,EAAEb,SAdf;AAeI,IAAA,cAAc,EAAEO,cAfpB;AAgBI,IAAA,iBAAiB,EAAEC;AAhBvB,IADJ,CADJ,CADJ;AAwBH,CAzYM","sourcesContent":["import React, {FC, useEffect, useState} from 'react';\r\nimport {Container} from '@material-ui/core';\r\nimport {useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {i18n} from \"@root/i18n\";\r\nimport {userAPI} from '@src/api/api';\r\nimport {RootState} from \"@src/redux/rootReducer\";\r\nimport {MainLayout} from \"@src/components/MainLayout\";\r\nimport {CreateAdvrt} from \"./CreateAdvrt\";\r\nimport {CreateAdFields, FileType} from \"@root/interfaces/Advertisement\";\r\nimport {createAdvrtSchema, isRequired} from \"@root/validation_schemas/createAdvrtSchema\";\r\nimport {autoSelectKeys, textFieldKeys} from \"../create_advrt/advrt_form/AdvrtFormContainer\";\r\nimport {CameraIcon} from \"@src/components/elements/icons\";\r\nimport {TOTAL_FILES_LIMIT} from \"@src/constants\";\r\n\r\n\r\nexport const initUrl: FileType = {\r\n    url: (\r\n        <div style={{width: '140px', height: '140px', margin: 'auto'}}>\r\n            <CameraIcon/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport const CreateAdvrtContainer: FC<void> = () => {\r\n    const lang = i18n.language;\r\n\r\n    const initCreateAdState = {\r\n        isFetch: false,\r\n        error: null,\r\n        adType: {\r\n            id: null,\r\n            name: '',\r\n            currency: [],\r\n            expired: [],\r\n        },\r\n        category: {\r\n            id: null,\r\n            name: '',\r\n            childs: []\r\n        },\r\n        subCategory: {\r\n            id: null,\r\n            name: '',\r\n            data: {}\r\n        }\r\n    };\r\n\r\n    const initPhotos: FileType[] = Array.from({\r\n        length: TOTAL_FILES_LIMIT\r\n    }).map(() => initUrl);\r\n\r\n    const initFormFields: CreateAdFields = {\r\n        isFetch: false,\r\n        error: null,\r\n        title: '',\r\n        safe_deal: false,\r\n        delivery: false,\r\n        exchange: false,\r\n        location: null,\r\n        files: initPhotos,\r\n        description: '',\r\n        phone: '',\r\n        price: '',\r\n        currency: {\r\n            id: null,\r\n            name: ''\r\n        },\r\n        avalTime: {\r\n            isActive: false,\r\n            start_time: '00:00',\r\n            end_time: '00:00',\r\n            week: [\r\n                {id: 1, name: 'Пн'},\r\n                {id: 2, name: 'Вт'},\r\n                {id: 3, name: 'Ср'},\r\n                {id: 4, name: 'Чт'},\r\n                {id: 5, name: 'Пт'},\r\n                {id: 6, name: 'Сб'},\r\n                {id: 7, name: 'Вс'}\r\n            ],\r\n        },\r\n        auction: {\r\n            duration: {\r\n                id: null,\r\n                expiration_at: null\r\n            },\r\n            offer_the_price: false,\r\n            auto_renewal: false,\r\n            reserve_price: '',\r\n            price_by_now: {\r\n                isActive: false,\r\n                value: ''\r\n            },\r\n            display_phone: false,\r\n        },\r\n        adParams: {\r\n            safety: [],\r\n            multimedia: [],\r\n            assistant: [],\r\n            exterior: [],\r\n            car_climate: [],\r\n            airbags: [],\r\n        }\r\n    };\r\n\r\n    const categoriesList = useSelector(({categories}: RootState) => categories.list);\r\n\r\n    const [tabValue, setTabValue] = useState(1);\r\n\r\n    const [adTypes, setAdTypes] = useState([]);\r\n\r\n    const [createAdvrt, setCreateAdvrt] = useState(initCreateAdState);\r\n    const {adType, category, subCategory} = createAdvrt;\r\n\r\n    const [isForm, setIsForm] = useState(false);\r\n\r\n    const [isPreview, setIsPreview] = useState(false);\r\n\r\n    const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n    const formik = useFormik({\r\n        initialValues: initFormFields,\r\n        validationSchema: createAdvrtSchema,\r\n        onSubmit\r\n    });\r\n\r\n    const {values, setValues, setErrors, setTouched} = formik;\r\n    const {adParams} = values;\r\n\r\n    const getAdTypes = async () => {\r\n        try {\r\n            setCreateAdvrt({...createAdvrt, isFetch: true});\r\n\r\n            const adTypes = await userAPI.getAdTypes(lang);\r\n\r\n            setCreateAdvrt({...createAdvrt, isFetch: false});\r\n\r\n            setAdTypes(adTypes);\r\n            setCreateAdvrt({\r\n                ...createAdvrt,\r\n                adType: adTypes[0]\r\n            })\r\n        } catch (error) {\r\n            setCreateAdvrt({...createAdvrt, error});\r\n        }\r\n    };\r\n\r\n    const handleTab = (_, newValue) => {\r\n        setTabValue(newValue);\r\n    };\r\n\r\n    const setAdType = () => {\r\n        const [selectedAdType] = adTypes.filter(type => type.id === tabValue);\r\n\r\n        setCreateAdvrt({\r\n            ...createAdvrt,\r\n            adType: selectedAdType\r\n        });\r\n    };\r\n\r\n    const handleCategory = (category) => () => {\r\n        setCreateAdvrt({\r\n            ...createAdvrt,\r\n            error: null,\r\n            category\r\n        });\r\n    };\r\n\r\n    const handleSubCategory = (id, name) => async () => {\r\n        try {\r\n            if (id !== undefined) {\r\n                setCreateAdvrt({\r\n                    ...createAdvrt,\r\n                    isFetch: true\r\n                });\r\n\r\n                const data = await userAPI.getAdDataForCreate(category.id, id, lang);\r\n\r\n                setIsForm(true);\r\n\r\n                setCreateAdvrt({\r\n                    ...createAdvrt,\r\n                    isFetch: false,\r\n                    subCategory: {id, name, data}\r\n                });\r\n            } else {\r\n                setIsForm(true);\r\n                setCreateAdvrt({\r\n                    ...initCreateAdState,\r\n                    adType: createAdvrt.adType,\r\n                    category: createAdvrt.category\r\n                });\r\n            }\r\n        } catch ({message}) {\r\n            setCreateAdvrt({\r\n                ...createAdvrt,\r\n                error: message\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleCreateNew = () => {\r\n        setErrors({});\r\n        setTouched({});\r\n        setValues(initFormFields);\r\n        isForm && setIsForm(false);\r\n        isSuccess && setIsSuccess(false);\r\n    };\r\n\r\n    const handleBackBtn = () => {\r\n        if (isPreview) {\r\n            setIsPreview(false);\r\n        } else {\r\n            handleCreateNew();\r\n        }\r\n    };\r\n\r\n    const getFormData = (data: CreateAdFields) => {\r\n        const form = new FormData();\r\n        const {\r\n            avalTime,\r\n            location,\r\n            files,\r\n            adParams,\r\n            auction\r\n        } = data;\r\n\r\n        form.set('ads_type_id', adType.id.toString());\r\n        form.set('parent_categories_id', category.id.toString());\r\n        if (subCategory.id) {\r\n            form.set('child_categories_id', subCategory.id.toString());\r\n        }\r\n        form.set('title', data.title);\r\n        form.set('safe_deal', Number(data.safe_deal).toString());\r\n        form.set('delivery', Number(data.delivery).toString());\r\n        form.set('exchange', Number(data.exchange).toString());\r\n        form.set('phone', data.phone);\r\n        form.set('description', data.description);\r\n        form.set('price', data.price);\r\n        form.set('currency_id', data.currency.id.toString());\r\n\r\n        files.forEach(\r\n            ({file}: any) => {\r\n                if (file) form.append('files[]', file, file.name);\r\n            });\r\n\r\n        if (avalTime.isActive) {\r\n            avalTime.week.forEach((day, i) => (\r\n                form.append(`week[${i}]`, day.id.toString())\r\n            ));\r\n            form.set('start_time', avalTime.start_time.toString());\r\n            form.set('end_time', avalTime.end_time.toString());\r\n        }\r\n\r\n        for (const key in location) {\r\n            if (typeof location[key] === 'number') {\r\n                form.set(key, Number(location[key]).toString());\r\n            }\r\n        }\r\n\r\n        for (let key in adParams) {\r\n            const value = adParams[key];\r\n            if (value) {\r\n                if (typeof value === 'string') {\r\n                    const validKey = key.replace('_value', '');\r\n                    if (textFieldKeys.some(k => k === validKey)) {\r\n                        key = validKey;\r\n                    }\r\n                    form.set(key, value);\r\n                } else if (Array.isArray(value)) {\r\n                    value.forEach((value, i) => (\r\n                        form.append(`${key}[${i}]`, value.id))\r\n                    )\r\n                } else {\r\n                    if (value.id) {\r\n                        switch (key) {\r\n                            case 'models' :\r\n                                key = 'model';\r\n                                break;\r\n                            case 'colors' :\r\n                                key = 'color';\r\n                        }\r\n                        form.set(`${key}_id`, value.id);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (adType.id !== 1) {\r\n            form.set('duration_id', auction.duration.id.toString());\r\n            form.set('display_phone', Number(auction.display_phone).toString());\r\n            if (adType.id === 3) {\r\n                form.set('reserve_price', auction.reserve_price);\r\n                form.set('auto_renewal', Number(auction.auto_renewal).toString());\r\n                form.set('offer_the_price', Number(auction.offer_the_price).toString());\r\n                if (auction.price_by_now.isActive) {\r\n                    form.set('price_by_now', auction.price_by_now.value);\r\n                }\r\n            }\r\n        }\r\n\r\n        // for (const key of form.entries()) {\r\n        //     console.log(key[0] + '-' + key[1]);\r\n        // }\r\n\r\n        return form;\r\n    };\r\n\r\n    async function onSubmit(values: CreateAdFields) {\r\n        try {\r\n            if (!isPreview) {\r\n                setIsPreview(true);\r\n            } else {\r\n                setValues({...values, isFetch: true});\r\n\r\n                const data = getFormData(values);\r\n                await userAPI.createAdvrt(data);\r\n\r\n                setValues({...values, isFetch: false});\r\n\r\n                setIsSuccess(true);\r\n                setIsPreview(false);\r\n            }\r\n        } catch (e) {\r\n            setValues({...values, error: e.message});\r\n        }\r\n    }\r\n\r\n    const setReqValues = () => {\r\n        const reqVals = {};\r\n        const reqParamsVals = {};\r\n\r\n        const adParamsVals = subCategory.data;\r\n\r\n        if (category.id === 11) {\r\n            reqVals['price'] = '0';\r\n        }\r\n\r\n        if (adType.currency.length !== 0) {\r\n            reqVals['currency'] = adType.currency.filter(cur => cur.name === 'sum')[0];\r\n        }\r\n\r\n        if (adType.id !== 1 && adType.expired.length !== 0) {\r\n            reqVals['auction'] = {\r\n                ...values.auction,\r\n                duration: adType.expired[0]\r\n            };\r\n        }\r\n\r\n        Object.keys(adParamsVals).forEach(key => {\r\n            if (isRequired(key) && adParams[key] === undefined) {\r\n                if (key === 'manufacturer' && subCategory.id == 1) {\r\n                    reqParamsVals['models'] = {id: null, name: 'Не выбрано'};\r\n                }\r\n                if (Array.isArray(adParamsVals[key])) {\r\n                    reqParamsVals[key] = {id: null, name: 'Не выбрано'};\r\n                } else {\r\n                    reqParamsVals[key] = adParamsVals[key];\r\n                }\r\n            } else if (autoSelectKeys.some(k => k === key)) {\r\n                if (textFieldKeys.some(k => k === key)) {\r\n                    reqParamsVals[`${key}_value`] = '';\r\n                }\r\n                reqParamsVals[key] = adParamsVals[key][0];\r\n            }\r\n        });\r\n\r\n        setValues({\r\n            ...values,\r\n            ...reqVals,\r\n            adParams: {\r\n                ...adParams,\r\n                ...reqParamsVals\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAdTypes();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        adTypes.length && setAdType();\r\n    }, [tabValue]);\r\n\r\n    useEffect(() => {\r\n        setReqValues();\r\n    }, [subCategory.name, adType.id]);\r\n\r\n    console.log(initPhotos)\r\n    // console.log(createAdvrt)\r\n    console.log(values)\r\n    return (\r\n        <MainLayout>\r\n            <Container maxWidth=\"lg\">\r\n                <CreateAdvrt\r\n                    formik={formik}\r\n                    isForm={isForm}\r\n                    setIsForm={setIsForm}\r\n                    isSuccess={isSuccess}\r\n                    setIsSuccess={setIsSuccess}\r\n                    isPreview={isPreview}\r\n                    setIsPreview={setIsPreview}\r\n                    adTypes={adTypes}\r\n                    tabValue={tabValue}\r\n                    createAdvrt={createAdvrt}\r\n                    categoriesList={categoriesList}\r\n                    handleCreateNew={handleCreateNew}\r\n                    handleBackBtn={handleBackBtn}\r\n                    handleTab={handleTab}\r\n                    handleCategory={handleCategory}\r\n                    handleSubCategory={handleSubCategory}\r\n                />\r\n            </Container>\r\n        </MainLayout>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}