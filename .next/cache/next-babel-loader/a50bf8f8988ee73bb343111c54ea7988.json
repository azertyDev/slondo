{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { useStyles } from './useStyles';\nexport const AdvrtSettingsBlock = props => {\n  const {\n    data,\n    values,\n    onBlur,\n    handleClickMenuItem\n  } = props;\n  const keys = Object.keys(data);\n  const classes = useStyles();\n  return __jsx(React.Fragment, null, __jsx(Grid, {\n    item: true,\n    container: true,\n    xs: 12,\n    spacing: 1,\n    className: classes.root\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Typography, {\n    variant: \"h5\"\n  }, __jsx(\"strong\", null, \"\\u041D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0439\\u043A\\u0438 \\u043E\\u0431\\u044A\\u044F\\u0432\\u043B\\u0435\\u043D\\u0438\\u044F\"))), keys.map(key => {\n    if (Array.isArray(data[key])) {\n      const newData = [{\n        id: null,\n        name: 'Выбрать'\n      }, ...data[key]];\n      return __jsx(Grid, {\n        item: true,\n        key: key,\n        xs: 12,\n        sm: 4\n      }, listGenerator(newData, key));\n    }\n  })));\n\n  function listGenerator(data, key) {\n    return __jsx(\"div\", {\n      key: key\n    }, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, __jsx(\"strong\", null, key)), __jsx(CustomMenu, {\n      valueName: values[key] ? values[key].name : 'Выбрать',\n      items: data,\n      onBlur: onBlur,\n      onClick: handleClickMenuItem(key)\n    }), values[key] && Object.keys(values[key]).map(innerKey => {\n      if (Array.isArray(values[key][innerKey])) {\n        const newData = [{\n          id: null,\n          name: 'Выбрать'\n        }, ...values[key][innerKey]];\n        return listGenerator(newData, innerKey);\n      }\n    }));\n  }\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advertisement/advrtForm/advrt_settings_block/AdvrtSettingsBlock.tsx"],"names":["React","Grid","Typography","CustomMenu","useStyles","AdvrtSettingsBlock","props","data","values","onBlur","handleClickMenuItem","keys","Object","classes","root","map","key","Array","isArray","newData","id","name","listGenerator","innerKey"],"mappings":";AAAA,OAAOA,KAAP,MAAwB,OAAxB;AACA,SAAQC,IAAR,EAAcC,UAAd,QAA+B,mBAA/B;AACA,SAAQC,UAAR,QAAyB,iDAAzB;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAGA,OAAO,MAAMC,kBAA2B,GAAIC,KAAD,IAAW;AAClD,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA,MAAP;AAAeC,IAAAA,MAAf;AAAuBC,IAAAA;AAAvB,MAA8CJ,KAApD;AACA,QAAMK,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYJ,IAAZ,CAAb;AAEA,QAAMM,OAAO,GAAGT,SAAS,EAAzB;AACA,SACI,4BACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,SAAS,MAApB;AAAqB,IAAA,EAAE,EAAE,EAAzB;AAA6B,IAAA,OAAO,EAAE,CAAtC;AAAyC,IAAA,SAAS,EAAES,OAAO,CAACC;AAA5D,KACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE;AAAf,KACI,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC;AAApB,KACI,4IADJ,CADJ,CADJ,EAOQH,IAAI,CAACI,GAAL,CAAUC,GAAD,IAAS;AACd,QAAIC,KAAK,CAACC,OAAN,CAAcX,IAAI,CAACS,GAAD,CAAlB,CAAJ,EAA8B;AAC1B,YAAMG,OAAO,GAAG,CAAC;AAACC,QAAAA,EAAE,EAAE,IAAL;AAAWC,QAAAA,IAAI,EAAE;AAAjB,OAAD,EAA8B,GAAGd,IAAI,CAACS,GAAD,CAArC,CAAhB;AACA,aACI,MAAC,IAAD;AACI,QAAA,IAAI,MADR;AAEI,QAAA,GAAG,EAAEA,GAFT;AAGI,QAAA,EAAE,EAAE,EAHR;AAII,QAAA,EAAE,EAAE;AAJR,SAMKM,aAAa,CAACH,OAAD,EAAUH,GAAV,CANlB,CADJ;AAUH;AACJ,GAdD,CAPR,CADJ,CADJ;;AA6BA,WAASM,aAAT,CAAuBf,IAAvB,EAA6BS,GAA7B,EAAkC;AAC9B,WACI;AAAK,MAAA,GAAG,EAAEA;AAAV,OACI,MAAC,UAAD;AAAY,MAAA,OAAO,EAAC;AAApB,OACI,sBAASA,GAAT,CADJ,CADJ,EAII,MAAC,UAAD;AACI,MAAA,SAAS,EAAER,MAAM,CAACQ,GAAD,CAAN,GAAcR,MAAM,CAACQ,GAAD,CAAN,CAAYK,IAA1B,GAAiC,SADhD;AAEI,MAAA,KAAK,EAAEd,IAFX;AAGI,MAAA,MAAM,EAAEE,MAHZ;AAII,MAAA,OAAO,EAAEC,mBAAmB,CAACM,GAAD;AAJhC,MAJJ,EAWQR,MAAM,CAACQ,GAAD,CAAN,IAAeJ,MAAM,CAACD,IAAP,CAAYH,MAAM,CAACQ,GAAD,CAAlB,EAAyBD,GAAzB,CAA6BQ,QAAQ,IAAI;AACpD,UAAIN,KAAK,CAACC,OAAN,CAAcV,MAAM,CAACQ,GAAD,CAAN,CAAYO,QAAZ,CAAd,CAAJ,EAA0C;AACtC,cAAMJ,OAAO,GAAG,CAAC;AAACC,UAAAA,EAAE,EAAE,IAAL;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAAD,EAA8B,GAAGb,MAAM,CAACQ,GAAD,CAAN,CAAYO,QAAZ,CAAjC,CAAhB;AACA,eAAOD,aAAa,CAACH,OAAD,EAAUI,QAAV,CAApB;AACH;AACJ,KALc,CAXvB,CADJ;AAqBH;AACJ,CAzDM","sourcesContent":["import React, {FC} from \"react\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const AdvrtSettingsBlock: FC<any> = (props) => {\r\n    const {data, values, onBlur, handleClickMenuItem} = props;\r\n    const keys = Object.keys(data);\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <Grid item container xs={12} spacing={1} className={classes.root}>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h5\">\r\n                        <strong>Настройки объявления</strong>\r\n                    </Typography>\r\n                </Grid>\r\n                {\r\n                    keys.map((key) => {\r\n                        if (Array.isArray(data[key])) {\r\n                            const newData = [{id: null, name: 'Выбрать'}, ...data[key]];\r\n                            return (\r\n                                <Grid\r\n                                    item\r\n                                    key={key}\r\n                                    xs={12}\r\n                                    sm={4}\r\n                                >\r\n                                    {listGenerator(newData, key)}\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n\r\n    function listGenerator(data, key) {\r\n        return (\r\n            <div key={key}>\r\n                <Typography variant=\"subtitle1\">\r\n                    <strong>{key}</strong>\r\n                </Typography>\r\n                <CustomMenu\r\n                    valueName={values[key] ? values[key].name : 'Выбрать'}\r\n                    items={data}\r\n                    onBlur={onBlur}\r\n                    onClick={handleClickMenuItem(key)}\r\n                />\r\n                {\r\n                    values[key] && Object.keys(values[key]).map(innerKey => {\r\n                        if (Array.isArray(values[key][innerKey])) {\r\n                            const newData = [{id: null, name: 'Выбрать'}, ...values[key][innerKey]];\r\n                            return listGenerator(newData, innerKey);\r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}