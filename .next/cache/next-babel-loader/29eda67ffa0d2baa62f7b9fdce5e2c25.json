{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { FormikProvider } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport { AdvrtForm } from './AdvrtForm';\nexport const autoSelectKeys = ['condition', 'area'];\nexport const textFieldKeys = ['area'];\nconst numberRegEx = /^[0-9]*$/;\nexport const AdvrtFormContainer = props => {\n  const {\n    createAdvrt,\n    setIsForm,\n    isPreview,\n    setIsPreview,\n    formik,\n    isSuccess,\n    setIsSuccess\n  } = props;\n  const {\n    locations\n  } = useSelector(store => store);\n  const {\n    values,\n    errors,\n    setErrors,\n    touched,\n    setValues,\n    setTouched,\n    handleBlur,\n    handleSubmit\n  } = formik; // eslint-disable-next-line prefer-const\n\n  let {\n    adParams,\n    auction\n  } = values;\n\n  const handleCreateNew = () => {\n    setIsForm(false);\n    setIsSuccess(false);\n  };\n\n  const handleBackBtn = () => {\n    if (isPreview) {\n      setIsPreview(false);\n    } else {\n      handleCreateNew();\n    }\n\n    setErrors({});\n  };\n\n  const handleCheckboxChange = valName => ({\n    target\n  }) => {\n    const isAuctionField = ['auto_renewal', 'display_phone', 'offer_the_price'].some(fieldName => fieldName === valName);\n\n    if (isAuctionField) {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        auction: _objectSpread(_objectSpread({}, values.auction), {}, {\n          [valName]: target.checked\n        })\n      }));\n    } else if (valName === 'price_by_now') {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        auction: _objectSpread(_objectSpread({}, auction), {}, {\n          price_by_now: {\n            isActive: target.checked,\n            value: auction.price_by_now.value\n          }\n        })\n      }));\n    } else {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        [valName]: target.checked\n      }));\n    }\n  };\n\n  const handleParamsCheckbox = (valueName, value) => () => {\n    if (adParams[valueName]) {\n      if (adParams[valueName].some(val => val.id === value.id)) {\n        adParams[valueName].map((val, index) => {\n          if (val.id === value.id) {\n            adParams[valueName].splice(index, 1);\n          }\n        });\n      } else {\n        adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n          [valueName]: [...adParams[valueName], value]\n        });\n      }\n    } else {\n      adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n        [valueName]: [value]\n      });\n    }\n\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      adParams\n    }));\n  };\n\n  const handleMenuItem = valueName => (newValue, setAnchor) => () => {\n    setAnchor(null);\n\n    if (valueName === 'currency') {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        [valueName]: newValue\n      }));\n    } else if (valueName === 'duration') {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        auction: _objectSpread(_objectSpread({}, values.auction), {}, {\n          [valueName]: newValue\n        })\n      }));\n    } else {\n      // Reset sub props in values\n      Object.keys(newValue).map(key => {\n        if (adParams[key]) {\n          adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n            [key]: {\n              id: null,\n              name: 'Не выбрано'\n            }\n          });\n        }\n\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          adParams: _objectSpread(_objectSpread({}, adParams), {}, {\n            [valueName]: newValue\n          })\n        }));\n      });\n    }\n  };\n\n  const handleListItem = (valueName, value) => () => {\n    if (adParams[valueName] && adParams[valueName].id === value.id) {\n      adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n        [valueName]: {\n          id: null,\n          name: 'Не выбрано'\n        }\n      });\n    } else {\n      adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n        [valueName]: value\n      });\n    }\n\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      adParams\n    }));\n  };\n\n  const handleInput = valueName => ({\n    target\n  }) => {\n    if (numberRegEx.test(target.value)) {\n      if (valueName === 'price') {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          [valueName]: target.value\n        }));\n      } else {\n        adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n          [valueName]: target.value\n        });\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          adParams\n        }));\n      }\n    }\n  };\n\n  const handleAuctionInput = valName => ({\n    target\n  }) => {\n    if (numberRegEx.test(target.value)) {\n      if (valName === 'price_by_now') {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          auction: _objectSpread(_objectSpread({}, values.auction), {}, {\n            [valName]: {\n              isActive: true,\n              value: target.value\n            }\n          })\n        }));\n      } else {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          auction: _objectSpread(_objectSpread({}, values.auction), {}, {\n            [valName]: target.value\n          })\n        }));\n      }\n    }\n  };\n\n  const handleSwitch = (_, value) => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      avalTime: _objectSpread(_objectSpread({}, values.avalTime), {}, {\n        isActive: value\n      })\n    }));\n  };\n\n  const handleWeekDay = value => () => {\n    if (values.avalTime.week.some(val => val.id === value.id)) {\n      values.avalTime.week.map((val, index) => {\n        if (val.id === value.id) {\n          values.avalTime.week.splice(index, 1);\n        }\n      });\n      setValues(_objectSpread({}, values));\n    } else {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        avalTime: _objectSpread(_objectSpread({}, values.avalTime), {}, {\n          week: [...values.avalTime.week, value]\n        })\n      }));\n    }\n  };\n\n  const handleTime = ({\n    target\n  }) => {\n    let {\n      value\n    } = target;\n    const regEx = /^([0-1]?[0-9]|2[0-3])?:([0-5][0-9]?)?$/;\n    const isValid = regEx.test(value);\n\n    if (isValid) {\n      value = value.replace(/^:(.+)/, m => `00${m}`).replace(/(.+):$/, m => `${m}00`);\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        avalTime: _objectSpread(_objectSpread({}, values.avalTime), {}, {\n          [target.name]: value\n        })\n      }));\n    }\n  };\n\n  console.log(errors);\n  return __jsx(FormikProvider, {\n    value: formik\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(AdvrtForm, {\n    isSuccess: isSuccess,\n    locations: locations,\n    isPreview: isPreview,\n    setIsPreview: setIsPreview,\n    createAdvrt: createAdvrt,\n    errors: errors,\n    touched: touched,\n    setTouched: setTouched,\n    values: values,\n    setValues: setValues,\n    handleBlur: handleBlur,\n    handleTime: handleTime,\n    handleInput: handleInput,\n    handleSwitch: handleSwitch,\n    handleWeekDay: handleWeekDay,\n    handleBackBtn: handleBackBtn,\n    handleListItem: handleListItem,\n    handleMenuItem: handleMenuItem,\n    handleCreateNew: handleCreateNew,\n    handleAuctionInput: handleAuctionInput,\n    handleParamsCheckbox: handleParamsCheckbox,\n    handleCheckboxChange: handleCheckboxChange\n  })));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/AdvrtFormContainer.tsx"],"names":["React","FormikProvider","useSelector","AdvrtForm","autoSelectKeys","textFieldKeys","numberRegEx","AdvrtFormContainer","props","createAdvrt","setIsForm","isPreview","setIsPreview","formik","isSuccess","setIsSuccess","locations","store","values","errors","setErrors","touched","setValues","setTouched","handleBlur","handleSubmit","adParams","auction","handleCreateNew","handleBackBtn","handleCheckboxChange","valName","target","isAuctionField","some","fieldName","checked","price_by_now","isActive","value","handleParamsCheckbox","valueName","val","id","map","index","splice","handleMenuItem","newValue","setAnchor","Object","keys","key","name","handleListItem","handleInput","test","handleAuctionInput","handleSwitch","_","avalTime","handleWeekDay","week","handleTime","regEx","isValid","replace","m","console","log"],"mappings":"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","sourcesContent":["import React, {FC} from 'react';\r\nimport {FormikProvider} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AdvrtForm} from './AdvrtForm';\r\nimport {RootState} from \"@src/redux/rootReducer\";\r\n\r\n\r\nexport const autoSelectKeys = [\r\n    'condition',\r\n    'area'\r\n];\r\n\r\nexport const textFieldKeys = [\r\n    'area'\r\n];\r\n\r\nconst numberRegEx = /^[0-9]*$/;\r\n\r\n\r\nexport const AdvrtFormContainer: FC<any> = (props) => {\r\n    const {\r\n        createAdvrt,\r\n        setIsForm,\r\n        isPreview,\r\n        setIsPreview,\r\n        formik,\r\n        isSuccess,\r\n        setIsSuccess,\r\n    } = props;\r\n\r\n    const {locations} = useSelector((store: RootState) => store);\r\n\r\n    const {\r\n        values,\r\n        errors,\r\n        setErrors,\r\n        touched,\r\n        setValues,\r\n        setTouched,\r\n        handleBlur,\r\n        handleSubmit,\r\n    } = formik;\r\n\r\n    // eslint-disable-next-line prefer-const\r\n    let {adParams, auction} = values;\r\n\r\n    const handleCreateNew = () => {\r\n        setIsForm(false);\r\n        setIsSuccess(false);\r\n    };\r\n\r\n    const handleBackBtn = () => {\r\n        if (isPreview) {\r\n            setIsPreview(false);\r\n        } else {\r\n            handleCreateNew()\r\n        }\r\n        setErrors({});\r\n    };\r\n\r\n    const handleCheckboxChange = (valName) => ({target}) => {\r\n        const isAuctionField = ['auto_renewal', 'display_phone', 'offer_the_price']\r\n            .some(fieldName => fieldName === valName);\r\n\r\n        if (isAuctionField) {\r\n            setValues({\r\n                ...values,\r\n                auction: {\r\n                    ...values.auction,\r\n                    [valName]: target.checked\r\n                }\r\n            });\r\n        } else if (valName === 'price_by_now') {\r\n            setValues({\r\n                ...values,\r\n                auction: {\r\n                    ...auction,\r\n                    price_by_now: {\r\n                        isActive: target.checked,\r\n                        value: auction.price_by_now.value\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            setValues({...values, [valName]: target.checked});\r\n        }\r\n    };\r\n\r\n    const handleParamsCheckbox = (valueName, value) => () => {\r\n        if (adParams[valueName]) {\r\n            if (adParams[valueName].some(val => val.id === value.id)) {\r\n                adParams[valueName].map((val, index) => {\r\n                    if (val.id === value.id) {\r\n                        adParams[valueName].splice(index, 1);\r\n                    }\r\n                });\r\n            } else {\r\n                adParams = {\r\n                    ...adParams,\r\n                    [valueName]: [...adParams[valueName], value]\r\n                };\r\n            }\r\n        } else {\r\n            adParams = {...adParams, [valueName]: [value]};\r\n        }\r\n        setValues({...values, adParams});\r\n    };\r\n\r\n    const handleMenuItem = (valueName) => (newValue, setAnchor) => () => {\r\n        setAnchor(null);\r\n\r\n        if (valueName === 'currency') {\r\n            setValues({\r\n                ...values,\r\n                [valueName]: newValue\r\n            });\r\n        } else if (valueName === 'duration') {\r\n            setValues({\r\n                ...values,\r\n                auction: {\r\n                    ...values.auction,\r\n                    [valueName]: newValue\r\n                }\r\n            });\r\n        } else {\r\n            // Reset sub props in values\r\n            Object.keys(newValue).map(key => {\r\n                if (adParams[key]) {\r\n                    adParams = {\r\n                        ...adParams,\r\n                        [key]: {id: null, name: 'Не выбрано'}\r\n                    };\r\n                }\r\n                setValues({\r\n                    ...values,\r\n                    adParams: {\r\n                        ...adParams,\r\n                        [valueName]: newValue\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleListItem = (valueName, value) => () => {\r\n        if (adParams[valueName] && adParams[valueName].id === value.id) {\r\n            adParams = {\r\n                ...adParams,\r\n                [valueName]: {id: null, name: 'Не выбрано'}\r\n            };\r\n        } else {\r\n            adParams = {\r\n                ...adParams,\r\n                [valueName]: value\r\n            };\r\n        }\r\n        setValues({...values, adParams});\r\n    };\r\n\r\n    const handleInput = (valueName) => ({target}) => {\r\n        if (numberRegEx.test(target.value)) {\r\n            if (valueName === 'price') {\r\n                setValues({...values, [valueName]: target.value})\r\n            } else {\r\n                adParams = {...adParams, [valueName]: target.value};\r\n                setValues({...values, adParams})\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleAuctionInput = (valName) => ({target}) => {\r\n        if (numberRegEx.test(target.value)) {\r\n            if (valName === 'price_by_now') {\r\n                setValues({\r\n                    ...values,\r\n                    auction: {\r\n                        ...values.auction,\r\n                        [valName]: {\r\n                            isActive: true,\r\n                            value: target.value\r\n                        }\r\n                    }\r\n                })\r\n            } else {\r\n                setValues({\r\n                    ...values,\r\n                    auction: {\r\n                        ...values.auction,\r\n                        [valName]: target.value\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleSwitch = (_, value) => {\r\n        setValues({\r\n            ...values,\r\n            avalTime: {\r\n                ...values.avalTime,\r\n                isActive: value\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleWeekDay = (value) => () => {\r\n        if (values.avalTime.week.some(val => val.id === value.id)) {\r\n            values.avalTime.week.map((val, index) => {\r\n                if (val.id === value.id) {\r\n                    values.avalTime.week.splice(index, 1)\r\n                }\r\n            });\r\n            setValues({...values});\r\n        } else {\r\n            setValues({\r\n                ...values,\r\n                avalTime: {\r\n                    ...values.avalTime,\r\n                    week: [\r\n                        ...values.avalTime.week,\r\n                        value\r\n                    ]\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleTime = ({target}) => {\r\n        let {value} = target;\r\n        const regEx = /^([0-1]?[0-9]|2[0-3])?:([0-5][0-9]?)?$/;\r\n        const isValid = regEx.test(value);\r\n\r\n        if (isValid) {\r\n            value = value.replace(/^:(.+)/, m => `00${m}`).replace(/(.+):$/, m => `${m}00`);\r\n            setValues({\r\n                ...values,\r\n                avalTime: {\r\n                    ...values.avalTime,\r\n                    [target.name]: value\r\n                }\r\n            });\r\n        }\r\n    };\r\n    console.log(errors)\r\n    return (\r\n        <FormikProvider value={formik}>\r\n            <form onSubmit={handleSubmit}>\r\n                <AdvrtForm\r\n                    isSuccess={isSuccess}\r\n                    locations={locations}\r\n                    isPreview={isPreview}\r\n                    setIsPreview={setIsPreview}\r\n                    createAdvrt={createAdvrt}\r\n                    errors={errors}\r\n                    touched={touched}\r\n                    setTouched={setTouched}\r\n                    values={values}\r\n                    setValues={setValues}\r\n                    handleBlur={handleBlur}\r\n                    handleTime={handleTime}\r\n                    handleInput={handleInput}\r\n                    handleSwitch={handleSwitch}\r\n                    handleWeekDay={handleWeekDay}\r\n                    handleBackBtn={handleBackBtn}\r\n                    handleListItem={handleListItem}\r\n                    handleMenuItem={handleMenuItem}\r\n                    handleCreateNew={handleCreateNew}\r\n                    handleAuctionInput={handleAuctionInput}\r\n                    handleParamsCheckbox={handleParamsCheckbox}\r\n                    handleCheckboxChange={handleCheckboxChange}\r\n                />\r\n            </form>\r\n        </FormikProvider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}