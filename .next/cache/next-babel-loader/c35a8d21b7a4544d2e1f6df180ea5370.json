{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { userAPI } from '@src/api/api';\nimport { AdvrtForm } from './AdvrtForm';\nimport { createAdvrtSchema, requiredFields } from \"@root/validation_schemas/createAdvrtSchema\";\nimport { useFormik, FormikProvider } from \"formik\";\nimport { useSelector } from \"react-redux\";\nconst initFields = {\n  title: '',\n  price: '',\n  safe_deal: false,\n  delivery: false,\n  exchange: false,\n  location: null,\n  files: [],\n  description: '',\n  phone: '',\n  currency: '',\n  avalTime: {\n    isActive: false,\n    start_time: '00:00',\n    end_time: '00:00',\n    week: [{\n      id: 1,\n      name: 'Пн'\n    }, {\n      id: 2,\n      name: 'Вт'\n    }, {\n      id: 3,\n      name: 'Ср'\n    }, {\n      id: 4,\n      name: 'Чт'\n    }, {\n      id: 5,\n      name: 'Пт'\n    }, {\n      id: 6,\n      name: 'Сб'\n    }, {\n      id: 7,\n      name: 'Вс'\n    }]\n  },\n  // auction: {\n  //     duration_id: null,\n  //     offer_the_price: null,\n  //     auto_renewal: false,\n  //     display_phone: false,\n  //     reserve_price: null,\n  //     price_by_now: {\n  //         isActive: false,\n  //         price: ''\n  //     }\n  // },\n  adParams: {}\n};\nexport const AdvrtFormContainer = props => {\n  const {\n    createAdvrt,\n    setIsForm\n  } = props;\n  const {\n    adType,\n    category,\n    subCategory\n  } = createAdvrt;\n  const {\n    locations\n  } = useSelector(store => store);\n  const {\n    0: isPreview,\n    1: setIsPreview\n  } = useState(false);\n\n  const prepareData = data => {\n    const form = new FormData();\n\n    const {\n      avalTime,\n      safe_deal,\n      delivery,\n      exchange,\n      location,\n      files\n    } = data,\n          otherValues = _objectWithoutProperties(data, [\"avalTime\", \"safe_deal\", \"delivery\", \"exchange\", \"location\", \"files\"]);\n\n    form.set('ads_type_id', adType.id.toString());\n    form.set('safe_deal', Number(safe_deal).toString());\n    form.set('delivery', Number(delivery).toString());\n    form.set('exchange', Number(exchange).toString());\n    form.set('parent_categories_id', category.id.toString());\n    files.forEach(({\n      file\n    }) => form.append('files[]', file, file.name));\n\n    if (avalTime.isActive) {\n      avalTime.week.forEach((day, i) => form.append(`week[${i}]`, day.id.toString()));\n      form.set('start_time', avalTime.start_time.toString());\n      form.set('end_time', avalTime.end_time.toString());\n    }\n\n    for (const key in location) {\n      if (typeof location[key] === 'number') {\n        form.set(key, Number(location[key]).toString());\n      }\n    }\n\n    for (let key in otherValues) {\n      const value = otherValues[key];\n\n      if (value) {\n        if (typeof value === 'string') {\n          form.set(key, value);\n        } else if (Array.isArray(value)) {\n          value.forEach((value, i) => form.append(`${key}[${i}]`, value.id));\n        } else {\n          if (value.id) {\n            switch (key) {\n              case 'models':\n                key = 'model';\n                break;\n\n              case 'colors':\n                key = 'color';\n                break;\n            }\n\n            form.set(`${key}_id`, value.id);\n          }\n        }\n      }\n    } // for (const key of form.entries()) {\n    //     console.log(key[0] + '-' + key[1]);\n    // }\n\n\n    return form;\n  };\n\n  const onSubmit = async values => {\n    try {\n      if (!isPreview) {\n        setIsPreview(true);\n      } else {\n        const data = prepareData(values);\n        await userAPI.createAdvrt(data); // setIsSuccess(true);\n\n        console.log('success');\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: initFields,\n    validationSchema: createAdvrtSchema,\n    onSubmit\n  });\n  const {\n    values,\n    setValues,\n    errors,\n    touched,\n    setTouched,\n    handleBlur\n  } = formik;\n  let {\n    adParams\n  } = values;\n\n  const handleBackBtn = () => {\n    isPreview ? setIsPreview(false) : setIsForm(false);\n  };\n\n  const handleCheckboxChange = valName => ({\n    target\n  }) => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [valName]: target.checked\n    }));\n  };\n\n  const handleParamsCheckbox = (valueName, value) => () => {\n    if (adParams[valueName]) {\n      if (adParams[valueName].some(val => val.id === value.id)) {\n        adParams[valueName].map((val, index) => {\n          if (val.id === value.id) {\n            adParams[valueName].splice(index, 1);\n          }\n        });\n      } else {\n        adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n          [valueName]: [...adParams[valueName], value]\n        });\n      }\n    } else {\n      adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n        [valueName]: [value]\n      });\n    }\n\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      adParams\n    }));\n  };\n\n  const handleMenuItem = valueName => (newValue, setAnchor) => () => {\n    setAnchor(null);\n\n    if (valueName === 'currency') {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        [valueName]: newValue\n      }));\n    } else {\n      // Reset sub props in values\n      Object.keys(newValue).map(key => {\n        if (adParams[key]) {\n          adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n            [key]: {\n              id: null,\n              name: 'Не выбрано'\n            }\n          });\n        }\n\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          adParams: _objectSpread(_objectSpread({}, adParams), {}, {\n            [valueName]: newValue\n          })\n        }));\n      });\n    }\n  };\n\n  const handleListItem = (valueName, value) => () => {\n    if (adParams[valueName] && adParams[valueName].id === value.id) {\n      adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n        [valueName]: {\n          id: null,\n          name: 'Не выбрано'\n        }\n      });\n    } else {\n      adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n        [valueName]: value\n      });\n    }\n\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      adParams\n    }));\n  };\n\n  const handleParamsInput = valueName => ({\n    target\n  }) => {\n    adParams = _objectSpread(_objectSpread({}, adParams), {}, {\n      [valueName]: target.value\n    });\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      adParams\n    }));\n  };\n\n  const handleSwitch = (_, value) => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      avalTime: _objectSpread(_objectSpread({}, values.avalTime), {}, {\n        isActive: value\n      })\n    }));\n  };\n\n  const handleWeekDay = value => () => {\n    if (values.avalTime.week.some(val => val.id === value.id)) {\n      values.avalTime.week.map((val, index) => {\n        if (val.id === value.id) {\n          values.avalTime.week.splice(index, 1);\n        }\n      });\n      setValues(_objectSpread({}, values));\n    } else {\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        avalTime: _objectSpread(_objectSpread({}, values.avalTime), {}, {\n          week: [...values.avalTime.week, value]\n        })\n      }));\n    }\n  };\n\n  const handleTime = ({\n    target\n  }) => {\n    let {\n      value\n    } = target;\n    const regEx = /^([0-1]?[0-9]|2[0-3])?:([0-5][0-9]?)?$/;\n    const isValid = regEx.test(value);\n\n    if (isValid) {\n      value = value.replace(/^:(.+)/, m => `00${m}`).replace(/(.+):$/, m => `${m}00`);\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        avalTime: _objectSpread(_objectSpread({}, values.avalTime), {}, {\n          [target.name]: value\n        })\n      }));\n    }\n  };\n\n  const setInitValues = () => {\n    const initValues = {};\n    Object.keys(subCategory.data).forEach(k => {\n      if (k === 'adsParams' && subCategory.data.adsParams.length && subCategory.data.adsParams[0].condition) {\n        initValues['condition'] = {\n          id: null,\n          name: 'Не выбрано'\n        };\n      } else if (requiredFields[k]) {\n        initValues[k] = {\n          id: null,\n          name: 'Не выбрано'\n        };\n      }\n    });\n    setValues(_objectSpread(_objectSpread(_objectSpread({}, values), initFields), {}, {\n      currency: adType.currency[0],\n      adParams: initValues\n    }));\n  };\n\n  useEffect(() => {\n    setInitValues();\n  }, [subCategory.id, subCategory.name]);\n  console.log(values);\n  console.log(createAdvrt);\n  return __jsx(FormikProvider, {\n    value: formik\n  }, __jsx(\"form\", {\n    onSubmit: formik.handleSubmit\n  }, __jsx(AdvrtForm, {\n    locations: locations,\n    isPreview: isPreview,\n    setIsPreview: setIsPreview,\n    createAdvrt: createAdvrt,\n    errors: errors,\n    touched: touched,\n    setTouched: setTouched,\n    values: values,\n    setValues: setValues,\n    handleBlur: handleBlur,\n    handleTime: handleTime,\n    handleSwitch: handleSwitch,\n    handleWeekDay: handleWeekDay,\n    handleBackBtn: handleBackBtn,\n    handleMenuItem: handleMenuItem,\n    handleListItem: handleListItem,\n    handleParamsInput: handleParamsInput,\n    handleParamsCheckbox: handleParamsCheckbox,\n    handleCheckboxChange: handleCheckboxChange\n  })));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/AdvrtFormContainer.tsx"],"names":["React","useEffect","useState","userAPI","AdvrtForm","createAdvrtSchema","requiredFields","useFormik","FormikProvider","useSelector","initFields","title","price","safe_deal","delivery","exchange","location","files","description","phone","currency","avalTime","isActive","start_time","end_time","week","id","name","adParams","AdvrtFormContainer","props","createAdvrt","setIsForm","adType","category","subCategory","locations","store","isPreview","setIsPreview","prepareData","data","form","FormData","otherValues","set","toString","Number","forEach","file","append","day","i","key","value","Array","isArray","onSubmit","values","console","log","e","formik","initialValues","validationSchema","setValues","errors","touched","setTouched","handleBlur","handleBackBtn","handleCheckboxChange","valName","target","checked","handleParamsCheckbox","valueName","some","val","map","index","splice","handleMenuItem","newValue","setAnchor","Object","keys","handleListItem","handleParamsInput","handleSwitch","_","handleWeekDay","handleTime","regEx","isValid","test","replace","m","setInitValues","initValues","k","adsParams","length","condition","handleSubmit"],"mappings":"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","sourcesContent":["import React, {FC, useEffect, useState} from 'react';\r\nimport {userAPI} from '@src/api/api';\r\nimport {AdvrtForm} from './AdvrtForm';\r\nimport {CreateAdFields} from \"@root/interfaces/Advertisement\";\r\nimport {createAdvrtSchema, requiredFields} from \"@root/validation_schemas/createAdvrtSchema\";\r\nimport {useFormik, FormikProvider} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"@src/redux/rootReducer\";\r\n\r\n\r\nconst initFields: CreateAdFields = {\r\n    title: '',\r\n    price: '',\r\n    safe_deal: false,\r\n    delivery: false,\r\n    exchange: false,\r\n    location: null,\r\n    files: [],\r\n    description: '',\r\n    phone: '',\r\n    currency: '',\r\n    avalTime: {\r\n        isActive: false,\r\n        start_time: '00:00',\r\n        end_time: '00:00',\r\n        week: [\r\n            {id: 1, name: 'Пн'},\r\n            {id: 2, name: 'Вт'},\r\n            {id: 3, name: 'Ср'},\r\n            {id: 4, name: 'Чт'},\r\n            {id: 5, name: 'Пт'},\r\n            {id: 6, name: 'Сб'},\r\n            {id: 7, name: 'Вс'}\r\n        ],\r\n    },\r\n    // auction: {\r\n    //     duration_id: null,\r\n    //     offer_the_price: null,\r\n    //     auto_renewal: false,\r\n    //     display_phone: false,\r\n    //     reserve_price: null,\r\n    //     price_by_now: {\r\n    //         isActive: false,\r\n    //         price: ''\r\n    //     }\r\n    // },\r\n    adParams: {}\r\n};\r\n\r\nexport const AdvrtFormContainer: FC<any> = (props) => {\r\n    const {createAdvrt, setIsForm} = props;\r\n    const {adType, category, subCategory} = createAdvrt;\r\n\r\n    const {locations} = useSelector((store: RootState) => store);\r\n\r\n    const [isPreview, setIsPreview] = useState(false);\r\n\r\n    const prepareData = (data: CreateAdFields) => {\r\n        const form = new FormData();\r\n        const {\r\n            avalTime,\r\n            safe_deal,\r\n            delivery,\r\n            exchange,\r\n            location,\r\n            files,\r\n            ...otherValues\r\n        } = data;\r\n\r\n        form.set('ads_type_id', adType.id.toString());\r\n        form.set('safe_deal', Number(safe_deal).toString());\r\n        form.set('delivery', Number(delivery).toString());\r\n        form.set('exchange', Number(exchange).toString());\r\n        form.set('parent_categories_id', category.id.toString());\r\n\r\n        files.forEach(({file}: any) => (\r\n            form.append('files[]', file, file.name))\r\n        );\r\n\r\n        if (avalTime.isActive) {\r\n            avalTime.week.forEach((day, i) => (\r\n                form.append(`week[${i}]`, day.id.toString())\r\n            ));\r\n            form.set('start_time', avalTime.start_time.toString());\r\n            form.set('end_time', avalTime.end_time.toString());\r\n        }\r\n\r\n        for (const key in location) {\r\n            if (typeof location[key] === 'number') {\r\n                form.set(key, Number(location[key]).toString());\r\n            }\r\n        }\r\n\r\n        for (let key in otherValues) {\r\n            const value = otherValues[key];\r\n            if (value) {\r\n                if (typeof value === 'string') {\r\n                    form.set(key, value);\r\n                } else if (Array.isArray(value)) {\r\n                    value.forEach((value, i) => (\r\n                        form.append(`${key}[${i}]`, value.id))\r\n                    )\r\n                } else {\r\n                    if (value.id) {\r\n                        switch (key) {\r\n                            case 'models' :\r\n                                key = 'model'\r\n                                break;\r\n                            case 'colors' :\r\n                                key = 'color'\r\n                                break;\r\n                        }\r\n                        form.set(`${key}_id`, value.id);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // for (const key of form.entries()) {\r\n        //     console.log(key[0] + '-' + key[1]);\r\n        // }\r\n\r\n        return form;\r\n    };\r\n\r\n    const onSubmit = async (values: CreateAdFields) => {\r\n        try {\r\n            if (!isPreview) {\r\n                setIsPreview(true);\r\n            } else {\r\n                const data = prepareData(values);\r\n                await userAPI.createAdvrt(data);\r\n                // setIsSuccess(true);\r\n                console.log('success');\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: initFields,\r\n        validationSchema: createAdvrtSchema,\r\n        onSubmit\r\n    });\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        touched,\r\n        setTouched,\r\n        handleBlur,\r\n    } = formik;\r\n\r\n    let {adParams} = values;\r\n\r\n    const handleBackBtn = () => {\r\n        isPreview\r\n            ? setIsPreview(false)\r\n            : setIsForm(false);\r\n    };\r\n\r\n    const handleCheckboxChange = (valName) => ({target}) => {\r\n        setValues({...values, [valName]: target.checked});\r\n    };\r\n\r\n    const handleParamsCheckbox = (valueName, value) => () => {\r\n        if (adParams[valueName]) {\r\n            if (adParams[valueName].some(val => val.id === value.id)) {\r\n                adParams[valueName].map((val, index) => {\r\n                    if (val.id === value.id) {\r\n                        adParams[valueName].splice(index, 1);\r\n                    }\r\n                });\r\n            } else {\r\n                adParams = {\r\n                    ...adParams,\r\n                    [valueName]: [...adParams[valueName], value]\r\n                };\r\n            }\r\n        } else {\r\n            adParams = {...adParams, [valueName]: [value]};\r\n        }\r\n        setValues({...values, adParams});\r\n    };\r\n\r\n    const handleMenuItem = (valueName) => (newValue, setAnchor) => () => {\r\n        setAnchor(null);\r\n\r\n        if (valueName === 'currency') {\r\n            setValues({\r\n                ...values,\r\n                [valueName]: newValue\r\n            });\r\n        } else {\r\n            // Reset sub props in values\r\n            Object.keys(newValue).map(key => {\r\n                if (adParams[key]) {\r\n                    adParams = {\r\n                        ...adParams,\r\n                        [key]: {id: null, name: 'Не выбрано'}\r\n                    };\r\n                }\r\n                setValues({\r\n                    ...values,\r\n                    adParams: {\r\n                        ...adParams,\r\n                        [valueName]: newValue\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleListItem = (valueName, value) => () => {\r\n        if (adParams[valueName] && adParams[valueName].id === value.id) {\r\n            adParams = {\r\n                ...adParams,\r\n                [valueName]: {id: null, name: 'Не выбрано'}\r\n            };\r\n        } else {\r\n            adParams = {\r\n                ...adParams,\r\n                [valueName]: value\r\n            };\r\n        }\r\n        setValues({...values, adParams});\r\n    };\r\n\r\n    const handleParamsInput = (valueName) => ({target}) => {\r\n        adParams = {...adParams, [valueName]: target.value};\r\n        setValues({...values, adParams})\r\n    };\r\n\r\n    const handleSwitch = (_, value) => {\r\n        setValues({\r\n            ...values,\r\n            avalTime: {\r\n                ...values.avalTime,\r\n                isActive: value\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleWeekDay = (value) => () => {\r\n        if (values.avalTime.week.some(val => val.id === value.id)) {\r\n            values.avalTime.week.map((val, index) => {\r\n                if (val.id === value.id) {\r\n                    values.avalTime.week.splice(index, 1)\r\n                }\r\n            });\r\n            setValues({...values});\r\n        } else {\r\n            setValues({\r\n                ...values,\r\n                avalTime: {\r\n                    ...values.avalTime,\r\n                    week: [\r\n                        ...values.avalTime.week,\r\n                        value\r\n                    ]\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleTime = ({target}) => {\r\n        let {value} = target;\r\n        const regEx = /^([0-1]?[0-9]|2[0-3])?:([0-5][0-9]?)?$/;\r\n        const isValid = regEx.test(value);\r\n        if (isValid) {\r\n            value = value.replace(/^:(.+)/, m => `00${m}`).replace(/(.+):$/, m => `${m}00`);\r\n            setValues({\r\n                ...values,\r\n                avalTime: {\r\n                    ...values.avalTime,\r\n                    [target.name]: value\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const setInitValues = () => {\r\n        const initValues = {};\r\n\r\n        Object.keys(subCategory.data).forEach(k => {\r\n            if (\r\n                k === 'adsParams'\r\n                && subCategory.data.adsParams.length\r\n                && subCategory.data.adsParams[0].condition\r\n            ) {\r\n                initValues['condition'] = {id: null, name: 'Не выбрано'};\r\n            } else if (requiredFields[k]) {\r\n                initValues[k] = {id: null, name: 'Не выбрано'};\r\n            }\r\n        });\r\n\r\n        setValues({\r\n            ...values,\r\n            ...initFields,\r\n            currency: adType.currency[0],\r\n            adParams: initValues\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        setInitValues();\r\n    }, [subCategory.id, subCategory.name]);\r\n\r\n    console.log(values)\r\n    console.log(createAdvrt)\r\n    return (\r\n        <FormikProvider value={formik}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <AdvrtForm\r\n                    locations={locations}\r\n                    isPreview={isPreview}\r\n                    setIsPreview={setIsPreview}\r\n                    createAdvrt={createAdvrt}\r\n                    errors={errors}\r\n                    touched={touched}\r\n                    setTouched={setTouched}\r\n                    values={values}\r\n                    setValues={setValues}\r\n                    handleBlur={handleBlur}\r\n                    handleTime={handleTime}\r\n                    handleSwitch={handleSwitch}\r\n                    handleWeekDay={handleWeekDay}\r\n                    handleBackBtn={handleBackBtn}\r\n                    handleMenuItem={handleMenuItem}\r\n                    handleListItem={handleListItem}\r\n                    handleParamsInput={handleParamsInput}\r\n                    handleParamsCheckbox={handleParamsCheckbox}\r\n                    handleCheckboxChange={handleCheckboxChange}\r\n                />\r\n            </form>\r\n        </FormikProvider>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}