{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from '@src/api/api';\nimport Cookies from \"universal-cookie\";\nconst cookies = new Cookies();\nconst initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null\n};\nexport const fetchToken = createAsyncThunk('auth/fetchTokenByLogin', async ({\n  phone,\n  password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const token = await userAPI.login(phone, password);\n    cookies.set('token', token, {\n      maxAge: 2 * 3600\n    });\n  } catch (e) {\n    return rejectWithValue(e.message);\n  }\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setIsAuth: (state, action) => {\n      state.isAuth = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchToken.pending, state => {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchToken.fulfilled, state => {\n      state.isFetch = false;\n      state.isAuth = true;\n    });\n    builder.addCase(fetchToken.rejected, (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  setIsAuth\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/authSlice.ts"],"names":["createAsyncThunk","createSlice","userAPI","Cookies","cookies","initialState","isFetch","isAuth","error","fetchToken","phone","password","rejectWithValue","token","login","set","maxAge","e","message","authSlice","name","reducers","setIsAuth","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAAQC,OAAR,QAAsB,cAAtB;AAEA,OAAOC,OAAP,MAAoB,kBAApB;AAGA,MAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;AAQA,MAAME,YAAuB,GAAG;AAC5BC,EAAAA,OAAO,EAAE,KADmB;AAE5BC,EAAAA,MAAM,EAAE,KAFoB;AAG5BC,EAAAA,KAAK,EAAE;AAHqB,CAAhC;AAMA,OAAO,MAAMC,UAAU,GAAGT,gBAAgB,CACtC,wBADsC,EAEtC,OAAO;AAACU,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAP,EAA0B;AAACC,EAAAA;AAAD,CAA1B,KAAgD;AAC5C,MAAI;AACA,UAAMC,KAAK,GAAG,MAAMX,OAAO,CAACY,KAAR,CAAcJ,KAAd,EAAqBC,QAArB,CAApB;AACAP,IAAAA,OAAO,CAACW,GAAR,CAAY,OAAZ,EAAqBF,KAArB,EAA4B;AAACG,MAAAA,MAAM,EAAE,IAAI;AAAb,KAA5B;AACH,GAHD,CAGE,OAAOC,CAAP,EAAU;AACR,WAAOL,eAAe,CAACK,CAAC,CAACC,OAAH,CAAtB;AACH;AACJ,CATqC,CAAnC;AAYP,MAAMC,SAAS,GAAGlB,WAAW,CAAC;AAC1BmB,EAAAA,IAAI,EAAE,MADoB;AAE1Bf,EAAAA,YAF0B;AAG1BgB,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1BD,MAAAA,KAAK,CAAChB,MAAN,GAAeiB,MAAM,CAACC,OAAtB;AACH;AAHK,GAHgB;AAQ1BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,UAAU,CAACoB,OAA3B,EAAqCN,KAAD,IAAW;AAC3CA,MAAAA,KAAK,CAACjB,OAAN,GAAgB,IAAhB;AACAiB,MAAAA,KAAK,CAACf,KAAN,GAAc,IAAd;AACH,KAHD;AAIAmB,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,UAAU,CAACqB,SAA3B,EAAuCP,KAAD,IAAW;AAC7CA,MAAAA,KAAK,CAACjB,OAAN,GAAgB,KAAhB;AACAiB,MAAAA,KAAK,CAAChB,MAAN,GAAe,IAAf;AACH,KAHD;AAIAoB,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,UAAU,CAACsB,QAA3B,EAAqC,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACpDD,MAAAA,KAAK,CAACjB,OAAN,GAAgB,KAAhB;AACAiB,MAAAA,KAAK,CAACf,KAAN,GAAcgB,MAAM,CAACC,OAArB;AACH,KAHD;AAIH;AArByB,CAAD,CAA7B;AAwBA,OAAO,MAAM;AAACH,EAAAA;AAAD,IAAcH,SAAS,CAACa,OAA9B;AACP,eAAeb,SAAS,CAACc,OAAzB","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {userAPI} from '@src/api/api'\r\nimport {AuthInputVals} from \"@src/components/elements/auth_reg_form/AuthRegForm\";\r\nimport Cookies from \"universal-cookie\";\r\n\r\n\r\nconst cookies = new Cookies();\r\n\r\nexport type AuthTypes = {\r\n    isFetch: boolean,\r\n    isAuth: boolean,\r\n    error?: any\r\n};\r\n\r\nconst initialState: AuthTypes = {\r\n    isFetch: false,\r\n    isAuth: false,\r\n    error: null\r\n};\r\n\r\nexport const fetchToken = createAsyncThunk<any, AuthInputVals>(\r\n    'auth/fetchTokenByLogin',\r\n    async ({phone, password}, {rejectWithValue}) => {\r\n        try {\r\n            const token = await userAPI.login(phone, password);\r\n            cookies.set('token', token, {maxAge: 2 * 3600});\r\n        } catch (e) {\r\n            return rejectWithValue(e.message);\r\n        }\r\n    }\r\n);\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        setIsAuth: (state, action) => {\r\n            state.isAuth = action.payload\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchToken.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        })\r\n        builder.addCase(fetchToken.fulfilled, (state) => {\r\n            state.isFetch = false;\r\n            state.isAuth = true;\r\n        })\r\n        builder.addCase(fetchToken.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport const {setIsAuth} = authSlice.actions;\r\nexport default authSlice.reducer;"]},"metadata":{},"sourceType":"module"}