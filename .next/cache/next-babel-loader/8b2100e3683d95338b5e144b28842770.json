{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setIsAuthAction: (state, action) => state.isAuth = action.payload,\n    fetchTokenBeginAction: state => _objectSpread(_objectSpread({}, state), {}, {\n      isFetch: true,\n      error: null\n    }),\n    fetchTokenSuccessAction: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n      isFetch: false\n    }, action.payload),\n    fetchTokenFailureAction: (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n      isFetch: false,\n      error: action.payload\n    })\n  }\n});\nexport const auth = state => state.auth;\nexport const {\n  setIsAuth\n} = state => state.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/authReducer.ts"],"names":["createSlice","initialState","isFetch","isAuth","error","authSlice","name","reducers","setIsAuthAction","state","action","payload","fetchTokenBeginAction","fetchTokenSuccessAction","fetchTokenFailureAction","auth","setIsAuth","actions","reducer"],"mappings":";;;;;;AAAA,SAAsBA,WAAtB,QAAwC,kBAAxC;AASA,MAAMC,YAAuB,GAAG;AAC5BC,EAAAA,OAAO,EAAE,KADmB;AAE5BC,EAAAA,MAAM,EAAE,KAFoB;AAG5BC,EAAAA,KAAK,EAAE;AAHqB,CAAhC;AAMA,MAAMC,SAAS,GAAGL,WAAW,CAAC;AAC1BM,EAAAA,IAAI,EAAE,MADoB;AAE1BL,EAAAA,YAF0B;AAG1BM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,eAAe,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmBD,KAAK,CAACN,MAAN,GAAeO,MAAM,CAACC,OADpD;AAENC,IAAAA,qBAAqB,EAAGH,KAAD,oCAChBA,KADgB;AAEnBP,MAAAA,OAAO,EAAE,IAFU;AAGnBE,MAAAA,KAAK,EAAE;AAHY,MAFjB;AAONS,IAAAA,uBAAuB,EAAE,CAACJ,KAAD,EAAQC,MAAR,qCAClBD,KADkB;AAErBP,MAAAA,OAAO,EAAE;AAFY,OAGlBQ,MAAM,CAACC,OAHW,CAPnB;AAYNG,IAAAA,uBAAuB,EAAE,CAACL,KAAD,EAAQC,MAAR,qCAClBD,KADkB;AAErBP,MAAAA,OAAO,EAAE,KAFY;AAGrBE,MAAAA,KAAK,EAAEM,MAAM,CAACC;AAHO;AAZnB;AAHgB,CAAD,CAA7B;AAuBA,OAAO,MAAMI,IAAI,GAAIN,KAAD,IAAWA,KAAK,CAACM,IAA9B;AAEP,OAAO,MAAM;AAACC,EAAAA;AAAD,IAAeP,KAAD,IAAWA,KAAK,CAACQ,OAArC;AAEP,eAAeZ,SAAS,CAACa,OAAzB","sourcesContent":["import {createAction, createSlice} from '@reduxjs/toolkit'\r\n\r\n\r\nexport type AuthTypes = {\r\n    isFetch: boolean,\r\n    isAuth: boolean,\r\n    error?: any\r\n};\r\n\r\nconst initialState: AuthTypes = {\r\n    isFetch: false,\r\n    isAuth: false,\r\n    error: null\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        setIsAuthAction: (state, action) => state.isAuth = action.payload,\r\n        fetchTokenBeginAction: (state) => ({\r\n            ...state,\r\n            isFetch: true,\r\n            error: null\r\n        }),\r\n        fetchTokenSuccessAction: (state, action) => ({\r\n            ...state,\r\n            isFetch: false,\r\n            ...action.payload\r\n        }),\r\n        fetchTokenFailureAction: (state, action) => ({\r\n            ...state,\r\n            isFetch: false,\r\n            error: action.payload\r\n        })\r\n    }\r\n});\r\n\r\nexport const auth = (state) => state.auth;\r\n\r\nexport const {setIsAuth} = (state) => state.actions;\r\n\r\nexport default authSlice.reducer;"]},"metadata":{},"sourceType":"module"}