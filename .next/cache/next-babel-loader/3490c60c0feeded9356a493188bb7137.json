{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(workerAuth),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAuth),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(workerIsAuth),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchIsAuth);\n\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport Cookies from 'universal-cookie';\nimport { userApi } from '../../api/api';\nimport { FETCH_TOKEN, SET_IS_AUTH, authActions } from \"../actions/authActions\";\nvar cookies = new Cookies();\nvar fetchTokenBegin = authActions.fetchTokenBegin,\n    fetchTokenSuccess = authActions.fetchTokenSuccess,\n    fetchTokenFailure = authActions.fetchTokenFailure,\n    setIsAuth = authActions.setIsAuth; // Login saga\n\nfunction workerAuth(actions) {\n  var payload, _yield$call, token;\n\n  return _regeneratorRuntime.wrap(function workerAuth$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = actions.payload;\n          _context.prev = 1;\n          _context.next = 4;\n          return put(fetchTokenBegin());\n\n        case 4:\n          _context.next = 6;\n          return call(userApi.login, payload.phone, payload.password);\n\n        case 6:\n          _yield$call = _context.sent;\n          token = _yield$call.token;\n          cookies.set('token', token, {\n            maxAge: 2 * 3600\n          });\n          _context.next = 11;\n          return put(fetchTokenSuccess({\n            isAuth: true,\n            isFetch: false\n          }));\n\n        case 11:\n          _context.next = 17;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 17;\n          return put(fetchTokenFailure(_context.t0.message));\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 13]]);\n}\n\nexport function watchAuth() {\n  return _regeneratorRuntime.wrap(function watchAuth$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(FETCH_TOKEN, workerAuth);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // Is user auth saga\n\nfunction workerIsAuth() {\n  var isTokenExst;\n  return _regeneratorRuntime.wrap(function workerIsAuth$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          isTokenExst = !!cookies.get('token');\n          _context3.next = 3;\n          return put(setIsAuth(isTokenExst));\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport function watchIsAuth() {\n  return _regeneratorRuntime.wrap(function watchIsAuth$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(SET_IS_AUTH, workerIsAuth);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/sagas/authSaga.ts"],"names":["workerAuth","watchAuth","workerIsAuth","watchIsAuth","call","put","takeLatest","Cookies","userApi","FETCH_TOKEN","SET_IS_AUTH","authActions","cookies","fetchTokenBegin","fetchTokenSuccess","fetchTokenFailure","setIsAuth","actions","payload","login","phone","password","token","set","maxAge","isAuth","isFetch","message","isTokenExst","get"],"mappings":";;oDAeUA,U;qDAaOC,S;qDAMPC,Y;qDAKOC,W;;AAvCjB,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAAQC,OAAR,QAAsB,eAAtB;AACA,SAAQC,WAAR,EAAqBC,WAArB,EAAkCC,WAAlC,QAAoD,wBAApD;AAEA,IAAMC,OAAO,GAAG,IAAIL,OAAJ,EAAhB;IAGIM,e,GAIAF,W,CAJAE,e;IACAC,iB,GAGAH,W,CAHAG,iB;IACAC,iB,GAEAJ,W,CAFAI,iB;IACAC,S,GACAL,W,CADAK,S,EAGJ;;AACA,SAAUhB,UAAV,CAAqBiB,OAArB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACWC,UAAAA,OADX,GACsBD,OADtB,CACWC,OADX;AAAA;AAAA;AAIQ,iBAAMb,GAAG,CAACQ,eAAe,EAAhB,CAAT;;AAJR;AAAA;AAKwB,iBAAMT,IAAI,CAACI,OAAO,CAACW,KAAT,EAAgBD,OAAO,CAACE,KAAxB,EAA+BF,OAAO,CAACG,QAAvC,CAAV;;AALxB;AAAA;AAKeC,UAAAA,KALf,eAKeA,KALf;AAMQV,UAAAA,OAAO,CAACW,GAAR,CAAY,OAAZ,EAAqBD,KAArB,EAA4B;AAACE,YAAAA,MAAM,EAAE,IAAI;AAAb,WAA5B;AANR;AAOQ,iBAAMnB,GAAG,CAACS,iBAAiB,CAAC;AAACW,YAAAA,MAAM,EAAE,IAAT;AAAeC,YAAAA,OAAO,EAAE;AAAxB,WAAD,CAAlB,CAAT;;AAPR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMrB,GAAG,CAACU,iBAAiB,CAAC,YAAEY,OAAH,CAAlB,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,OAAO,SAAU1B,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMK,UAAU,CAACG,WAAD,EAAcT,UAAd,CAAhB;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAKP;;AACA,SAAUE,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACU0B,UAAAA,WADV,GACwB,CAAC,CAAChB,OAAO,CAACiB,GAAR,CAAY,OAAZ,CAD1B;AAAA;AAEI,iBAAMxB,GAAG,CAACW,SAAS,CAACY,WAAD,CAAV,CAAT;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,OAAO,SAAUzB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMG,UAAU,CAACI,WAAD,EAAcR,YAAd,CAAhB;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {call, put, takeLatest} from \"redux-saga/effects\"\r\nimport Cookies from 'universal-cookie'\r\nimport {userApi} from '../../api/api'\r\nimport {FETCH_TOKEN, SET_IS_AUTH, authActions} from \"../actions/authActions\"\r\n\r\nconst cookies = new Cookies();\r\n\r\nconst {\r\n    fetchTokenBegin,\r\n    fetchTokenSuccess,\r\n    fetchTokenFailure,\r\n    setIsAuth\r\n} = authActions;\r\n\r\n// Login saga\r\nfunction* workerAuth(actions) {\r\n    const {payload} = actions;\r\n\r\n    try {\r\n        yield put(fetchTokenBegin());\r\n        const {token} = yield call(userApi.login, payload.phone, payload.password);\r\n        cookies.set('token', token, {maxAge: 2 * 3600});\r\n        yield put(fetchTokenSuccess({isAuth: true, isFetch: false}));\r\n    } catch (e) {\r\n        yield put(fetchTokenFailure(e.message));\r\n    }\r\n}\r\n\r\nexport function* watchAuth() {\r\n    yield takeLatest(FETCH_TOKEN, workerAuth);\r\n}\r\n\r\n\r\n// Is user auth saga\r\nfunction* workerIsAuth() {\r\n    const isTokenExst = !!cookies.get('token');\r\n    yield put(setIsAuth(isTokenExst));\r\n}\r\n\r\nexport function* watchIsAuth() {\r\n    yield takeLatest(SET_IS_AUTH, workerIsAuth);\r\n}"]},"metadata":{},"sourceType":"module"}