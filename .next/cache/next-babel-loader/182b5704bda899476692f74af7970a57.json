{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { useStyles } from './useStyles';\nexport const AdvrtSettingsBlock = props => {\n  const {\n    isPreview,\n    createAdvrt,\n    adsParams,\n    onBlur,\n    handleMenuItem,\n    handleListItem\n  } = props;\n  const data = createAdvrt.data;\n  const classes = useStyles();\n  return __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    className: classes.root\n  }, Object.keys(data).map(key => {\n    return __jsx(React.Fragment, null, listGenerator(data[key], key), adsParams[key] && Object.keys(adsParams[key]).map(innerKey => {\n      if (Array.isArray(adsParams[key][innerKey]) && adsParams[key][innerKey].length) {\n        return listGenerator(adsParams[key][innerKey], innerKey);\n      }\n    }));\n  }));\n\n  function listGenerator(data, key) {\n    let field;\n\n    if (key !== 'adsParams' && key !== 'address') {\n      if (Array.isArray(data) && data.length) {\n        if (key === 'body' || key === 'colors') {\n          field = data.map(item => __jsx(\"div\", {\n            key: item.id,\n            onClick: handleListItem(key, item)\n          }, key === 'body' ? __jsx(React.Fragment, null, __jsx(\"img\", {\n            src: item.icon.url,\n            alt: item.name\n          }), __jsx(Typography, null, item.name)) : __jsx(\"div\", {\n            style: {\n              width: '50px',\n              height: '50px',\n              backgroundColor: `${item.hex_color_code}`\n            }\n          })));\n        } else if (isPreview && adsParams[key]) {// field = (\n          //     Object.keys(adsParams[key]).map(k => (\n          //         <Typography key={adsParams[k].id}>\n          //             {adsParams[k].name}\n          //         </Typography>\n          //     ))\n          // );\n        } else {\n          data = [{\n            id: null,\n            name: 'Не выбрано'\n          }, ...data];\n          field = __jsx(CustomMenu, {\n            valueName: adsParams[key] ? adsParams[key].name : data[0].name,\n            items: data,\n            onBlur: onBlur,\n            onClick: handleMenuItem(key)\n          });\n        }\n\n        return __jsx(Grid, {\n          item: true,\n          container: true,\n          key: key,\n          xs: 12,\n          sm: key === 'body' || key === 'colors' ? 12 : 6\n        }, __jsx(Typography, {\n          style: {\n            width: '100%'\n          },\n          variant: \"subtitle1\"\n        }, __jsx(\"strong\", null, key)), field);\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_settings_block/AdvrtSettingsBlock.tsx"],"names":["React","Grid","Typography","CustomMenu","useStyles","AdvrtSettingsBlock","props","isPreview","createAdvrt","adsParams","onBlur","handleMenuItem","handleListItem","data","classes","root","Object","keys","map","key","listGenerator","innerKey","Array","isArray","length","field","item","id","icon","url","name","width","height","backgroundColor","hex_color_code"],"mappings":"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","sourcesContent":["import React, {FC} from \"react\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {ItemsType} from \"@root/interfaces/CustomMenuProps\";\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const AdvrtSettingsBlock: FC<any> = (props) => {\r\n    const {\r\n        isPreview,\r\n        createAdvrt,\r\n        adsParams,\r\n        onBlur,\r\n        handleMenuItem,\r\n        handleListItem\r\n    } = props;\r\n\r\n    const data = createAdvrt.data;\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={1}\r\n            className={classes.root}\r\n        >\r\n            {\r\n                Object.keys(data).map(key => {\r\n                    return (\r\n                        <>\r\n                            {listGenerator(data[key], key)}\r\n                            {\r\n                                adsParams[key] && Object.keys(adsParams[key]).map(innerKey => {\r\n                                    if (Array.isArray(adsParams[key][innerKey]) && adsParams[key][innerKey].length) {\r\n                                        return listGenerator(adsParams[key][innerKey], innerKey)\r\n                                    }\r\n                                })\r\n                            }\r\n                        </>\r\n                    );\r\n                })\r\n            }\r\n        </Grid>\r\n    )\r\n\r\n    function listGenerator(data: ItemsType, key: string) {\r\n        let field;\r\n\r\n        if (key !== 'adsParams' && key !== 'address') {\r\n            if (Array.isArray(data) && data.length) {\r\n                if (key === 'body' || key === 'colors') {\r\n                    field = data.map(item => (\r\n                        <div\r\n                            key={item.id}\r\n                            onClick={handleListItem(key, item)}\r\n                        >\r\n                            {\r\n                                key === 'body'\r\n                                    ? (\r\n                                        <>\r\n                                            <img src={item.icon.url} alt={item.name}/>\r\n                                            <Typography>{item.name}</Typography>\r\n                                        </>\r\n                                    )\r\n                                    : (\r\n                                        <div\r\n                                            style={{\r\n                                                width: '50px',\r\n                                                height: '50px',\r\n                                                backgroundColor: `${item.hex_color_code}`\r\n                                            }}\r\n                                        />\r\n                                    )\r\n                            }\r\n                        </div>\r\n                    ));\r\n                } else if (isPreview && adsParams[key]) {\r\n                    // field = (\r\n                    //     Object.keys(adsParams[key]).map(k => (\r\n                    //         <Typography key={adsParams[k].id}>\r\n                    //             {adsParams[k].name}\r\n                    //         </Typography>\r\n                    //     ))\r\n                    // );\r\n                } else {\r\n                    data = [{id: null, name: 'Не выбрано'}, ...data];\r\n\r\n                    field = (\r\n                        <CustomMenu\r\n                            valueName={adsParams[key] ? adsParams[key].name : data[0].name}\r\n                            items={data}\r\n                            onBlur={onBlur}\r\n                            onClick={handleMenuItem(key)}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <Grid\r\n                        item\r\n                        container\r\n                        key={key}\r\n                        xs={12}\r\n                        sm={key === 'body' || key === 'colors' ? 12 : 6}\r\n                    >\r\n                        <Typography style={{width: '100%'}} variant=\"subtitle1\">\r\n                            <strong>{key}</strong>\r\n                        </Typography>\r\n                        {field}\r\n                    </Grid>\r\n                )\r\n            }\r\n        }\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}