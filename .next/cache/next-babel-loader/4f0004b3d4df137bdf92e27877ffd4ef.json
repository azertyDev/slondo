{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useRef, useState, useEffect } from 'react';\nimport { CustomSlider } from '../custom_slider/CustomSlider';\nimport { useStyles } from './useStyles';\nexport const SyncSliders = props => {\n  const {\n    isModalOpen = false,\n    imgs\n  } = props;\n  const {\n    0: slidersNav,\n    1: setSlidersNav\n  } = useState({\n    nav1: null,\n    nav2: null\n  });\n  const slider1 = useRef();\n  const slider2 = useRef();\n\n  const handleAfterChange = newIndex => {\n    props.setCurrentSlide(newIndex);\n  };\n\n  useEffect(() => {\n    setSlidersNav({\n      nav1: slider1.current,\n      nav2: slider2.current\n    });\n  }, []);\n  const classes = useStyles(isModalOpen);\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", {\n    className: classes.firstSlider\n  }, __jsx(CustomSlider, {\n    ref: slider1,\n    centerMode: isModalOpen || imgs.length < 2,\n    asNavFor: slidersNav.nav2,\n    variableWidth: !isModalOpen,\n    afterChange: handleAfterChange,\n    initialSlide: props.currentSlide\n  }, imgs.map(({\n    url,\n    alt\n  }, i) => __jsx(\"img\", {\n    key: i,\n    alt: alt,\n    src: url.default,\n    onClick: props.handleOpenModal\n  })))), __jsx(\"div\", {\n    className: classes.secondSlider\n  }, __jsx(CustomSlider, {\n    ref: slider2,\n    slidesToShow: 4,\n    slidesToScroll: 1,\n    arrows: false,\n    infinite: true,\n    focusOnSelect: true,\n    asNavFor: slidersNav.nav1,\n    afterChange: handleAfterChange\n  }, imgs.map(({\n    url,\n    alt\n  }, i) => __jsx(\"img\", {\n    key: i,\n    alt: alt,\n    src: url.default\n  })))));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/sync_sliders/SyncSliders.tsx"],"names":["React","useRef","useState","useEffect","CustomSlider","useStyles","SyncSliders","props","isModalOpen","imgs","slidersNav","setSlidersNav","nav1","nav2","slider1","slider2","handleAfterChange","newIndex","setCurrentSlide","current","classes","root","firstSlider","length","currentSlide","map","url","alt","i","default","handleOpenModal","secondSlider"],"mappings":";AAAA,OAAOA,KAAP,IAKIC,MALJ,EAMIC,QANJ,EAOIC,SAPJ,QAQO,OARP;AASA,SAAQC,YAAR,QAA2B,+BAA3B;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAcA,OAAO,MAAMC,WAAiC,GAAIC,KAAD,IAAW;AACxD,QAAM;AAACC,IAAAA,WAAW,GAAG,KAAf;AAAsBC,IAAAA;AAAtB,MAA8BF,KAApC;AAEA,QAAM;AAAA,OAACG,UAAD;AAAA,OAAaC;AAAb,MAA8BT,QAAQ,CAAC;AAACU,IAAAA,IAAI,EAAE,IAAP;AAAaC,IAAAA,IAAI,EAAE;AAAnB,GAAD,CAA5C;AACA,QAAMC,OAAkC,GAAGb,MAAM,EAAjD;AACA,QAAMc,OAAkC,GAAGd,MAAM,EAAjD;;AAEA,QAAMe,iBAAiB,GAAIC,QAAD,IAAc;AACpCV,IAAAA,KAAK,CAACW,eAAN,CAAsBD,QAAtB;AACH,GAFD;;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,aAAa,CAAC;AACVC,MAAAA,IAAI,EAAEE,OAAO,CAACK,OADJ;AAEVN,MAAAA,IAAI,EAAEE,OAAO,CAACI;AAFJ,KAAD,CAAb;AAIH,GALQ,EAKN,EALM,CAAT;AAOA,QAAMC,OAAO,GAAGf,SAAS,CAACG,WAAD,CAAzB;AACA,SACI;AAAK,IAAA,SAAS,EAAEY,OAAO,CAACC;AAAxB,KACI;AAAK,IAAA,SAAS,EAAED,OAAO,CAACE;AAAxB,KACI,MAAC,YAAD;AACI,IAAA,GAAG,EAAER,OADT;AAEI,IAAA,UAAU,EAAEN,WAAW,IAAIC,IAAI,CAACc,MAAL,GAAc,CAF7C;AAGI,IAAA,QAAQ,EAAEb,UAAU,CAACG,IAHzB;AAII,IAAA,aAAa,EAAE,CAACL,WAJpB;AAKI,IAAA,WAAW,EAAEQ,iBALjB;AAMI,IAAA,YAAY,EAAET,KAAK,CAACiB;AANxB,KASQf,IAAI,CAACgB,GAAL,CAAS,CAAC;AAACC,IAAAA,GAAD;AAAMC,IAAAA;AAAN,GAAD,EAAaC,CAAb,KACL;AACI,IAAA,GAAG,EAAEA,CADT;AAEI,IAAA,GAAG,EAAED,GAFT;AAGI,IAAA,GAAG,EAAED,GAAG,CAACG,OAHb;AAII,IAAA,OAAO,EAAEtB,KAAK,CAACuB;AAJnB,IADJ,CATR,CADJ,CADJ,EAsBI;AAAK,IAAA,SAAS,EAAEV,OAAO,CAACW;AAAxB,KACI,MAAC,YAAD;AACI,IAAA,GAAG,EAAEhB,OADT;AAEI,IAAA,YAAY,EAAE,CAFlB;AAGI,IAAA,cAAc,EAAE,CAHpB;AAII,IAAA,MAAM,EAAE,KAJZ;AAKI,IAAA,QAAQ,EAAE,IALd;AAMI,IAAA,aAAa,EAAE,IANnB;AAOI,IAAA,QAAQ,EAAEL,UAAU,CAACE,IAPzB;AAQI,IAAA,WAAW,EAAEI;AARjB,KAWQP,IAAI,CAACgB,GAAL,CAAS,CAAC;AAACC,IAAAA,GAAD;AAAMC,IAAAA;AAAN,GAAD,EAAaC,CAAb,KACL;AACI,IAAA,GAAG,EAAEA,CADT;AAEI,IAAA,GAAG,EAAED,GAFT;AAGI,IAAA,GAAG,EAAED,GAAG,CAACG;AAHb,IADJ,CAXR,CADJ,CAtBJ,CADJ;AA+CH,CAlEM","sourcesContent":["import React, {\r\n    FC,\r\n    Dispatch,\r\n    SetStateAction,\r\n    MutableRefObject,\r\n    useRef,\r\n    useState,\r\n    useEffect,\r\n} from 'react';\r\nimport {CustomSlider} from '../custom_slider/CustomSlider';\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\ntype SyncSlidersProps = {\r\n    isModalOpen?: boolean;\r\n    currentSlide: number;\r\n    handleOpenModal?: () => void;\r\n    setCurrentSlide: Dispatch<SetStateAction<number>>;\r\n    imgs: {\r\n        alt: string;\r\n        url: { default: string }\r\n    }[];\r\n};\r\n\r\nexport const SyncSliders: FC<SyncSlidersProps> = (props) => {\r\n    const {isModalOpen = false, imgs} = props;\r\n\r\n    const [slidersNav, setSlidersNav] = useState({nav1: null, nav2: null});\r\n    const slider1: MutableRefObject<unknown> = useRef();\r\n    const slider2: MutableRefObject<unknown> = useRef();\r\n\r\n    const handleAfterChange = (newIndex) => {\r\n        props.setCurrentSlide(newIndex);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setSlidersNav({\r\n            nav1: slider1.current,\r\n            nav2: slider2.current,\r\n        });\r\n    }, []);\r\n\r\n    const classes = useStyles(isModalOpen);\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.firstSlider}>\r\n                <CustomSlider\r\n                    ref={slider1}\r\n                    centerMode={isModalOpen || imgs.length < 2}\r\n                    asNavFor={slidersNav.nav2}\r\n                    variableWidth={!isModalOpen}\r\n                    afterChange={handleAfterChange}\r\n                    initialSlide={props.currentSlide}\r\n                >\r\n                    {\r\n                        imgs.map(({url, alt}, i) => (\r\n                            <img\r\n                                key={i}\r\n                                alt={alt}\r\n                                src={url.default}\r\n                                onClick={props.handleOpenModal}\r\n                            />\r\n                        ))\r\n                    }\r\n                </CustomSlider>\r\n            </div>\r\n            <div className={classes.secondSlider}>\r\n                <CustomSlider\r\n                    ref={slider2}\r\n                    slidesToShow={4}\r\n                    slidesToScroll={1}\r\n                    arrows={false}\r\n                    infinite={true}\r\n                    focusOnSelect={true}\r\n                    asNavFor={slidersNav.nav1}\r\n                    afterChange={handleAfterChange}\r\n                >\r\n                    {\r\n                        imgs.map(({url, alt}, i) => (\r\n                            <img\r\n                                key={i}\r\n                                alt={alt}\r\n                                src={url.default}\r\n                            />\r\n                        ))\r\n                    }\r\n                </CustomSlider>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}