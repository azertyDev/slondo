{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _extraReducers;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from '@src/api/api';\nvar fetchToken = createAsyncThunk('auth/fetchByIdStatus', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(phone, password) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return userAPI.login(phone, password);\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nvar initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null\n};\nvar authSlice = createSlice({\n  name: 'auth',\n  initialState: initialState,\n  extraReducers: (_extraReducers = {}, _defineProperty(_extraReducers, setIsAuthAction, function (state, action) {\n    return state.isAuth = action.payload;\n  }), _defineProperty(_extraReducers, \"fetchTokenBeginAction\", function fetchTokenBeginAction(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      isFetch: true,\n      error: null\n    });\n  }), _defineProperty(_extraReducers, \"fetchTokenSuccessAction\", function fetchTokenSuccessAction(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      isFetch: false\n    }, action.payload);\n  }), _defineProperty(_extraReducers, \"fetchTokenFailureAction\", function fetchTokenFailureAction(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      isFetch: false,\n      error: action.payload\n    });\n  }), _extraReducers)\n});\nexport var auth = function auth(state) {\n  return state.auth;\n};\nvar setIsAuthAction = authSlice.actions.setIsAuthAction;\nexport { setIsAuthAction };\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/authReducer.ts"],"names":["createAsyncThunk","createSlice","userAPI","fetchToken","phone","password","login","response","data","initialState","isFetch","isAuth","error","authSlice","name","extraReducers","setIsAuthAction","state","action","payload","auth","actions","reducer"],"mappings":";;;;;;;;;;AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAAQC,OAAR,QAAsB,cAAtB;AAGA,IAAMC,UAAU,GAAGH,gBAAgB,CAC/B,sBAD+B;AAAA,sEAE/B,iBAAOI,KAAP,EAAcC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC2BH,OAAO,CAACI,KAAR,CAAcF,KAAd,EAAqBC,QAArB,CAD3B;;AAAA;AACUE,YAAAA,QADV;AAAA,6CAEWA,QAAQ,CAACC,IAFpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAF+B;;AAAA;AAAA;AAAA;AAAA,IAAnC;AAcA,IAAMC,YAAuB,GAAG;AAC5BC,EAAAA,OAAO,EAAE,KADmB;AAE5BC,EAAAA,MAAM,EAAE,KAFoB;AAG5BC,EAAAA,KAAK,EAAE;AAHqB,CAAhC;AAMA,IAAMC,SAAS,GAAGZ,WAAW,CAAC;AAC1Ba,EAAAA,IAAI,EAAE,MADoB;AAE1BL,EAAAA,YAAY,EAAZA,YAF0B;AAG1BM,EAAAA,aAAa,wDACRC,eADQ,EACU,UAACC,KAAD,EAAQC,MAAR;AAAA,WAAmBD,KAAK,CAACN,MAAN,GAAeO,MAAM,CAACC,OAAzC;AAAA,GADV,4DAEc,+BAACF,KAAD;AAAA,2CAChBA,KADgB;AAEnBP,MAAAA,OAAO,EAAE,IAFU;AAGnBE,MAAAA,KAAK,EAAE;AAHY;AAAA,GAFd,8DAOgB,iCAACK,KAAD,EAAQC,MAAR;AAAA,2CAClBD,KADkB;AAErBP,MAAAA,OAAO,EAAE;AAFY,OAGlBQ,MAAM,CAACC,OAHW;AAAA,GAPhB,8DAYgB,iCAACF,KAAD,EAAQC,MAAR;AAAA,2CAClBD,KADkB;AAErBP,MAAAA,OAAO,EAAE,KAFY;AAGrBE,MAAAA,KAAK,EAAEM,MAAM,CAACC;AAHO;AAAA,GAZhB;AAHa,CAAD,CAA7B;AAuBA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACH,KAAD;AAAA,SAAWA,KAAK,CAACG,IAAjB;AAAA,CAAb;IAEOJ,e,GAAmBH,SAAS,CAACQ,O,CAA7BL,e;;AAEd,eAAeH,SAAS,CAACS,OAAzB","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {userAPI} from '@src/api/api'\r\n\r\n\r\nconst fetchToken = createAsyncThunk(\r\n    'auth/fetchByIdStatus',\r\n    async (phone, password) => {\r\n        const response = await userAPI.login(phone, password)\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport type AuthTypes = {\r\n    isFetch: boolean,\r\n    isAuth: boolean,\r\n    error?: any\r\n};\r\n\r\nconst initialState: AuthTypes = {\r\n    isFetch: false,\r\n    isAuth: false,\r\n    error: null\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    extraReducers: {\r\n        [setIsAuthAction]: (state, action) => state.isAuth = action.payload,\r\n        fetchTokenBeginAction: (state) => ({\r\n            ...state,\r\n            isFetch: true,\r\n            error: null\r\n        }),\r\n        fetchTokenSuccessAction: (state, action) => ({\r\n            ...state,\r\n            isFetch: false,\r\n            ...action.payload\r\n        }),\r\n        fetchTokenFailureAction: (state, action) => ({\r\n            ...state,\r\n            isFetch: false,\r\n            error: action.payload\r\n        })\r\n    }\r\n});\r\n\r\nexport const auth = (state) => state.auth;\r\n\r\nexport const {setIsAuthAction} = authSlice.actions;\r\n\r\nexport default authSlice.reducer;"]},"metadata":{},"sourceType":"module"}