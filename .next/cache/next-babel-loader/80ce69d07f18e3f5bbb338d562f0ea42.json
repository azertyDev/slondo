{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { useStyles } from './useStyles';\nimport { CustomCheckbox } from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\nimport { CustomFormikField } from \"@src/components/elements/custom_formik_field/CustomFormikField\";\nexport const AdvrtSettingsBlock = props => {\n  const {\n    isPreview,\n    createAdvrt,\n    values,\n    onBlur,\n    handleMenuItem,\n    handleListItem,\n    handleParamsCheckbox\n  } = props;\n  const data = isPreview ? values : createAdvrt.data;\n  const classes = useStyles({\n    isPreview\n  });\n  return __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    className: classes.root\n  }, Object.keys(data).map(key => {\n    if (!isPreview && values[key]) {\n      return __jsx(React.Fragment, null, listGenerator(data[key], key), key === 'body' && __jsx(React.Fragment, null, __jsx(Grid, {\n        item: true,\n        container: true,\n        key: key,\n        xs: 12,\n        className: classes.gridItem\n      }, __jsx(Typography, {\n        variant: \"subtitle1\"\n      }, \"year\"), isPreview ? __jsx(Typography, null, values.year) : __jsx(CustomFormikField, {\n        name: \"year\",\n        placeholder: \"\\u0413\\u043E\\u0434 \\u0432\\u044B\\u043F\\u0443\\u0441\\u043A\\u0430\",\n        value: values.year\n      })), __jsx(Grid, {\n        item: true,\n        container: true,\n        key: key,\n        xs: 12,\n        className: classes.gridItem\n      }, __jsx(Typography, {\n        variant: \"subtitle1\"\n      }, key), isPreview ? __jsx(Typography, null, values.condition) : __jsx(CustomMenu, {\n        valueName: values[key] ? values[key].name : data[0].name,\n        items: data,\n        onBlur: onBlur,\n        onClick: handleMenuItem(key)\n      }))), Object.keys(values[key]).map(innerKey => {\n        if (Array.isArray(values[key][innerKey]) && values[key][innerKey].length) {\n          return listGenerator(values[key][innerKey], innerKey);\n        }\n      }));\n    } else return listGenerator(data[key], key);\n  }));\n\n  function listGenerator(data, key) {\n    let fields;\n    const isExcludedRows = key !== 'id' && key !== 'name' && key !== 'title' && key !== 'adsParams' && key !== 'adType' && key !== 'price' && key !== 'safe_deal' && key !== 'exchange' && key !== 'delivery' && key !== 'location' && key !== 'currency' && key !== 'phone' && key !== 'description' && key !== 'files';\n    const isOptions = key === 'safety' || key === 'multimedia' || key === 'assistant' || key === 'exterior';\n    const isSpecialRows = key === 'body' || key === 'colors' || isOptions;\n\n    if (isExcludedRows && data) {\n      if (isSpecialRows && Array.isArray(data) && data.length) {\n        fields = __jsx(\"div\", {\n          className: \"colors-list\"\n        }, data.map(item => __jsx(\"div\", {\n          key: item.id,\n          onClick: !isPreview ? handleListItem(key, item) : null\n        }, key === 'body' ? __jsx(\"div\", {\n          className: values[key] && values[key].id === item.id ? classes.selected : ''\n        }, __jsx(\"img\", {\n          src: item.icon.url,\n          alt: item.name\n        }), __jsx(Typography, null, item.name)) : key === 'colors' ? __jsx(\"div\", {\n          className: values[key] && values[key].id === item.id ? classes.selected : '',\n          style: {\n            width: '50px',\n            height: '50px',\n            backgroundColor: `${item.hex_color_code}`\n          }\n        }) : __jsx(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center'\n          }\n        }, __jsx(CustomCheckbox, {\n          disabled: isPreview,\n          checked: values[key] && values[key].some(val => val.id === item.id),\n          onChange: handleParamsCheckbox(key, {\n            id: item.id,\n            name: item.name\n          })\n        }), __jsx(Typography, null, item.name)))));\n      } else {\n        if (Array.isArray(data)) {\n          data = [{\n            id: null,\n            name: 'Не выбрано'\n          }, ...data];\n          fields = __jsx(CustomMenu, {\n            valueName: values[key] ? values[key].name : data[0].name,\n            items: data,\n            onBlur: onBlur,\n            onClick: handleMenuItem(key)\n          });\n        } else {\n          fields = key === 'body' ? __jsx(Typography, null, data.name) : key === 'colors' ? __jsx(\"div\", {\n            style: {\n              width: '50px',\n              height: '50px',\n              backgroundColor: `${data.hex_color_code}`\n            }\n          }) : __jsx(Typography, null, data.name);\n        }\n      }\n\n      return __jsx(Grid, {\n        item: true,\n        container: true,\n        key: key,\n        xs: 12,\n        className: classes.gridItem,\n        sm: isSpecialRows && !isPreview || isOptions ? 12 : 6\n      }, __jsx(Typography, {\n        variant: \"subtitle1\"\n      }, key), fields);\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_settings_block/AdvrtSettingsBlock.tsx"],"names":["React","Grid","Typography","CustomMenu","useStyles","CustomCheckbox","CustomFormikField","AdvrtSettingsBlock","props","isPreview","createAdvrt","values","onBlur","handleMenuItem","handleListItem","handleParamsCheckbox","data","classes","root","Object","keys","map","key","listGenerator","gridItem","year","condition","name","innerKey","Array","isArray","length","fields","isExcludedRows","isOptions","isSpecialRows","item","id","selected","icon","url","width","height","backgroundColor","hex_color_code","display","alignItems","some","val"],"mappings":"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","sourcesContent":["import React, {FC} from \"react\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {ItemsType} from \"@root/interfaces/CustomMenuProps\";\r\nimport {useStyles} from './useStyles';\r\nimport {CustomCheckbox} from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\r\nimport {CustomFormikField} from \"@src/components/elements/custom_formik_field/CustomFormikField\";\r\n\r\n\r\nexport const AdvrtSettingsBlock: FC<any> = (props) => {\r\n    const {\r\n        isPreview,\r\n        createAdvrt,\r\n        values,\r\n        onBlur,\r\n        handleMenuItem,\r\n        handleListItem,\r\n        handleParamsCheckbox\r\n    } = props;\r\n\r\n    const data = isPreview ? values : createAdvrt.data;\r\n\r\n    const classes = useStyles({isPreview});\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={1}\r\n            className={classes.root}\r\n        >\r\n            {\r\n                Object.keys(data).map(key => {\r\n                    if (!isPreview && values[key]) {\r\n                        return (\r\n                            <>\r\n                                {listGenerator(data[key], key)}\r\n                                {\r\n                                    key === 'body' && (\r\n                                        <>\r\n                                            <Grid\r\n                                                item\r\n                                                container\r\n                                                key={key}\r\n                                                xs={12}\r\n                                                className={classes.gridItem}\r\n                                            >\r\n                                                <Typography variant=\"subtitle1\">year</Typography>\r\n                                                {\r\n                                                    isPreview\r\n                                                        ? <Typography>{values.year}</Typography>\r\n                                                        : <CustomFormikField\r\n                                                            name='year'\r\n                                                            placeholder='Год выпуска'\r\n                                                            value={values.year}\r\n                                                        />\r\n                                                }\r\n                                            </Grid>\r\n                                            <Grid\r\n                                                item\r\n                                                container\r\n                                                key={key}\r\n                                                xs={12}\r\n                                                className={classes.gridItem}\r\n                                            >\r\n                                                <Typography variant=\"subtitle1\">{key}</Typography>\r\n                                                {\r\n                                                    isPreview\r\n                                                        ? <Typography>{values.condition}</Typography>\r\n                                                        : <CustomMenu\r\n                                                            valueName={values[key] ? values[key].name : data[0].name}\r\n                                                            items={data}\r\n                                                            onBlur={onBlur}\r\n                                                            onClick={handleMenuItem(key)}\r\n                                                        />\r\n                                                }\r\n                                            </Grid>\r\n                                        </>\r\n                                    )\r\n                                }\r\n                                {\r\n                                    Object.keys(values[key]).map(innerKey => {\r\n                                        if (Array.isArray(values[key][innerKey]) && values[key][innerKey].length) {\r\n                                            return listGenerator(values[key][innerKey], innerKey)\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </>\r\n                        )\r\n                    } else return listGenerator(data[key], key);\r\n                })\r\n            }\r\n        </Grid>\r\n    )\r\n\r\n    function listGenerator(data: ItemsType | ItemsType[], key: string) {\r\n        let fields;\r\n\r\n        const isExcludedRows = key !== 'id'\r\n            && key !== 'name'\r\n            && key !== 'title'\r\n            && key !== 'adsParams'\r\n            && key !== 'adType'\r\n            && key !== 'price'\r\n            && key !== 'safe_deal'\r\n            && key !== 'exchange'\r\n            && key !== 'delivery'\r\n            && key !== 'location'\r\n            && key !== 'currency'\r\n            && key !== 'phone'\r\n            && key !== 'description'\r\n            && key !== 'files';\r\n\r\n        const isOptions = key === 'safety'\r\n            || key === 'multimedia'\r\n            || key === 'assistant'\r\n            || key === 'exterior';\r\n\r\n        const isSpecialRows = key === 'body'\r\n            || key === 'colors'\r\n            || isOptions;\r\n\r\n        if (isExcludedRows && data) {\r\n            if (isSpecialRows && Array.isArray(data) && data.length) {\r\n                fields = <div className='colors-list'>\r\n                    {\r\n                        data.map(item => (\r\n                            <div\r\n                                key={item.id}\r\n                                onClick={!isPreview ? handleListItem(key, item) : null}\r\n                            >\r\n                                {\r\n                                    key === 'body'\r\n                                        ? (\r\n                                            <div\r\n                                                className={values[key] && values[key].id === item.id ? classes.selected : ''}\r\n                                            >\r\n                                                <img src={item.icon.url} alt={item.name}/>\r\n                                                <Typography>{item.name}</Typography>\r\n                                            </div>\r\n                                        )\r\n                                        : key === 'colors'\r\n                                        ? (\r\n                                            <div\r\n                                                className={values[key] && values[key].id === item.id ? classes.selected : ''}\r\n                                                style={{\r\n                                                    width: '50px',\r\n                                                    height: '50px',\r\n                                                    backgroundColor: `${item.hex_color_code}`,\r\n                                                }}\r\n                                            />\r\n                                        )\r\n                                        : (\r\n                                            <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                <CustomCheckbox\r\n                                                    disabled={isPreview}\r\n                                                    checked={\r\n                                                        values[key]\r\n                                                        && values[key].some(val => val.id === item.id)\r\n                                                    }\r\n                                                    onChange={\r\n                                                        handleParamsCheckbox(key, {id: item.id, name: item.name})\r\n                                                    }\r\n                                                />\r\n                                                <Typography>{item.name}</Typography>\r\n                                            </div>\r\n                                        )\r\n                                }\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            } else {\r\n                if (Array.isArray(data)) {\r\n                    data = [{id: null, name: 'Не выбрано'}, ...data];\r\n                    fields = <CustomMenu\r\n                        valueName={values[key] ? values[key].name : data[0].name}\r\n                        items={data}\r\n                        onBlur={onBlur}\r\n                        onClick={handleMenuItem(key)}\r\n                    />;\r\n                } else {\r\n                    fields = key === 'body'\r\n                        ? <Typography>{data.name}</Typography>\r\n                        : key === 'colors'\r\n                            ? <div\r\n                                style={{\r\n                                    width: '50px',\r\n                                    height: '50px',\r\n                                    backgroundColor: `${data.hex_color_code}`\r\n                                }}\r\n                            />\r\n                            : <Typography>{data.name}</Typography>\r\n                }\r\n            }\r\n            return (\r\n                <Grid\r\n                    item\r\n                    container\r\n                    key={key}\r\n                    xs={12}\r\n                    className={classes.gridItem}\r\n                    sm={isSpecialRows && !isPreview || isOptions ? 12 : 6}\r\n                >\r\n                    <Typography variant=\"subtitle1\">{key}</Typography>\r\n                    {fields}\r\n                </Grid>\r\n            )\r\n        }\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}