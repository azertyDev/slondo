{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { TOTAL_FILES_LIMIT, TOTAL_FILES_SIZE_LIMIT } from '@root/src/constants';\nimport React from 'react';\nimport { DragDropContext, Droppable, Draggable, resetServerContext } from 'react-beautiful-dnd';\nimport { ButtonComponent } from \"@src/components/elements/button/Button\";\nimport { Grid } from \"@material-ui/core\";\nimport { useStyles } from './useStyles';\nexport const PreviewPhotos = props => {\n  resetServerContext();\n  const {\n    values,\n    setValues,\n    isPreview\n  } = props;\n  const {\n    files\n  } = values;\n\n  const handleOnDragEnd = result => {\n    if (!result.destination) return;\n    const items = Array.from(files);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      files: items\n    }));\n  };\n\n  const handleUploadFile = ({\n    target\n  }) => {\n    let photos = Array.from(target.files);\n\n    if (photos.length + files.length <= TOTAL_FILES_LIMIT) {\n      const totalSize = files.reduce((total, item) => total + item.file.size, 0);\n      console.log(photos);\n\n      if (totalSize + photos[0].size < TOTAL_FILES_SIZE_LIMIT) {\n        photos = photos.map(file => ({\n          file,\n          url: URL.createObjectURL(file)\n        }));\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          files: [...photos, ...files]\n        }));\n      }\n    }\n  };\n\n  const removeFile = url => () => {\n    files.map((item, index) => {\n      if (item.url === url) {\n        files.splice(index, 1);\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          files\n        }));\n      }\n    });\n  };\n\n  console.log(files);\n  const classes = useStyles();\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    disabled: isPreview,\n    onChange: handleUploadFile,\n    multiple: true,\n    accept: \"image/png,image/jpeg\"\n  }), __jsx(DragDropContext, {\n    onDragEnd: handleOnDragEnd\n  }, __jsx(Droppable, {\n    droppableId: \"images\",\n    direction: \"horizontal\"\n  }, provided => __jsx(Grid, _extends({\n    container: true,\n    className: \"images-wrapper\"\n  }, provided.droppableProps, {\n    ref: provided.innerRef\n  }), files.map(({\n    url,\n    file\n  }, index) => {\n    if (index <= 4) {\n      return __jsx(Draggable, {\n        isDragDisabled: isPreview,\n        key: url,\n        draggableId: url,\n        index: index\n      }, provided => __jsx(Grid, _extends({\n        item: true,\n        xs: 4,\n        md: 3,\n        ref: provided.innerRef\n      }, provided.draggableProps, provided.dragHandleProps), __jsx(\"img\", {\n        src: url,\n        style: {\n          width: '160px',\n          height: '120px',\n          objectFit: 'cover'\n        },\n        alt: file.name\n      }), __jsx(ButtonComponent, {\n        disabled: isPreview,\n        onClick: removeFile(url)\n      }, \"X\")));\n    }\n  }), provided.placeholder)), __jsx(Droppable, {\n    droppableId: \"images\",\n    direction: \"horizontal\"\n  }, provided => __jsx(Grid, _extends({\n    container: true,\n    className: \"images-wrapper\"\n  }, provided.droppableProps, {\n    ref: provided.innerRef\n  }), files.map(({\n    url,\n    file\n  }, index) => {\n    if (index > 4) {\n      return __jsx(Draggable, {\n        isDragDisabled: isPreview,\n        key: url,\n        draggableId: url,\n        index: index\n      }, provided => __jsx(Grid, _extends({\n        item: true,\n        xs: 4,\n        md: 3,\n        ref: provided.innerRef\n      }, provided.draggableProps, provided.dragHandleProps), __jsx(\"img\", {\n        src: url,\n        style: {\n          width: '160px',\n          height: '120px',\n          objectFit: 'cover'\n        },\n        alt: file.name\n      }), __jsx(ButtonComponent, {\n        disabled: isPreview,\n        onClick: removeFile(url)\n      }, \"X\")));\n    }\n  }), provided.placeholder))));\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/preview_photos/PreviewPhotos.tsx"],"names":["TOTAL_FILES_LIMIT","TOTAL_FILES_SIZE_LIMIT","React","DragDropContext","Droppable","Draggable","resetServerContext","ButtonComponent","Grid","useStyles","PreviewPhotos","props","values","setValues","isPreview","files","handleOnDragEnd","result","destination","items","Array","from","reorderedItem","splice","source","index","handleUploadFile","target","photos","length","totalSize","reduce","total","item","file","size","console","log","map","url","URL","createObjectURL","removeFile","classes","provided","droppableProps","innerRef","draggableProps","dragHandleProps","width","height","objectFit","name","placeholder"],"mappings":";;;;;;;;;;AAAA,SAAQA,iBAAR,EAA2BC,sBAA3B,QAAwD,qBAAxD;AACA,OAAOC,KAAP,MAAkC,OAAlC;AACA,SAAQC,eAAR,EAAyBC,SAAzB,EAAoCC,SAApC,EAA+CC,kBAA/C,QAAwE,qBAAxE;AACA,SAAQC,eAAR,QAA8B,wCAA9B;AACA,SAAQC,IAAR,QAAmB,mBAAnB;AAEA,SAAQC,SAAR,QAAwB,aAAxB;AASA,OAAO,MAAMC,aAAiC,GAAIC,KAAD,IAAW;AACxDL,EAAAA,kBAAkB;AAElB,QAAM;AAACM,IAAAA,MAAD;AAASC,IAAAA,SAAT;AAAoBC,IAAAA;AAApB,MAAiCH,KAAvC;AACA,QAAM;AAACI,IAAAA;AAAD,MAAUH,MAAhB;;AAEA,QAAMI,eAAe,GAAIC,MAAD,IAAY;AAChC,QAAI,CAACA,MAAM,CAACC,WAAZ,EAAyB;AAEzB,UAAMC,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAWN,KAAX,CAAd;AACA,UAAM,CAACO,aAAD,IAAkBH,KAAK,CAACI,MAAN,CAAaN,MAAM,CAACO,MAAP,CAAcC,KAA3B,EAAkC,CAAlC,CAAxB;AACAN,IAAAA,KAAK,CAACI,MAAN,CAAaN,MAAM,CAACC,WAAP,CAAmBO,KAAhC,EAAuC,CAAvC,EAA0CH,aAA1C;AAEAT,IAAAA,SAAS,iCAAKD,MAAL;AAAaG,MAAAA,KAAK,EAAEI;AAApB,OAAT;AACH,GARD;;AAUA,QAAMO,gBAAgB,GAAG,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAc;AACnC,QAAIC,MAAM,GAAGR,KAAK,CAACC,IAAN,CAAWM,MAAM,CAACZ,KAAlB,CAAb;;AACA,QAAIa,MAAM,CAACC,MAAP,GAAgBd,KAAK,CAACc,MAAtB,IAAgC7B,iBAApC,EAAuD;AACnD,YAAM8B,SAAS,GAAGf,KAAK,CAACgB,MAAN,CAAa,CAC3BC,KAD2B,EAE3BC,IAF2B,KAIrBD,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUC,IAJV,EAKd,CALc,CAAlB;AAOAC,MAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;;AACA,UAAKE,SAAS,GAAGF,MAAM,CAAC,CAAD,CAAN,CAAUO,IAAvB,GAA+BlC,sBAAnC,EAA2D;AACvD2B,QAAAA,MAAM,GAAGA,MAAM,CAACU,GAAP,CAAWJ,IAAI,KAAK;AACzBA,UAAAA,IADyB;AAEzBK,UAAAA,GAAG,EAAEC,GAAG,CAACC,eAAJ,CAAoBP,IAApB;AAFoB,SAAL,CAAf,CAAT;AAKArB,QAAAA,SAAS,iCACFD,MADE;AAELG,UAAAA,KAAK,EAAE,CACH,GAAGa,MADA,EAEH,GAAGb,KAFA;AAFF,WAAT;AAOH;AACJ;AACJ,GA1BD;;AA4BA,QAAM2B,UAAU,GAAIH,GAAD,IAAS,MAAM;AAC9BxB,IAAAA,KAAK,CAACuB,GAAN,CAAU,CAACL,IAAD,EAAwBR,KAAxB,KAAkC;AACxC,UAAIQ,IAAI,CAACM,GAAL,KAAaA,GAAjB,EAAsB;AAClBxB,QAAAA,KAAK,CAACQ,MAAN,CAAaE,KAAb,EAAoB,CAApB;AACAZ,QAAAA,SAAS,iCAAKD,MAAL;AAAaG,UAAAA;AAAb,WAAT;AACH;AACJ,KALD;AAMH,GAPD;;AAQAqB,EAAAA,OAAO,CAACC,GAAR,CAAYtB,KAAZ;AACA,QAAM4B,OAAO,GAAGlC,SAAS,EAAzB;AACA,SACI,mBACI;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,QAAQ,EAAEK,SAFd;AAGI,IAAA,QAAQ,EAAEY,gBAHd;AAII,IAAA,QAAQ,EAAE,IAJd;AAKI,IAAA,MAAM,EAAC;AALX,IADJ,EAQI,MAAC,eAAD;AAAiB,IAAA,SAAS,EAAEV;AAA5B,KACI,MAAC,SAAD;AAAW,IAAA,WAAW,EAAC,QAAvB;AAAgC,IAAA,SAAS,EAAC;AAA1C,KACK4B,QAAQ,IACL,MAAC,IAAD;AACI,IAAA,SAAS,MADb;AAEI,IAAA,SAAS,EAAC;AAFd,KAGQA,QAAQ,CAACC,cAHjB;AAII,IAAA,GAAG,EAAED,QAAQ,CAACE;AAJlB,MAMK/B,KAAK,CAACuB,GAAN,CAAU,CACP;AAACC,IAAAA,GAAD;AAAML,IAAAA;AAAN,GADO,EAKPT,KALO,KAMN;AACD,QAAIA,KAAK,IAAI,CAAb,EAAgB;AACZ,aACI,MAAC,SAAD;AAAW,QAAA,cAAc,EAAEX,SAA3B;AAAsC,QAAA,GAAG,EAAEyB,GAA3C;AAAgD,QAAA,WAAW,EAAEA,GAA7D;AACW,QAAA,KAAK,EAAEd;AADlB,SAEKmB,QAAQ,IACL,MAAC,IAAD;AACI,QAAA,IAAI,MADR;AAEI,QAAA,EAAE,EAAE,CAFR;AAGI,QAAA,EAAE,EAAE,CAHR;AAII,QAAA,GAAG,EAAEA,QAAQ,CAACE;AAJlB,SAKQF,QAAQ,CAACG,cALjB,EAMQH,QAAQ,CAACI,eANjB,GAQI;AACI,QAAA,GAAG,EAAET,GADT;AAEI,QAAA,KAAK,EAAE;AACHU,UAAAA,KAAK,EAAE,OADJ;AAEHC,UAAAA,MAAM,EAAE,OAFL;AAGHC,UAAAA,SAAS,EAAE;AAHR,SAFX;AAOI,QAAA,GAAG,EAAEjB,IAAI,CAACkB;AAPd,QARJ,EAiBI,MAAC,eAAD;AACI,QAAA,QAAQ,EAAEtC,SADd;AAEI,QAAA,OAAO,EAAE4B,UAAU,CAACH,GAAD;AAFvB,aAjBJ,CAHR,CADJ;AA6BH;AACJ,GAtCA,CANL,EA6CKK,QAAQ,CAACS,WA7Cd,CAFR,CADJ,EAoDI,MAAC,SAAD;AAAW,IAAA,WAAW,EAAC,QAAvB;AAAgC,IAAA,SAAS,EAAC;AAA1C,KACKT,QAAQ,IACL,MAAC,IAAD;AACI,IAAA,SAAS,MADb;AAEI,IAAA,SAAS,EAAC;AAFd,KAGQA,QAAQ,CAACC,cAHjB;AAII,IAAA,GAAG,EAAED,QAAQ,CAACE;AAJlB,MAMK/B,KAAK,CAACuB,GAAN,CAAU,CACP;AAACC,IAAAA,GAAD;AAAML,IAAAA;AAAN,GADO,EAKPT,KALO,KAMN;AACD,QAAIA,KAAK,GAAG,CAAZ,EAAe;AACX,aACI,MAAC,SAAD;AAAW,QAAA,cAAc,EAAEX,SAA3B;AAAsC,QAAA,GAAG,EAAEyB,GAA3C;AAAgD,QAAA,WAAW,EAAEA,GAA7D;AACW,QAAA,KAAK,EAAEd;AADlB,SAEKmB,QAAQ,IACL,MAAC,IAAD;AACI,QAAA,IAAI,MADR;AAEI,QAAA,EAAE,EAAE,CAFR;AAGI,QAAA,EAAE,EAAE,CAHR;AAII,QAAA,GAAG,EAAEA,QAAQ,CAACE;AAJlB,SAKQF,QAAQ,CAACG,cALjB,EAMQH,QAAQ,CAACI,eANjB,GAQI;AACI,QAAA,GAAG,EAAET,GADT;AAEI,QAAA,KAAK,EAAE;AACHU,UAAAA,KAAK,EAAE,OADJ;AAEHC,UAAAA,MAAM,EAAE,OAFL;AAGHC,UAAAA,SAAS,EAAE;AAHR,SAFX;AAOI,QAAA,GAAG,EAAEjB,IAAI,CAACkB;AAPd,QARJ,EAiBI,MAAC,eAAD;AACI,QAAA,QAAQ,EAAEtC,SADd;AAEI,QAAA,OAAO,EAAE4B,UAAU,CAACH,GAAD;AAFvB,aAjBJ,CAHR,CADJ;AA6BH;AACJ,GAtCA,CANL,EA6CKK,QAAQ,CAACS,WA7Cd,CAFR,CApDJ,CARJ,CADJ;AAmHH,CAzKM","sourcesContent":["import {TOTAL_FILES_LIMIT, TOTAL_FILES_SIZE_LIMIT} from '@root/src/constants';\r\nimport React, {Dispatch, FC} from 'react';\r\nimport {DragDropContext, Droppable, Draggable, resetServerContext} from 'react-beautiful-dnd';\r\nimport {ButtonComponent} from \"@src/components/elements/button/Button\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {CreateAdFields} from \"@root/interfaces/Advertisement\";\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\ninterface IPreviewPhotos {\r\n    values: CreateAdFields,\r\n    setValues: Dispatch<unknown>\r\n    isPreview: boolean\r\n}\r\n\r\nexport const PreviewPhotos: FC<IPreviewPhotos> = (props) => {\r\n    resetServerContext();\r\n\r\n    const {values, setValues, isPreview} = props;\r\n    const {files} = values;\r\n\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n\r\n        const items = Array.from(files);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        setValues({...values, files: items});\r\n    };\r\n\r\n    const handleUploadFile = ({target}) => {\r\n        let photos = Array.from(target.files);\r\n        if (photos.length + files.length <= TOTAL_FILES_LIMIT) {\r\n            const totalSize = files.reduce((\r\n                total,\r\n                item: {\r\n                    file: { size: number }\r\n                }) => total + item.file.size,\r\n                0\r\n            );\r\n            console.log(photos)\r\n            if ((totalSize + photos[0].size) < TOTAL_FILES_SIZE_LIMIT) {\r\n                photos = photos.map(file => ({\r\n                    file,\r\n                    url: URL.createObjectURL(file)\r\n                }));\r\n\r\n                setValues({\r\n                    ...values,\r\n                    files: [\r\n                        ...photos,\r\n                        ...files\r\n                    ]\r\n                })\r\n            }\r\n        }\r\n    };\r\n\r\n    const removeFile = (url) => () => {\r\n        files.map((item: { url: string }, index) => {\r\n            if (item.url === url) {\r\n                files.splice(index, 1);\r\n                setValues({...values, files});\r\n            }\r\n        });\r\n    };\r\n    console.log(files)\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n            <input\r\n                type='file'\r\n                disabled={isPreview}\r\n                onChange={handleUploadFile}\r\n                multiple={true}\r\n                accept=\"image/png,image/jpeg\"\r\n            />\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId=\"images\" direction=\"horizontal\">\r\n                    {provided => (\r\n                        <Grid\r\n                            container\r\n                            className=\"images-wrapper\"\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                        >\r\n                            {files.map((\r\n                                {url, file}: {\r\n                                    url: string,\r\n                                    file: { name: string }\r\n                                },\r\n                                index\r\n                            ) => {\r\n                                if (index <= 4) {\r\n                                    return (\r\n                                        <Draggable isDragDisabled={isPreview} key={url} draggableId={url}\r\n                                                   index={index}>\r\n                                            {provided => (\r\n                                                <Grid\r\n                                                    item\r\n                                                    xs={4}\r\n                                                    md={3}\r\n                                                    ref={provided.innerRef}\r\n                                                    {...provided.draggableProps}\r\n                                                    {...provided.dragHandleProps}\r\n                                                >\r\n                                                    <img\r\n                                                        src={url}\r\n                                                        style={{\r\n                                                            width: '160px',\r\n                                                            height: '120px',\r\n                                                            objectFit: 'cover'\r\n                                                        }}\r\n                                                        alt={file.name}\r\n                                                    />\r\n                                                    <ButtonComponent\r\n                                                        disabled={isPreview}\r\n                                                        onClick={removeFile(url)}\r\n                                                    >X</ButtonComponent>\r\n                                                </Grid>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    );\r\n                                }\r\n                            })}\r\n                            {provided.placeholder}\r\n                        </Grid>\r\n                    )}\r\n                </Droppable>\r\n                <Droppable droppableId=\"images\" direction=\"horizontal\">\r\n                    {provided => (\r\n                        <Grid\r\n                            container\r\n                            className=\"images-wrapper\"\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                        >\r\n                            {files.map((\r\n                                {url, file}: {\r\n                                    url: string,\r\n                                    file: { name: string }\r\n                                },\r\n                                index\r\n                            ) => {\r\n                                if (index > 4) {\r\n                                    return (\r\n                                        <Draggable isDragDisabled={isPreview} key={url} draggableId={url}\r\n                                                   index={index}>\r\n                                            {provided => (\r\n                                                <Grid\r\n                                                    item\r\n                                                    xs={4}\r\n                                                    md={3}\r\n                                                    ref={provided.innerRef}\r\n                                                    {...provided.draggableProps}\r\n                                                    {...provided.dragHandleProps}\r\n                                                >\r\n                                                    <img\r\n                                                        src={url}\r\n                                                        style={{\r\n                                                            width: '160px',\r\n                                                            height: '120px',\r\n                                                            objectFit: 'cover'\r\n                                                        }}\r\n                                                        alt={file.name}\r\n                                                    />\r\n                                                    <ButtonComponent\r\n                                                        disabled={isPreview}\r\n                                                        onClick={removeFile(url)}\r\n                                                    >X</ButtonComponent>\r\n                                                </Grid>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    );\r\n                                }\r\n                            })}\r\n                            {provided.placeholder}\r\n                        </Grid>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}