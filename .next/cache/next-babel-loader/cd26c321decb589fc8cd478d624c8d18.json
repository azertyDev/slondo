{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport { CustomSlider } from '../custom_slider/CustomSlider'; // styles\n\nimport { useStyles } from './useStyles';\nexport var SyncSliders = function SyncSliders(props) {\n  _s();\n\n  var _useState = useState({\n    nav1: null,\n    nav2: null\n  }),\n      slidersNav = _useState[0],\n      setSlidersNav = _useState[1];\n\n  var slider1 = useRef();\n  var slider2 = useRef();\n\n  var handleAfterChange = function handleAfterChange(newIndex) {\n    props.setCurrentSlide && props.setCurrentSlide(newIndex);\n  };\n\n  useEffect(function () {\n    setSlidersNav({\n      nav1: slider1.current,\n      nav2: slider2.current\n    });\n  }, []);\n  var classes = useStyles();\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"div\", {\n    className: classes.firstSlider\n  }, __jsx(CustomSlider, {\n    asNavFor: slidersNav.nav2,\n    ref: slider1,\n    swipe: false,\n    afterChange: handleAfterChange,\n    variableWidth: props.variableWidth,\n    initialSlide: props.currentSlide,\n    centerMode: props.centerMode\n  }, props.imgs.map(function (_ref, i) {\n    var url = _ref.url,\n        alt = _ref.alt;\n    return __jsx(\"img\", {\n      src: url.original,\n      alt: alt,\n      key: i,\n      onClick: props.handleOpenModal\n    });\n  }))), __jsx(\"div\", {\n    className: classes.secondSlider\n  }, __jsx(CustomSlider, {\n    ref: slider2,\n    focusOnSelect: true,\n    arrows: props.arrows,\n    afterChange: handleAfterChange,\n    slidesToShow: props.imgs.length < 4 ? props.imgs.length : 4,\n    swipeToSlide: true\n  }, props.imgs.map(function (_ref2, i) {\n    var url = _ref2.url,\n        alt = _ref2.alt;\n    return __jsx(\"img\", {\n      src: url.small,\n      alt: alt,\n      key: i\n    });\n  }))));\n};\n\n_s(SyncSliders, \"ozu7qlsRg1wI4oHO3SKAldjJ4zs=\", false, function () {\n  return [useStyles];\n});\n\n_c = SyncSliders;\n\nvar _c;\n\n$RefreshReg$(_c, \"SyncSliders\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/sync_sliders/SyncSliders.tsx"],"names":["React","useEffect","useRef","useState","CustomSlider","useStyles","SyncSliders","props","nav1","nav2","slidersNav","setSlidersNav","slider1","slider2","handleAfterChange","newIndex","setCurrentSlide","current","classes","root","firstSlider","variableWidth","currentSlide","centerMode","imgs","map","i","url","alt","original","handleOpenModal","secondSlider","arrows","length","small"],"mappings":";;;AAAA,OAAOA,KAAP,IAAkCC,SAAlC,EAA6CC,MAA7C,EAAqDC,QAArD,QAAqE,OAArE;AACA,SAASC,YAAT,QAA6B,+BAA7B,C,CAEA;;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAAA;;AAAA,kBACEJ,QAAQ,CAAC;AAAEK,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,IAAI,EAAE;AAApB,GAAD,CADV;AAAA,MAC3BC,UAD2B;AAAA,MACfC,aADe;;AAElC,MAAMC,OAAkC,GAAGV,MAAM,EAAjD;AACA,MAAMW,OAAkC,GAAGX,MAAM,EAAjD;;AAEA,MAAMY,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,QAAD,EAAc;AACpCR,IAAAA,KAAK,CAACS,eAAN,IAAyBT,KAAK,CAACS,eAAN,CAAsBD,QAAtB,CAAzB;AACH,GAFD;;AAIAd,EAAAA,SAAS,CAAC,YAAM;AACZU,IAAAA,aAAa,CAAC;AACVH,MAAAA,IAAI,EAAEI,OAAO,CAACK,OADJ;AAEVR,MAAAA,IAAI,EAAEI,OAAO,CAACI;AAFJ,KAAD,CAAb;AAIH,GALQ,EAKN,EALM,CAAT;AAOA,MAAMC,OAAO,GAAGb,SAAS,EAAzB;AACA,SACI;AAAK,IAAA,SAAS,EAAEa,OAAO,CAACC;AAAxB,KACI;AAAK,IAAA,SAAS,EAAED,OAAO,CAACE;AAAxB,KACI,MAAC,YAAD;AACI,IAAA,QAAQ,EAAEV,UAAU,CAACD,IADzB;AAEI,IAAA,GAAG,EAAEG,OAFT;AAGI,IAAA,KAAK,EAAE,KAHX;AAII,IAAA,WAAW,EAAEE,iBAJjB;AAKI,IAAA,aAAa,EAAEP,KAAK,CAACc,aALzB;AAMI,IAAA,YAAY,EAAEd,KAAK,CAACe,YANxB;AAOI,IAAA,UAAU,EAAEf,KAAK,CAACgB;AAPtB,KASKhB,KAAK,CAACiB,IAAN,CAAWC,GAAX,CAAe,gBAAeC,CAAf;AAAA,QAAGC,GAAH,QAAGA,GAAH;AAAA,QAAQC,GAAR,QAAQA,GAAR;AAAA,WACZ;AACI,MAAA,GAAG,EAAED,GAAG,CAACE,QADb;AAEI,MAAA,GAAG,EAAED,GAFT;AAGI,MAAA,GAAG,EAAEF,CAHT;AAII,MAAA,OAAO,EAAEnB,KAAK,CAACuB;AAJnB,MADY;AAAA,GAAf,CATL,CADJ,CADJ,EAqBI;AAAK,IAAA,SAAS,EAAEZ,OAAO,CAACa;AAAxB,KACI,MAAC,YAAD;AACI,IAAA,GAAG,EAAElB,OADT;AAEI,IAAA,aAAa,EAAE,IAFnB;AAGI,IAAA,MAAM,EAAEN,KAAK,CAACyB,MAHlB;AAII,IAAA,WAAW,EAAElB,iBAJjB;AAKI,IAAA,YAAY,EAAEP,KAAK,CAACiB,IAAN,CAAWS,MAAX,GAAoB,CAApB,GAAwB1B,KAAK,CAACiB,IAAN,CAAWS,MAAnC,GAA4C,CAL9D;AAMI,IAAA,YAAY,EAAE;AANlB,KAQK1B,KAAK,CAACiB,IAAN,CAAWC,GAAX,CAAe,iBAAeC,CAAf;AAAA,QAAGC,GAAH,SAAGA,GAAH;AAAA,QAAQC,GAAR,SAAQA,GAAR;AAAA,WACZ;AAAK,MAAA,GAAG,EAAED,GAAG,CAACO,KAAd;AAAqB,MAAA,GAAG,EAAEN,GAA1B;AAA+B,MAAA,GAAG,EAAEF;AAApC,MADY;AAAA,GAAf,CARL,CADJ,CArBJ,CADJ;AAsCH,CAvDM;;GAAMpB,W;UAgBOD,S;;;KAhBPC,W","sourcesContent":["import React, { MutableRefObject, useEffect, useRef, useState } from 'react';\r\nimport { CustomSlider } from '../custom_slider/CustomSlider';\r\n\r\n// styles\r\nimport { useStyles } from './useStyles';\r\n\r\nexport const SyncSliders = (props) => {\r\n    const [slidersNav, setSlidersNav] = useState({ nav1: null, nav2: null });\r\n    const slider1: MutableRefObject<unknown> = useRef();\r\n    const slider2: MutableRefObject<unknown> = useRef();\r\n\r\n    const handleAfterChange = (newIndex) => {\r\n        props.setCurrentSlide && props.setCurrentSlide(newIndex);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setSlidersNav({\r\n            nav1: slider1.current,\r\n            nav2: slider2.current,\r\n        });\r\n    }, []);\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.firstSlider}>\r\n                <CustomSlider\r\n                    asNavFor={slidersNav.nav2}\r\n                    ref={slider1}\r\n                    swipe={false}\r\n                    afterChange={handleAfterChange}\r\n                    variableWidth={props.variableWidth}\r\n                    initialSlide={props.currentSlide}\r\n                    centerMode={props.centerMode}\r\n                >\r\n                    {props.imgs.map(({ url, alt }, i) => (\r\n                        <img\r\n                            src={url.original}\r\n                            alt={alt}\r\n                            key={i}\r\n                            onClick={props.handleOpenModal}\r\n                        />\r\n                    ))}\r\n                </CustomSlider>\r\n            </div>\r\n            <div className={classes.secondSlider}>\r\n                <CustomSlider\r\n                    ref={slider2}\r\n                    focusOnSelect={true}\r\n                    arrows={props.arrows}\r\n                    afterChange={handleAfterChange}\r\n                    slidesToShow={props.imgs.length < 4 ? props.imgs.length : 4}\r\n                    swipeToSlide={true}\r\n                >\r\n                    {props.imgs.map(({ url, alt }, i) => (\r\n                        <img src={url.small} alt={alt} key={i} />\r\n                    ))}\r\n                </CustomSlider>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}