{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from \"@src/api/api\";\nconst initialState = {\n  error: null,\n  isFetch: false,\n  adType: {\n    id: null,\n    name: 'Выберите тип объявления'\n  },\n  category: {\n    id: null,\n    name: null,\n    childs: []\n  }\n};\nexport const fetchAd = createAsyncThunk('adOrLot/fetchAd', async ({\n  ctgryID,\n  subCtgryID\n}, {\n  rejectWithValue\n}) => {\n  try {\n    return await userAPI.getAdOrLot(ctgryID, subCtgryID, false);\n  } catch (e) {\n    return rejectWithValue(e.message);\n  }\n});\nexport const fetchLot = createAsyncThunk('adOrLot/fetchLot', async ({\n  ctgryID,\n  subCtgryID\n}, {\n  rejectWithValue\n}) => {\n  try {\n    return await userAPI.getAdOrLot(ctgryID, subCtgryID, true);\n  } catch (e) {\n    return rejectWithValue(e.message);\n  }\n});\nconst createAdOrLotSlice = createSlice({\n  name: 'adOrLot',\n  initialState,\n  reducers: {\n    setAdOrLotCtgryAction: (state, action) => {\n      state.isLot = action.payload.isLot;\n      state.category = action.payload.category;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAd.pending, state => {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchAd.fulfilled, (state, action) => {\n      state.isFetch = false;\n      state.adType = action.payload;\n    });\n    builder.addCase(fetchAd.rejected, (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n    builder.addCase(fetchLot.pending, state => {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchLot.fulfilled, (state, action) => {\n      state.isFetch = false;\n      state.isLot = true;\n    });\n    builder.addCase(fetchLot.rejected, (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  setAdOrLotCtgryAction\n} = createAdOrLotSlice.actions;\nexport const createAdOrLotReducer = createAdOrLotSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/createAdOrLotSlice.ts"],"names":["createAsyncThunk","createSlice","userAPI","initialState","error","isFetch","adType","id","name","category","childs","fetchAd","ctgryID","subCtgryID","rejectWithValue","getAdOrLot","e","message","fetchLot","createAdOrLotSlice","reducers","setAdOrLotCtgryAction","state","action","isLot","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","createAdOrLotReducer","reducer"],"mappings":"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","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {AdOrLot} from '@root/interfaces/AdOrLot';\r\nimport {userAPI} from \"@src/api/api\";\r\nimport {CategoryIDs} from \"@root/interfaces/Categories\";\r\n\r\n\r\nconst initialState: AdOrLot = {\r\n    error: null,\r\n    isFetch: false,\r\n    adType: {\r\n        id: null,\r\n        name: 'Выберите тип объявления'\r\n    },\r\n    category: {\r\n        id: null,\r\n        name: null,\r\n        childs: []\r\n    }\r\n};\r\n\r\nexport const fetchAd = createAsyncThunk<any, CategoryIDs>(\r\n    'adOrLot/fetchAd',\r\n    async ({ctgryID, subCtgryID}, {rejectWithValue}) => {\r\n        try {\r\n            return await userAPI.getAdOrLot(ctgryID, subCtgryID, false);\r\n        } catch (e) {\r\n            return rejectWithValue(e.message);\r\n        }\r\n    }\r\n);\r\n\r\nexport const fetchLot = createAsyncThunk<any, CategoryIDs>(\r\n    'adOrLot/fetchLot',\r\n    async ({ctgryID, subCtgryID}, {rejectWithValue}) => {\r\n        try {\r\n            return await userAPI.getAdOrLot(ctgryID, subCtgryID, true);\r\n        } catch (e) {\r\n            return rejectWithValue(e.message);\r\n        }\r\n    }\r\n);\r\n\r\nconst createAdOrLotSlice = createSlice({\r\n    name: 'adOrLot',\r\n    initialState,\r\n    reducers: {\r\n        setAdOrLotCtgryAction: (state, action) => {\r\n            state.isLot = action.payload.isLot;\r\n            state.category = action.payload.category;\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchAd.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        })\r\n        builder.addCase(fetchAd.fulfilled, (state, action) => {\r\n            state.isFetch = false;\r\n            state.adType = action.payload;\r\n        })\r\n        builder.addCase(fetchAd.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        })\r\n        builder.addCase(fetchLot.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        })\r\n        builder.addCase(fetchLot.fulfilled, (state, action) => {\r\n            state.isFetch = false;\r\n            state.isLot = true;\r\n        })\r\n        builder.addCase(fetchLot.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        })\r\n    }\r\n});\r\n\r\nexport const {setAdOrLotCtgryAction} = createAdOrLotSlice.actions;\r\nexport const createAdOrLotReducer = createAdOrLotSlice.reducer;"]},"metadata":{},"sourceType":"module"}