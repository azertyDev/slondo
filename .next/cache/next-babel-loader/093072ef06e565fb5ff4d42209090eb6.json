{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _extraReducers;\n\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from '@src/api/api';\nvar fetchToken = createAsyncThunk('auth/fetchByIdStatus', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(phone, password) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return userAPI.login(phone, password);\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nvar initialState = {\n  isFetch: false,\n  isAuth: false,\n  error: null\n};\nvar authSlice = createSlice({\n  name: 'auth',\n  initialState: initialState,\n  reducers: {},\n  extraReducers: (_extraReducers = {}, _defineProperty(_extraReducers, fetchToken.pending, function (state) {\n    state.isFetch = true;\n    state.error = null;\n  }), _defineProperty(_extraReducers, fetchToken.fulfilled, function (state, action) {\n    state.isFetch = false;\n    state.isAuth = action.payload;\n  }), _defineProperty(_extraReducers, fetchToken.rejected, function (state, action) {\n    state.isFetch = false;\n    state.error = action.payload;\n  }), _extraReducers)\n});\nexport var auth = function auth(state) {\n  return state.auth;\n};\nvar setIsAuthAction = authSlice.actions.setIsAuthAction;\nexport { setIsAuthAction };\nexport default authSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/authReducer.ts"],"names":["createAsyncThunk","createSlice","userAPI","fetchToken","phone","password","login","response","data","initialState","isFetch","isAuth","error","authSlice","name","reducers","extraReducers","pending","state","fulfilled","action","payload","rejected","auth","setIsAuthAction","actions","reducer"],"mappings":";;;;;;AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AACA,SAAQC,OAAR,QAAsB,cAAtB;AAGA,IAAMC,UAAU,GAAGH,gBAAgB,CAC/B,sBAD+B;AAAA,sEAE/B,iBAAOI,KAAP,EAAcC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC2BH,OAAO,CAACI,KAAR,CAAcF,KAAd,EAAqBC,QAArB,CAD3B;;AAAA;AACUE,YAAAA,QADV;AAAA,6CAEWA,QAAQ,CAACC,IAFpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAF+B;;AAAA;AAAA;AAAA;AAAA,IAAnC;AAcA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,MAAM,EAAE,KAFS;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;AAMA,IAAMC,SAAS,GAAGZ,WAAW,CAAC;AAC1Ba,EAAAA,IAAI,EAAE,MADoB;AAE1BL,EAAAA,YAAY,EAAZA,YAF0B;AAG1BM,EAAAA,QAAQ,EAAE,EAHgB;AAI1BC,EAAAA,aAAa,wDACRb,UAAU,CAACc,OADH,EACa,UAACC,KAAD,EAAW;AAC7BA,IAAAA,KAAK,CAACR,OAAN,GAAgB,IAAhB;AACAQ,IAAAA,KAAK,CAACN,KAAN,GAAc,IAAd;AACH,GAJQ,mCAKRT,UAAU,CAACgB,SALH,EAKe,UAACD,KAAD,EAAQE,MAAR,EAAmB;AACvCF,IAAAA,KAAK,CAACR,OAAN,GAAgB,KAAhB;AACAQ,IAAAA,KAAK,CAACP,MAAN,GAAeS,MAAM,CAACC,OAAtB;AACH,GARQ,mCASRlB,UAAU,CAACmB,QATH,EASc,UAACJ,KAAD,EAAQE,MAAR,EAAmB;AACtCF,IAAAA,KAAK,CAACR,OAAN,GAAgB,KAAhB;AACAQ,IAAAA,KAAK,CAACN,KAAN,GAAcQ,MAAM,CAACC,OAArB;AACH,GAZQ;AAJa,CAAD,CAA7B;AAoBA,OAAO,IAAME,IAAI,GAAG,SAAPA,IAAO,CAACL,KAAD;AAAA,SAAWA,KAAK,CAACK,IAAjB;AAAA,CAAb;IAEOC,e,GAAmBX,SAAS,CAACY,O,CAA7BD,e;;AAEd,eAAeX,SAAS,CAACa,OAAzB","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {userAPI} from '@src/api/api'\r\n\r\n\r\nconst fetchToken = createAsyncThunk<any>(\r\n    'auth/fetchByIdStatus',\r\n    async (phone, password) => {\r\n        const response = await userAPI.login(phone, password)\r\n        return response.data\r\n    }\r\n)\r\n\r\nexport type AuthTypes = {\r\n    isFetch: boolean,\r\n    isAuth: boolean,\r\n    error?: any\r\n};\r\n\r\nconst initialState = {\r\n    isFetch: false,\r\n    isAuth: false,\r\n    error: null\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: {\r\n        [fetchToken.pending]: (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        },\r\n        [fetchToken.fulfilled]: (state, action) => {\r\n            state.isFetch = false;\r\n            state.isAuth = action.payload;\r\n        },\r\n        [fetchToken.rejected]: (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const auth = (state) => state.auth;\r\n\r\nexport const {setIsAuthAction} = authSlice.actions;\r\n\r\nexport default authSlice.reducer;"]},"metadata":{},"sourceType":"module"}