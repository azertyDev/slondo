{"ast":null,"code":"var __jsx = React.createElement;\nimport { isRequired } from \"@root/validation_schemas/createAdvrtSchema\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CustomCheckbox } from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport React from \"react\";\nimport { useStyles } from \"./useStyles\";\nexport const AdvrtParams = props => {\n  const {\n    data,\n    key,\n    errors,\n    touched,\n    isPreview,\n    onBlur,\n    adParams,\n    handleMenuItem,\n    handleListItem,\n    handleParamsCheckbox\n  } = props;\n  let fields; // if (isRequired(key) || (key === 'adsParams' && data[0].condition && data[0].condition.length)) {\n  //     if (key !== 'adsParams') {\n  //         initReqFields[key] = {id: null, name: 'Не выбрано'};\n  //     } else {\n  //         key = 'condition';\n  //         data = data[0].condition;\n  //         initReqFields[key] = data[0];\n  //     }\n  // }\n\n  const classes = useStyles({\n    isPreview\n  });\n  const isExcludedRows = key !== 'id' && key !== 'name' && key !== 'adsParams';\n  const isOptions = key === 'safety' || key === 'multimedia' || key === 'assistant' || key === 'exterior';\n  const isSpecialRows = key === 'body' || key === 'colors' || isOptions;\n\n  if (isExcludedRows && data) {\n    if (isSpecialRows && data.length) {\n      fields = __jsx(React.Fragment, null, __jsx(Typography, {\n        variant: \"subtitle1\"\n      }, key, isRequired(key) && __jsx(\"span\", {\n        className: \"error-text\"\n      }, \"*\")), __jsx(\"div\", {\n        className: \"row-list\"\n      }, data.map(item => __jsx(\"div\", {\n        key: item.id\n      }, key === 'body' ? __jsx(\"div\", {\n        onClick: !isPreview ? handleListItem(key, item) : null,\n        className: adParams[key] && adParams[key].id === item.id ? classes.selected : ''\n      }, __jsx(\"img\", {\n        src: item.icon.url,\n        alt: item.name\n      }), __jsx(Typography, null, item.name)) : __jsx(React.Fragment, null, key === 'colors' ? __jsx(\"div\", {\n        onClick: !isPreview ? handleListItem(key, item) : null,\n        className: adParams[key] && adParams[key].id === item.id ? classes.selected : '',\n        style: {\n          width: '50px',\n          height: '50px',\n          backgroundColor: `${item.hex_color_code}`\n        }\n      }) : __jsx(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center'\n        }\n      }, __jsx(CustomCheckbox, {\n        disabled: isPreview,\n        checked: adParams[key] && adParams[key].some(val => val.id === item.id),\n        onChange: handleParamsCheckbox(key, item)\n      }), __jsx(Typography, null, item.name)))))));\n    } else {\n      if (!Array.isArray(data)) {\n        fields = __jsx(React.Fragment, null, __jsx(Typography, {\n          variant: \"subtitle1\"\n        }, key, isRequired(key) && __jsx(\"span\", {\n          className: \"error-text\"\n        }, \"*\")), key === 'body' ? __jsx(Typography, null, data.name) : key === 'colors' ? __jsx(\"div\", {\n          style: {\n            width: '50px',\n            height: '50px',\n            backgroundColor: `${data.hex_color_code}`\n          }\n        }) : __jsx(Typography, null, data.name));\n      } else if (data.length) {\n        if (key !== 'condition') data = [{\n          id: null,\n          name: 'Не выбрано'\n        }, ...data];\n        fields = __jsx(React.Fragment, null, __jsx(Typography, {\n          variant: \"subtitle1\"\n        }, __jsx(\"strong\", null, key, isRequired(key) && __jsx(\"span\", {\n          className: \"error-text\"\n        }, \"*\"))), __jsx(CustomMenu, {\n          className: errors.adParams && errors.adParams[key] && touched[key] ? 'error-border' : '',\n          name: key,\n          onBlur: onBlur,\n          items: data,\n          valueName: adParams[key] ? adParams[key].name : data[0].name,\n          onClick: handleMenuItem(key)\n        }));\n      }\n    }\n\n    return __jsx(Grid, {\n      item: true,\n      container: true,\n      className: classes.gridItem,\n      key: key,\n      xs: 12,\n      sm: isSpecialRows && !isPreview || isOptions ? 12 : 6\n    }, fields);\n  }\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrt_form/advrt_params_block/AdvrtParams.tsx"],"names":["isRequired","Grid","Typography","CustomCheckbox","CustomMenu","React","useStyles","AdvrtParams","props","data","key","errors","touched","isPreview","onBlur","adParams","handleMenuItem","handleListItem","handleParamsCheckbox","fields","classes","isExcludedRows","isOptions","isSpecialRows","length","map","item","id","selected","icon","url","name","width","height","backgroundColor","hex_color_code","display","alignItems","some","val","Array","isArray","gridItem"],"mappings":"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","sourcesContent":["import {isRequired} from \"@root/validation_schemas/createAdvrtSchema\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {CustomCheckbox} from \"@src/components/elements/custom_checkbox/CustomCheckbox\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport React, {FC} from \"react\";\r\nimport {useStyles} from \"./useStyles\";\r\n\r\n\r\nexport const AdvrtParams: FC<any> = (props) => {\r\n    const {\r\n        data,\r\n        key,\r\n        errors,\r\n        touched,\r\n        isPreview,\r\n        onBlur,\r\n        adParams,\r\n        handleMenuItem,\r\n        handleListItem,\r\n        handleParamsCheckbox,\r\n    } = props;\r\n    let fields;\r\n\r\n    // if (isRequired(key) || (key === 'adsParams' && data[0].condition && data[0].condition.length)) {\r\n    //     if (key !== 'adsParams') {\r\n    //         initReqFields[key] = {id: null, name: 'Не выбрано'};\r\n    //     } else {\r\n    //         key = 'condition';\r\n    //         data = data[0].condition;\r\n    //         initReqFields[key] = data[0];\r\n    //     }\r\n    // }\r\n    const classes = useStyles({isPreview});\r\n\r\n    const isExcludedRows = key !== 'id' && key !== 'name' && key !== 'adsParams';\r\n\r\n    const isOptions = key === 'safety'\r\n        || key === 'multimedia'\r\n        || key === 'assistant'\r\n        || key === 'exterior';\r\n\r\n    const isSpecialRows = key === 'body' || key === 'colors' || isOptions;\r\n\r\n    if (isExcludedRows && data) {\r\n        if (isSpecialRows && data.length) {\r\n            fields = (\r\n                <>\r\n                    <Typography variant=\"subtitle1\">\r\n                        {key}\r\n                        {\r\n                            isRequired(key)\r\n                            && <span className='error-text'>*</span>\r\n                        }\r\n                    </Typography>\r\n                    <div className='row-list'>\r\n                        {\r\n                            data.map(item => (\r\n                                <div key={item.id}>\r\n                                    {\r\n                                        key === 'body'\r\n                                            ? <div\r\n                                                onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                                className={\r\n                                                    adParams[key]\r\n                                                    && adParams[key].id === item.id\r\n                                                        ? classes.selected : ''\r\n                                                }\r\n                                            >\r\n                                                <img src={item.icon.url} alt={item.name}/>\r\n                                                <Typography>{item.name}</Typography>\r\n                                            </div>\r\n                                            : <>\r\n                                                {\r\n                                                    key === 'colors'\r\n                                                        ? <div\r\n                                                            onClick={!isPreview ? handleListItem(key, item) : null}\r\n                                                            className={adParams[key] && adParams[key].id === item.id ? classes.selected : ''}\r\n                                                            style={{\r\n                                                                width: '50px',\r\n                                                                height: '50px',\r\n                                                                backgroundColor: `${item.hex_color_code}`,\r\n                                                            }}\r\n                                                        />\r\n                                                        : <div style={{display: 'flex', alignItems: 'center'}}>\r\n                                                            <CustomCheckbox\r\n                                                                disabled={isPreview}\r\n                                                                checked={\r\n                                                                    adParams[key]\r\n                                                                    && adParams[key].some(val => val.id === item.id)\r\n                                                                }\r\n                                                                onChange={handleParamsCheckbox(key, item)}\r\n                                                            />\r\n                                                            <Typography>{item.name}</Typography>\r\n                                                        </div>\r\n                                                }\r\n                                            </>\r\n                                    }\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </>\r\n            );\r\n        } else {\r\n            if (!Array.isArray(data)) {\r\n                fields = (\r\n                    <>\r\n                        <Typography variant=\"subtitle1\">\r\n                            {key}\r\n                            {\r\n                                isRequired(key)\r\n                                && <span className='error-text'>*</span>\r\n                            }\r\n                        </Typography>\r\n                        {\r\n                            key === 'body'\r\n                                ? <Typography>{data.name}</Typography>\r\n                                : key === 'colors'\r\n                                ? <div\r\n                                    style={{\r\n                                        width: '50px',\r\n                                        height: '50px',\r\n                                        backgroundColor: `${data.hex_color_code}`\r\n                                    }}\r\n                                />\r\n                                : <Typography>{data.name}</Typography>\r\n                        }\r\n                    </>\r\n                );\r\n            } else if (data.length) {\r\n                if (key !== 'condition') data = [{id: null, name: 'Не выбрано'}, ...data];\r\n                fields = (\r\n                    <>\r\n                        <Typography variant=\"subtitle1\">\r\n                            <strong>\r\n                                {key}\r\n                                {\r\n                                    isRequired(key)\r\n                                    && <span className='error-text'>*</span>\r\n                                }\r\n                            </strong>\r\n                        </Typography>\r\n                        <CustomMenu\r\n                            className={\r\n                                errors.adParams\r\n                                && errors.adParams[key]\r\n                                && touched[key] ? 'error-border' : ''\r\n                            }\r\n                            name={key}\r\n                            onBlur={onBlur}\r\n                            items={data}\r\n                            valueName={adParams[key] ? adParams[key].name : data[0].name}\r\n                            onClick={handleMenuItem(key)}\r\n                        />\r\n                    </>\r\n                );\r\n            }\r\n        }\r\n        return (\r\n            <Grid\r\n                item\r\n                container\r\n                className={classes.gridItem}\r\n                key={key}\r\n                xs={12}\r\n                sm={isSpecialRows && !isPreview || isOptions ? 12 : 6}\r\n            >\r\n                {fields}\r\n            </Grid>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}