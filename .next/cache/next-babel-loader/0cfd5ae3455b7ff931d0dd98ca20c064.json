{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { TOTAL_FILES_LIMIT, TOTAL_FILES_SIZE_LIMIT } from '@root/src/constants';\nimport React from 'react';\nimport { DragDropContext, Droppable, Draggable, resetServerContext } from 'react-beautiful-dnd';\nimport { ButtonComponent } from \"@src/components/elements/button/Button\";\nimport { Grid } from \"@material-ui/core\";\nimport { useStyles } from './useStyles';\nexport var PreviewPhotos = function PreviewPhotos(props) {\n  _s();\n\n  resetServerContext();\n  var values = props.values,\n      setValues = props.setValues,\n      isPreview = props.isPreview;\n  var files = values.files;\n\n  var handleOnDragEnd = function handleOnDragEnd(result) {\n    if (!result.destination) return;\n    var items = Array.from(files);\n\n    var _items$splice = items.splice(result.source.index, 1),\n        _items$splice2 = _slicedToArray(_items$splice, 1),\n        reorderedItem = _items$splice2[0];\n\n    items.splice(result.destination.index, 0, reorderedItem);\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      files: items\n    }));\n  };\n\n  var handleUploadFile = function handleUploadFile(_ref) {\n    var target = _ref.target;\n    var photos = Array.from(target.files);\n\n    if (photos.length + files.length < TOTAL_FILES_LIMIT) {\n      var totalSize = files.reduce(function (total, item) {\n        return total + item.file.size;\n      }, 0);\n      console.log(photos);\n\n      if (totalSize + photos[0].size < TOTAL_FILES_SIZE_LIMIT) {\n        photos = photos.map(function (file) {\n          return {\n            file: file,\n            url: URL.createObjectURL(file)\n          };\n        });\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          files: [].concat(_toConsumableArray(photos), _toConsumableArray(files))\n        }));\n      }\n    }\n  };\n\n  var removeFile = function removeFile(url) {\n    return function () {\n      files.map(function (item, index) {\n        if (item.url === url) {\n          files.splice(index, 1);\n          setValues(_objectSpread(_objectSpread({}, values), {}, {\n            files: files\n          }));\n        }\n      });\n    };\n  };\n\n  console.log(files);\n  var classes = useStyles();\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    disabled: isPreview,\n    onChange: handleUploadFile,\n    multiple: true,\n    accept: \"image/png,image/jpeg\"\n  }), __jsx(DragDropContext, {\n    onDragEnd: handleOnDragEnd\n  }, __jsx(Droppable, {\n    droppableId: \"images\",\n    direction: \"horizontal\"\n  }, function (provided) {\n    return __jsx(Grid, _extends({\n      container: true,\n      className: \"images-wrapper\"\n    }, provided.droppableProps, {\n      ref: provided.innerRef\n    }), files.map(function (_ref2, index) {\n      var url = _ref2.url,\n          file = _ref2.file;\n      return __jsx(Draggable, {\n        isDragDisabled: isPreview,\n        key: url,\n        draggableId: url,\n        index: index\n      }, function (provided) {\n        return __jsx(Grid, _extends({\n          item: true,\n          md: 3,\n          ref: provided.innerRef\n        }, provided.draggableProps, provided.dragHandleProps), __jsx(\"img\", {\n          src: url,\n          style: {\n            width: '160px',\n            height: '120px',\n            objectFit: 'cover'\n          },\n          alt: file.name\n        }), __jsx(ButtonComponent, {\n          disabled: isPreview,\n          onClick: removeFile(url)\n        }, \"X\"));\n      });\n    }), provided.placeholder);\n  })));\n};\n\n_s(PreviewPhotos, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = PreviewPhotos;\n\nvar _c;\n\n$RefreshReg$(_c, \"PreviewPhotos\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/elements/preview_photos/PreviewPhotos.tsx"],"names":["TOTAL_FILES_LIMIT","TOTAL_FILES_SIZE_LIMIT","React","DragDropContext","Droppable","Draggable","resetServerContext","ButtonComponent","Grid","useStyles","PreviewPhotos","props","values","setValues","isPreview","files","handleOnDragEnd","result","destination","items","Array","from","splice","source","index","reorderedItem","handleUploadFile","target","photos","length","totalSize","reduce","total","item","file","size","console","log","map","url","URL","createObjectURL","removeFile","classes","provided","droppableProps","innerRef","draggableProps","dragHandleProps","width","height","objectFit","name","placeholder"],"mappings":"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","sourcesContent":["import {TOTAL_FILES_LIMIT, TOTAL_FILES_SIZE_LIMIT} from '@root/src/constants';\r\nimport React, {Dispatch, FC} from 'react';\r\nimport {DragDropContext, Droppable, Draggable, resetServerContext} from 'react-beautiful-dnd';\r\nimport {ButtonComponent} from \"@src/components/elements/button/Button\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {CreateAdFields} from \"@root/interfaces/Advertisement\";\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\ninterface IPreviewPhotos {\r\n    values: CreateAdFields,\r\n    setValues: Dispatch<unknown>\r\n    isPreview: boolean\r\n}\r\n\r\nexport const PreviewPhotos: FC<IPreviewPhotos> = (props) => {\r\n    resetServerContext();\r\n\r\n    const {values, setValues, isPreview} = props;\r\n    const {files} = values;\r\n\r\n    const handleOnDragEnd = (result) => {\r\n        if (!result.destination) return;\r\n\r\n        const items = Array.from(files);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        setValues({...values, files: items});\r\n    };\r\n\r\n    const handleUploadFile = ({target}) => {\r\n        let photos = Array.from(target.files);\r\n        if (photos.length + files.length < TOTAL_FILES_LIMIT) {\r\n            const totalSize = files.reduce((\r\n                total,\r\n                item: {\r\n                    file: { size: number }\r\n                }) => total + item.file.size,\r\n                0\r\n            );\r\n            console.log(photos)\r\n            if ((totalSize + photos[0].size) < TOTAL_FILES_SIZE_LIMIT) {\r\n                photos = photos.map(file => ({\r\n                    file,\r\n                    url: URL.createObjectURL(file)\r\n                }));\r\n\r\n                setValues({\r\n                    ...values,\r\n                    files: [\r\n                        ...photos,\r\n                        ...files\r\n                    ]\r\n                })\r\n            }\r\n        }\r\n    };\r\n\r\n    const removeFile = (url) => () => {\r\n        files.map((item: { url: string }, index) => {\r\n            if (item.url === url) {\r\n                files.splice(index, 1);\r\n                setValues({...values, files});\r\n            }\r\n        });\r\n    };\r\n    console.log(files)\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n            <input\r\n                type='file'\r\n                disabled={isPreview}\r\n                onChange={handleUploadFile}\r\n                multiple={true}\r\n                accept=\"image/png,image/jpeg\"\r\n            />\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId=\"images\" direction=\"horizontal\">\r\n                    {(provided) => (\r\n                        <Grid container className=\"images-wrapper\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                            {files.map(({url, file}: { url: string, file: { name: string } }, index) => {\r\n                                return (\r\n                                    <Draggable isDragDisabled={isPreview} key={url} draggableId={url} index={index}>\r\n                                        {(provided) => (\r\n                                            <Grid\r\n                                                item\r\n                                                md={3}\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                            >\r\n                                                <img\r\n                                                    src={url}\r\n                                                    style={{width: '160px', height: '120px', objectFit: 'cover'}}\r\n                                                    alt={file.name}\r\n                                                />\r\n                                                <ButtonComponent\r\n                                                    disabled={isPreview}\r\n                                                    onClick={removeFile(url)}\r\n                                                >\r\n                                                    X\r\n                                                </ButtonComponent>\r\n                                            </Grid>\r\n                                        )}\r\n                                    </Draggable>\r\n                                );\r\n                            })}\r\n                            {provided.placeholder}\r\n                        </Grid>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}