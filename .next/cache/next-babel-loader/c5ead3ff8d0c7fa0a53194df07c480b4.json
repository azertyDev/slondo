{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers } from \"redux\";\nimport { HYDRATE } from \"next-redux-wrapper\";\nconst combinedReducer = combineReducers({\n  auth,\n  selfData\n});\nexport const rootReducer = (state, action) => {\n  if (action.type === HYDRATE) {\n    const nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n    if (state.count.count) nextState.count.count = state.count.count; // preserve count value on client side navigation\n\n    return nextState;\n  } else {\n    return combinedReducer(state, action);\n  } // combineReducers({\n  //     auth: authReducer,\n  //     selfData: selfDataReducer,\n  // });\n\n};","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/reducers/rootReducer.ts"],"names":["combineReducers","HYDRATE","combinedReducer","auth","selfData","rootReducer","state","action","type","nextState","payload","count"],"mappings":";;;;;;AAAA,SAAQA,eAAR,QAA8B,OAA9B;AAGA,SAAQC,OAAR,QAAsB,oBAAtB;AAGA,MAAMC,eAAe,GAAGF,eAAe,CAAC;AACpCG,EAAAA,IADoC;AAEpCC,EAAAA;AAFoC,CAAD,CAAvC;AAKA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1C,MAAIA,MAAM,CAACC,IAAP,KAAgBP,OAApB,EAA6B;AACzB,UAAMQ,SAAS,mCACRH,KADQ,GAERC,MAAM,CAACG,OAFC,CAAf;;AAIA,QAAIJ,KAAK,CAACK,KAAN,CAAYA,KAAhB,EAAuBF,SAAS,CAACE,KAAV,CAAgBA,KAAhB,GAAwBL,KAAK,CAACK,KAAN,CAAYA,KAApC,CALE,CAKwC;;AACjE,WAAOF,SAAP;AACH,GAPD,MAOO;AACH,WAAOP,eAAe,CAACI,KAAD,EAAQC,MAAR,CAAtB;AACH,GAVyC,CAW1C;AACA;AACA;AACA;;AACH,CAfM","sourcesContent":["import {combineReducers} from \"redux\";\r\nimport {authReducer} from \"./authReducer\";\r\nimport {selfDataReducer} from \"./selfDataReducer\";\r\nimport {HYDRATE} from \"next-redux-wrapper\";\r\n\r\n\r\nconst combinedReducer = combineReducers({\r\n    auth,\r\n    selfData,\r\n})\r\n\r\nexport const rootReducer = (state, action) => {\r\n    if (action.type === HYDRATE) {\r\n        const nextState = {\r\n            ...state, // use previous state\r\n            ...action.payload, // apply delta from hydration\r\n        }\r\n        if (state.count.count) nextState.count.count = state.count.count // preserve count value on client side navigation\r\n        return nextState\r\n    } else {\r\n        return combinedReducer(state, action)\r\n    }\r\n    // combineReducers({\r\n    //     auth: authReducer,\r\n    //     selfData: selfDataReducer,\r\n    // });\r\n}\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>"]},"metadata":{},"sourceType":"module"}