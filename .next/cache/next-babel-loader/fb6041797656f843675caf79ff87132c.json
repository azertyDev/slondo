{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect } from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { CustomMenu } from \"@src/components/elements/custom_menu/CustomMenu\";\nimport { useStyles } from './useStyles';\nexport var AdvrtSettingsBlock = function AdvrtSettingsBlock(props) {\n  _s();\n\n  var values = props.values,\n      setValues = props.setValues,\n      isPreview = props.isPreview,\n      setIsPreview = props.setIsPreview,\n      createAdvrt = props.createAdvrt,\n      resetValues = props.resetValues,\n      onBlur = props.onBlur,\n      handleClickMenuItem = props.handleClickMenuItem;\n  var adsParams = values.adsParams;\n  var data = isPreview ? adsParams : createAdvrt.data;\n  useEffect(function () {\n    resetValues();\n    setIsPreview(false);\n  }, [createAdvrt.category.id, createAdvrt.data.id]);\n  var classes = useStyles();\n  return __jsx(React.Fragment, null, __jsx(Grid, {\n    item: true,\n    container: true,\n    xs: 12,\n    spacing: 1,\n    className: classes.root\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Typography, {\n    variant: \"h5\"\n  }, __jsx(\"strong\", null, \"\\u041D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0439\\u043A\\u0438 \\u043E\\u0431\\u044A\\u044F\\u0432\\u043B\\u0435\\u043D\\u0438\\u044F\"))), Object.keys(data).map(function (key) {\n    if (Array.isArray(data[key]) && data[key].length) {\n      var newData = [{\n        id: null,\n        name: 'Не выбрано'\n      }].concat(_toConsumableArray(data[key]));\n      return listGenerator(newData, key);\n    } else if (!Array.isArray(data[key]) && isPreview && data[key]) {\n      return listGenerator(data, key);\n    }\n  }), !isPreview && Object.keys(data).map(function (key) {\n    return adsParams[key] && Object.keys(adsParams[key]).map(function (innerKey) {\n      if (Array.isArray(adsParams[key][innerKey]) && adsParams[key][innerKey].length) {\n        var newData = [{\n          id: null,\n          name: 'Не выбрано'\n        }].concat(_toConsumableArray(adsParams[key][innerKey]));\n        return listGenerator(newData, innerKey);\n      }\n    });\n  })));\n\n  function listGenerator(data, key) {\n    setValues(_objectSpread(_objectSpread({}, values), {}, _defineProperty({}, key, data[0])));\n    return __jsx(Grid, {\n      item: true,\n      key: key,\n      xs: 12,\n      sm: 4\n    }, __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, __jsx(\"strong\", null, key)), isPreview ? __jsx(Typography, {\n      variant: \"subtitle1\"\n    }, __jsx(\"strong\", null, data[key].name)) : __jsx(CustomMenu, {\n      valueName: adsParams[key] ? adsParams[key].name : data[0].name,\n      items: data,\n      onBlur: onBlur,\n      onClick: handleClickMenuItem(key)\n    }));\n  }\n};\n\n_s(AdvrtSettingsBlock, \"v7TDUGheAkBmKIQo9Gj65jeexyQ=\", false, function () {\n  return [useStyles];\n});\n\n_c = AdvrtSettingsBlock;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdvrtSettingsBlock\");","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/components/advertisement/create_advrt/advrtForm/advrt_settings_block/AdvrtSettingsBlock.tsx"],"names":["React","useEffect","Grid","Typography","CustomMenu","useStyles","AdvrtSettingsBlock","props","values","setValues","isPreview","setIsPreview","createAdvrt","resetValues","onBlur","handleClickMenuItem","adsParams","data","category","id","classes","root","Object","keys","map","key","Array","isArray","length","newData","name","listGenerator","innerKey"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAmBC,SAAnB,QAAmC,OAAnC;AACA,SAAQC,IAAR,EAAcC,UAAd,QAA+B,mBAA/B;AACA,SAAQC,UAAR,QAAyB,iDAAzB;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAGA,OAAO,IAAMC,kBAA2B,GAAG,SAA9BA,kBAA8B,CAACC,KAAD,EAAW;AAAA;;AAAA,MAE9CC,MAF8C,GAU9CD,KAV8C,CAE9CC,MAF8C;AAAA,MAG9CC,SAH8C,GAU9CF,KAV8C,CAG9CE,SAH8C;AAAA,MAI9CC,SAJ8C,GAU9CH,KAV8C,CAI9CG,SAJ8C;AAAA,MAK9CC,YAL8C,GAU9CJ,KAV8C,CAK9CI,YAL8C;AAAA,MAM9CC,WAN8C,GAU9CL,KAV8C,CAM9CK,WAN8C;AAAA,MAO9CC,WAP8C,GAU9CN,KAV8C,CAO9CM,WAP8C;AAAA,MAQ9CC,MAR8C,GAU9CP,KAV8C,CAQ9CO,MAR8C;AAAA,MAS9CC,mBAT8C,GAU9CR,KAV8C,CAS9CQ,mBAT8C;AAAA,MAY3CC,SAZ2C,GAY9BR,MAZ8B,CAY3CQ,SAZ2C;AAclD,MAAMC,IAAI,GAAGP,SAAS,GAAGM,SAAH,GAAeJ,WAAW,CAACK,IAAjD;AAEAhB,EAAAA,SAAS,CAAC,YAAM;AACZY,IAAAA,WAAW;AACXF,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHQ,EAGN,CAACC,WAAW,CAACM,QAAZ,CAAqBC,EAAtB,EAA0BP,WAAW,CAACK,IAAZ,CAAiBE,EAA3C,CAHM,CAAT;AAKA,MAAMC,OAAO,GAAGf,SAAS,EAAzB;AACA,SACI,4BACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,SAAS,MAApB;AAAqB,IAAA,EAAE,EAAE,EAAzB;AAA6B,IAAA,OAAO,EAAE,CAAtC;AAAyC,IAAA,SAAS,EAAEe,OAAO,CAACC;AAA5D,KACI,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE;AAAf,KACI,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC;AAApB,KACI,4IADJ,CADJ,CADJ,EAOQC,MAAM,CAACC,IAAP,CAAYN,IAAZ,EAAkBO,GAAlB,CAAsB,UAACC,GAAD,EAAS;AAC3B,QAAIC,KAAK,CAACC,OAAN,CAAcV,IAAI,CAACQ,GAAD,CAAlB,KAA4BR,IAAI,CAACQ,GAAD,CAAJ,CAAUG,MAA1C,EAAkD;AAC9C,UAAMC,OAAO,IAAI;AAACV,QAAAA,EAAE,EAAE,IAAL;AAAWW,QAAAA,IAAI,EAAE;AAAjB,OAAJ,4BAAuCb,IAAI,CAACQ,GAAD,CAA3C,EAAb;AACA,aAAOM,aAAa,CAACF,OAAD,EAAUJ,GAAV,CAApB;AACH,KAHD,MAGO,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcV,IAAI,CAACQ,GAAD,CAAlB,CAAD,IAA6Bf,SAA7B,IAA0CO,IAAI,CAACQ,GAAD,CAAlD,EAAyD;AAC5D,aAAOM,aAAa,CAACd,IAAD,EAAOQ,GAAP,CAApB;AACH;AACJ,GAPD,CAPR,EAiBQ,CAACf,SAAD,IAAcY,MAAM,CAACC,IAAP,CAAYN,IAAZ,EAAkBO,GAAlB,CAAsB,UAACC,GAAD;AAAA,WAChCT,SAAS,CAACS,GAAD,CAAT,IAAkBH,MAAM,CAACC,IAAP,CAAYP,SAAS,CAACS,GAAD,CAArB,EAA4BD,GAA5B,CAAgC,UAAAQ,QAAQ,EAAI;AAC1D,UAAIN,KAAK,CAACC,OAAN,CAAcX,SAAS,CAACS,GAAD,CAAT,CAAeO,QAAf,CAAd,KAA2ChB,SAAS,CAACS,GAAD,CAAT,CAAeO,QAAf,EAAyBJ,MAAxE,EAAgF;AAC5E,YAAMC,OAAO,IAAI;AAACV,UAAAA,EAAE,EAAE,IAAL;AAAWW,UAAAA,IAAI,EAAE;AAAjB,SAAJ,4BAAuCd,SAAS,CAACS,GAAD,CAAT,CAAeO,QAAf,CAAvC,EAAb;AACA,eAAOD,aAAa,CAACF,OAAD,EAAUG,QAAV,CAApB;AACH;AACJ,KALiB,CADc;AAAA,GAAtB,CAjBtB,CADJ,CADJ;;AAgCA,WAASD,aAAT,CAAuBd,IAAvB,EAA6BQ,GAA7B,EAAkC;AAE9BhB,IAAAA,SAAS,iCAAKD,MAAL,2BAAciB,GAAd,EAAoBR,IAAI,CAAC,CAAD,CAAxB,GAAT;AAEA,WACI,MAAC,IAAD;AACI,MAAA,IAAI,MADR;AAEI,MAAA,GAAG,EAAEQ,GAFT;AAGI,MAAA,EAAE,EAAE,EAHR;AAII,MAAA,EAAE,EAAE;AAJR,OAMI,MAAC,UAAD;AAAY,MAAA,OAAO,EAAC;AAApB,OACI,sBAASA,GAAT,CADJ,CANJ,EAUQf,SAAS,GACH,MAAC,UAAD;AAAY,MAAA,OAAO,EAAC;AAApB,OACE,sBAASO,IAAI,CAACQ,GAAD,CAAJ,CAAUK,IAAnB,CADF,CADG,GAIH,MAAC,UAAD;AACE,MAAA,SAAS,EAAEd,SAAS,CAACS,GAAD,CAAT,GAAiBT,SAAS,CAACS,GAAD,CAAT,CAAeK,IAAhC,GAAuCb,IAAI,CAAC,CAAD,CAAJ,CAAQa,IAD5D;AAEE,MAAA,KAAK,EAAEb,IAFT;AAGE,MAAA,MAAM,EAAEH,MAHV;AAIE,MAAA,OAAO,EAAEC,mBAAmB,CAACU,GAAD;AAJ9B,MAdd,CADJ;AAwBH;AACJ,CAnFM;;GAAMnB,kB;UAqBOD,S;;;KArBPC,kB","sourcesContent":["import React, {FC, useEffect} from \"react\";\r\nimport {Grid, Typography} from \"@material-ui/core\";\r\nimport {CustomMenu} from \"@src/components/elements/custom_menu/CustomMenu\";\r\nimport {useStyles} from './useStyles';\r\n\r\n\r\nexport const AdvrtSettingsBlock: FC<any> = (props) => {\r\n    const {\r\n        values,\r\n        setValues,\r\n        isPreview,\r\n        setIsPreview,\r\n        createAdvrt,\r\n        resetValues,\r\n        onBlur,\r\n        handleClickMenuItem\r\n    } = props;\r\n\r\n    const {adsParams} = values;\r\n\r\n    const data = isPreview ? adsParams : createAdvrt.data;\r\n\r\n    useEffect(() => {\r\n        resetValues();\r\n        setIsPreview(false);\r\n    }, [createAdvrt.category.id, createAdvrt.data.id]);\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <Grid item container xs={12} spacing={1} className={classes.root}>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h5\">\r\n                        <strong>Настройки объявления</strong>\r\n                    </Typography>\r\n                </Grid>\r\n                {\r\n                    Object.keys(data).map((key) => {\r\n                        if (Array.isArray(data[key]) && data[key].length) {\r\n                            const newData = [{id: null, name: 'Не выбрано'}, ...data[key]];\r\n                            return listGenerator(newData, key);\r\n                        } else if (!Array.isArray(data[key]) && isPreview && data[key]) {\r\n                            return listGenerator(data, key);\r\n                        }\r\n                    })\r\n                }\r\n                {\r\n                    !isPreview && Object.keys(data).map((key) => (\r\n                        adsParams[key] && Object.keys(adsParams[key]).map(innerKey => {\r\n                            if (Array.isArray(adsParams[key][innerKey]) && adsParams[key][innerKey].length) {\r\n                                const newData = [{id: null, name: 'Не выбрано'}, ...adsParams[key][innerKey]];\r\n                                return listGenerator(newData, innerKey);\r\n                            }\r\n                        })\r\n                    ))\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n\r\n    function listGenerator(data, key) {\r\n\r\n        setValues({...values, [key]: data[0]})\r\n\r\n        return (\r\n            <Grid\r\n                item\r\n                key={key}\r\n                xs={12}\r\n                sm={4}\r\n            >\r\n                <Typography variant=\"subtitle1\">\r\n                    <strong>{key}</strong>\r\n                </Typography>\r\n                {\r\n                    isPreview\r\n                        ? <Typography variant=\"subtitle1\">\r\n                            <strong>{data[key].name}</strong>\r\n                        </Typography>\r\n                        : <CustomMenu\r\n                            valueName={adsParams[key] ? adsParams[key].name : data[0].name}\r\n                            items={data}\r\n                            onBlur={onBlur}\r\n                            onClick={handleClickMenuItem(key)}\r\n                        />\r\n                }\r\n            </Grid>\r\n        )\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}