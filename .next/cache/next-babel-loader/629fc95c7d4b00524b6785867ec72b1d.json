{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { userAPI } from \"@src/api/api\";\nimport { setErrorMsgAction } from './errorSlice';\nconst initCategory = {\n  id: null,\n  name: '',\n  images: {\n    id: null,\n    url: {\n      default: ''\n    }\n  },\n  icons: {\n    id: null,\n    url: {\n      default: ''\n    }\n  },\n  childs: [],\n  has_auction: null\n};\nconst initCategories = Array.from({\n  length: 11\n}).map(() => initCategory);\nconst initialState = {\n  isFetch: false,\n  error: null,\n  list: initCategories\n}; // Async thunk\n\nexport const fetchCategories = createAsyncThunk('categories/fetchCategories', async lang => {\n  try {\n    return await userAPI.getCategories(lang);\n  } catch (e) {\n    setErrorMsgAction(e.message);\n  }\n});\nconst advertisementSlice = createSlice({\n  name: 'categories',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchCategories.pending, state => {\n      state.isFetch = true;\n      state.error = null;\n    });\n    builder.addCase(fetchCategories.fulfilled, (state, action) => {\n      state.isFetch = false;\n      state.error = null;\n      state.list = action.payload;\n    });\n    builder.addCase(fetchCategories.rejected, (state, action) => {\n      state.isFetch = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const categoriesReducer = advertisementSlice.reducer;","map":{"version":3,"sources":["C:/Users/abror/Documents/projects/slondo/src/redux/slices/categoriesSlice.ts"],"names":["createAsyncThunk","createSlice","userAPI","setErrorMsgAction","initCategory","id","name","images","url","default","icons","childs","has_auction","initCategories","Array","from","length","map","initialState","isFetch","error","list","fetchCategories","lang","getCategories","e","message","advertisementSlice","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","categoriesReducer","reducer"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,WAA1B,QAA4C,kBAA5C;AAEA,SAAQC,OAAR,QAAsB,cAAtB;AACA,SAAQC,iBAAR,QAAgC,cAAhC;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,EAAE,EAAE,IADa;AAEjBC,EAAAA,IAAI,EAAE,EAFW;AAGjBC,EAAAA,MAAM,EAAE;AACJF,IAAAA,EAAE,EAAE,IADA;AAEJG,IAAAA,GAAG,EAAE;AACDC,MAAAA,OAAO,EAAE;AADR;AAFD,GAHS;AASjBC,EAAAA,KAAK,EAAE;AACHL,IAAAA,EAAE,EAAE,IADD;AAEHG,IAAAA,GAAG,EAAE;AACDC,MAAAA,OAAO,EAAE;AADR;AAFF,GATU;AAejBE,EAAAA,MAAM,EAAE,EAfS;AAgBjBC,EAAAA,WAAW,EAAE;AAhBI,CAArB;AAmBA,MAAMC,cAAc,GAAGC,KAAK,CAACC,IAAN,CAAW;AAACC,EAAAA,MAAM,EAAE;AAAT,CAAX,EAAyBC,GAAzB,CAA6B,MAAMb,YAAnC,CAAvB;AAEA,MAAMc,YAAwB,GAAG;AAC7BC,EAAAA,OAAO,EAAE,KADoB;AAE7BC,EAAAA,KAAK,EAAE,IAFsB;AAG7BC,EAAAA,IAAI,EAAER;AAHuB,CAAjC,C,CAMA;;AACA,OAAO,MAAMS,eAAe,GAAGtB,gBAAgB,CAC3C,4BAD2C,EAE3C,MAAOuB,IAAP,IAAgB;AACZ,MAAI;AACA,WAAO,MAAMrB,OAAO,CAACsB,aAAR,CAAsBD,IAAtB,CAAb;AACH,GAFD,CAEE,OAAOE,CAAP,EAAU;AACRtB,IAAAA,iBAAiB,CAACsB,CAAC,CAACC,OAAH,CAAjB;AACH;AACJ,CAR0C,CAAxC;AAWP,MAAMC,kBAAkB,GAAG1B,WAAW,CAAC;AACnCK,EAAAA,IAAI,EAAE,YAD6B;AAEnCY,EAAAA,YAFmC;AAGnCU,EAAAA,QAAQ,EAAE,EAHyB;AAInCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBT,eAAe,CAACU,OAAhC,EAA0CC,KAAD,IAAW;AAChDA,MAAAA,KAAK,CAACd,OAAN,GAAgB,IAAhB;AACAc,MAAAA,KAAK,CAACb,KAAN,GAAc,IAAd;AACH,KAHD;AAIAU,IAAAA,OAAO,CAACC,OAAR,CAAgBT,eAAe,CAACY,SAAhC,EAA2C,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAC1DF,MAAAA,KAAK,CAACd,OAAN,GAAgB,KAAhB;AACAc,MAAAA,KAAK,CAACb,KAAN,GAAc,IAAd;AACAa,MAAAA,KAAK,CAACZ,IAAN,GAAac,MAAM,CAACC,OAApB;AACH,KAJD;AAKAN,IAAAA,OAAO,CAACC,OAAR,CAAgBT,eAAe,CAACe,QAAhC,EAA0C,CAACJ,KAAD,EAAQE,MAAR,KAAmB;AACzDF,MAAAA,KAAK,CAACd,OAAN,GAAgB,KAAhB;AACAc,MAAAA,KAAK,CAACb,KAAN,GAAce,MAAM,CAACC,OAArB;AACH,KAHD;AAIH;AAlBkC,CAAD,CAAtC;AAqBA,OAAO,MAAME,iBAAiB,GAAGX,kBAAkB,CAACY,OAA7C","sourcesContent":["import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {Categories, CategoryType} from '@root/interfaces/Categories'\r\nimport {userAPI} from \"@src/api/api\";\r\nimport {setErrorMsgAction} from './errorSlice';\r\n\r\n\r\nconst initCategory = {\r\n    id: null,\r\n    name: '',\r\n    images: {\r\n        id: null,\r\n        url: {\r\n            default: ''\r\n        }\r\n    },\r\n    icons: {\r\n        id: null,\r\n        url: {\r\n            default: ''\r\n        }\r\n    },\r\n    childs: [],\r\n    has_auction: null\r\n};\r\n\r\nconst initCategories = Array.from({length: 11}).map(() => initCategory);\r\n\r\nconst initialState: Categories = {\r\n    isFetch: false,\r\n    error: null,\r\n    list: initCategories,\r\n};\r\n\r\n// Async thunk\r\nexport const fetchCategories = createAsyncThunk<CategoryType[], string>(\r\n    'categories/fetchCategories',\r\n    async (lang) => {\r\n        try {\r\n            return await userAPI.getCategories(lang);\r\n        } catch (e) {\r\n            setErrorMsgAction(e.message);\r\n        }\r\n    }\r\n);\r\n\r\nconst advertisementSlice = createSlice({\r\n    name: 'categories',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchCategories.pending, (state) => {\r\n            state.isFetch = true;\r\n            state.error = null;\r\n        });\r\n        builder.addCase(fetchCategories.fulfilled, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = null;\r\n            state.list = action.payload;\r\n        });\r\n        builder.addCase(fetchCategories.rejected, (state, action) => {\r\n            state.isFetch = false;\r\n            state.error = action.payload;\r\n        });\r\n    }\r\n});\r\n\r\nexport const categoriesReducer = advertisementSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}